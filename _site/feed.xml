<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-31T21:20:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">쿼리구문에 큰 따옴표 사용 문법</title><link href="http://localhost:4000/database/SQL-use-quotes-in-query/" rel="alternate" type="text/html" title="쿼리구문에 큰 따옴표 사용 문법" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/SQL-use-quotes-in-query</id><content type="html" xml:base="http://localhost:4000/database/SQL-use-quotes-in-query/"><![CDATA[<h1 id="쿼리구문에-큰-따옴표-가-사용되는-경우">쿼리구문에 큰 따옴표(“ “)가 사용되는 경우</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">컬럼명</code> [AS] “Alias”
    <ul>
      <li>대소문자 구분</li>
      <li>특수문자 포함</li>
      <li>공백 포함하는 경우
<br /><br /></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TO_CHAR(sysdate, 'YYYY-MM-DD "Time" HH24:MI')</code>
    <ul>
      <li>사용자 형식 내 문자열 포함 시</li>
    </ul>
  </li>
</ul>

<h1 id="-긴가민가하면-작은-따옴표를-쓰자">=&gt; 긴가민가하면 작은 따옴표를 쓰자</h1>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[쿼리구문에 큰 따옴표(“ “)가 사용되는 경우 컬럼명 [AS] “Alias” 대소문자 구분 특수문자 포함 공백 포함하는 경우 TO_CHAR(sysdate, 'YYYY-MM-DD "Time" HH24:MI') 사용자 형식 내 문자열 포함 시]]></summary></entry><entry><title type="html">DB 구동 및 접속</title><link href="http://localhost:4000/database/DB-start-conn/" rel="alternate" type="text/html" title="DB 구동 및 접속" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/DB-start-conn</id><content type="html" xml:base="http://localhost:4000/database/DB-start-conn/"><![CDATA[<h1 id="-db-구동-및-접속">🎬 DB 구동 및 접속<br /></h1>

<h2 id="1-linux-부팅-및-터미널-실행">1. Linux 부팅 및 터미널 실행</h2>
<ul>
  <li>Windows에서 가상 PC를 실행한 뒤 Linux 부팅 후 로그인한다.</li>
  <li>Linux 부팅이 완료되면 <strong>마우스 우클릭 - 터미널 열기</strong></li>
</ul>

<h2 id="2-listener-시작">2. Listener 시작</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsnrctl start
</code></pre></div></div>
<ul>
  <li>Listener를 시작한다.</li>
  <li>Listener는 네트워크를 이용하여 클라이언트에서 오라클 서버로 연결하기 위한 오라클 네트워크 관리자이다.</li>
  <li>리스너를 시작하지 않아도 DB 구동엔 문제가 없지만 네트워크를 통한 연결은 모두 리스너가 담당하기 때문에 리스너를 시작하지 않으면 DB에 접속하고자 하는 클라이언트들이 접속할 수 없다.</li>
  <li>따라서 터미널이 실행되면 가장 먼저 리스너를 시작한 후 다음 프로세스를 진행한다.<br /><br /></li>
</ul>

<h2 id="3-sqlplus-실행">3. SqlPlus 실행</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlplus /nolog
</code></pre></div></div>

<h2 id="4-database-접속">4. Database 접속</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conn 아이디/비밀번호 as sysdba(권한)
</code></pre></div></div>
<h3 id="-db-user">🔸 DB User</h3>
<ul>
  <li>sysdba : dba + DB 생성 + DB 시작/종료 권한</li>
  <li>system : dba 권한</li>
  <li>hr : Object(테이블, 뷰, 시퀀스 등) 생성 및 운영 권한<br /><br /></li>
</ul>

<h2 id="5-database-시작">5. Database 시작</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; startup
</code></pre></div></div>

<h2 id="6-hr-사용자로-db-login">6. HR 사용자로 DB Login</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; conn 아이디/비밀번호
</code></pre></div></div>

<h2 id="7-사용자-확인">7. 사용자 확인</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; show user
</code></pre></div></div>
<ul>
  <li>HR 사용자로 최종 로그인 되었는지 확인한다.</li>
</ul>

<h3 id="-user-비밀번호-변경-방법">🔸 User 비밀번호 변경 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; alter user 아이디
     identified by 새 비밀번호;
</code></pre></div></div>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><summary type="html"><![CDATA[🎬 DB 구동 및 접속]]></summary></entry><entry><title type="html">DB 기초</title><link href="http://localhost:4000/database/DB-start/" rel="alternate" type="text/html" title="DB 기초" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/DB-start</id><content type="html" xml:base="http://localhost:4000/database/DB-start/"><![CDATA[<h1 id="-db란">🎬 DB란?<br /></h1>

<h2 id="-db를-쓰는-이유">🔸 DB를 쓰는 이유</h2>
<ul>
  <li>데이터를 오프라인으로 캐비넷에 저장하자니 물리적 저장 공간은 한정되어 있다.</li>
  <li>그렇다면 엑셀 파일을 만들어 암호를 걸어 쓰는 방법이 있는데 만약 암호가 유출된다면 그 엑셀 파일 안에 저장된 정보도 모두 유출된다. 따라서 이것도 안전한 방법은 아니다.</li>
  <li>그래서 서버에 데이터베이스를 구축하고 거기에 고객 정보를 저정하고 관리하는 것이다.
    <ul>
      <li>데이터베이스엔 애초에 허가받은 사용자만 접근할 수 있고 허가받은 권한 만큼만 데이터에 접근할 수 있다.<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="-dbms">🔸 DBMS</h2>
<ul>
  <li>데이터베이스 관리 시스템</li>
  <li>DB에서 필요한 데이터를 검색하거나 삽입, 수정, 삭제하기 위한 프로그램</li>
  <li>ORACLE, MySQL등이 있으며 이것들이 DB 자체를 의미하는 것은 아니다.
    <ul>
      <li>DB를 다루기 위한 수단으로서 MySQL을 사용하면 MySQL을 사용한 DB 프로그램인 것이다.<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="-rdbms">🔸 RDBMS</h2>
<ul>
  <li>관계형 DBMS</li>
  <li>시중에 나와있는 대부분의 DBMS라고 보면 된다.<br /><br /></li>
</ul>

<h2 id="-sql">🔸 SQL</h2>
<ul>
  <li>데이터 액세스를 위해 ORACLE server와 통신하는 언어로 DB와 소통하기 위한 언어</li>
  <li>모든 DBMS에서 사용하는 공용언어<br /><br /></li>
</ul>

<h2 id="-table">🔸 TABLE</h2>
<ul>
  <li>DB에서 사용하는 대표 객체(오브젝트)</li>
  <li>테이블을 사용해서 데이터를 분류한다.<br /><br />
<img src="../../assets/images/table.png" alt="table" /><br /><br /></li>
  <li>세로는 <strong>열(column)</strong>, 가로는 <strong>행(row)</strong>!!</li>
  <li>column과 row가 만나는 곳은 <strong>Field(Record)값</strong>이라고 부른다.<br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><summary type="html"><![CDATA[🎬 DB란?]]></summary></entry><entry><title type="html">HTTP 프로토콜(HyperText Transfer Protocol)</title><link href="http://localhost:4000/jsp/JSP-http-protocol/" rel="alternate" type="text/html" title="HTTP 프로토콜(HyperText Transfer Protocol)" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-http-protocol</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-http-protocol/"><![CDATA[<h1 id="-http-프로토콜이란">🎬 HTTP 프로토콜이란?</h1>
<ul>
  <li>실제 사용자와 연결된 최상위 계층의 프로토콜로 가장 대표적인 웹브라우저의 통신에 관한 프로토콜<br /><br /></li>
</ul>

<h2 id="-프로토콜protocol">🔸 프로토콜(Protocol)</h2>
<ul>
  <li>네트워크상에서 데이터를 주고 받는 규칙</li>
  <li>컴퓨터 상호간의 대화에 필요한 통신 규약<br /><br /><br /></li>
</ul>

<h1 id="1-http-프로토콜의-구조">1. HTTP 프로토콜의 구조</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">요청(Request)</code>과 <code class="language-plaintext highlighter-rouge">응답(Response)</code> 형태로 이루어졌다.</li>
  <li>사용자가 웹 페이지의 링크를 클릭하면 브라우저는 <code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜의 요청 형태로 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지를 작성하여 웹 서버에 전송한다.</li>
  <li>웹 서버에서는 지금 받은 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지가 <code class="language-plaintext highlighter-rouge">요청(Request)</code> 메시지임을 판단하고 그 데이터를 분석해서 <code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜의 <code class="language-plaintext highlighter-rouge">응답(Response)</code> 형태로 메시지를 작성하여 브라우저로 보내게 되면 브라우저는 메시지를 받아서 사용자의 화면에 표시하게 된다.<br /><br />
<img src="../../assets/images/httpMsgSturcture.png" alt="httpMsgSturcture" /><br /><br /></li>
  <li>각 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지는 지금 작성 된 메시지가 요청인지, 응답인지와 요청 URL 등 기본적인 정보가 담겨있는 시작 라인과 수행 날짜, 서버 정보, 브라우저 버전 등 부가적인 정보를 담는 헤더 그리고 요청이나 응답에 필요한 내용을 담고 있는 본문(Body)으로 구성된다.<br /><br /><br /></li>
</ul>

<h1 id="2-http-요청request-메시지">2. HTTP 요청(Request) 메시지</h1>
<ul>
  <li>기본적으로 <code class="language-plaintext highlighter-rouge">HTTP 메소드(Method)</code>와 접근할 주소(URL) 정보 그리고 서버에 전달할 데이터인 <code class="language-plaintext highlighter-rouge">폼 파라미터</code>로 구성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">HTTP 메소드(Method)</code>는 클라이언트가 웹 서버가 해야 할 행동을 정해주는 정보로 <code class="language-plaintext highlighter-rouge">GET 메소드</code>와 <code class="language-plaintext highlighter-rouge">POST 메소드</code>가 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">GET 메소드</code>를 사용하는 요청 메시지를 <code class="language-plaintext highlighter-rouge">GET 방식의 요청</code>, <code class="language-plaintext highlighter-rouge">POST 메소드</code>를 사용하는 요청 메시지를 <code class="language-plaintext highlighter-rouge">POST 방식의 요청</code>이라고 한다.<br /><br /></li>
</ul>

<h2 id="-get-방식">🔸 GET 방식</h2>
<ul>
  <li>전송할 파라미터 값들을 시작 라인의 URL 정보에 붙여서 같이 전송한다.</li>
  <li>파라미터의 길이는 256바이트를 넘을 수 없다.</li>
  <li>본문(Body)이 필요없기 때문에 전송 속도가 <code class="language-plaintext highlighter-rouge">POST</code> 방식에 비해 빠르다.</li>
  <li>전송해야 할 데이터가 적을 때 유용하다.</li>
  <li>파라미터가 URL뒤에 붙어서 전송되므로 사용자가 브라우저의 주소 창에서 전송되는 파라미터를 실제로 확인할 수 있다.<br /><br /></li>
</ul>

<h2 id="-post-방식">🔸 POST 방식</h2>
<ul>
  <li>전송할 파라미터 값들을 요청 메시지 본문(Body)에 담아서 전송한다.</li>
  <li>따라서 전송할 수 있는 데이터의 양에 제한이 없으며 주소창에서 전송되는 파라미터 확인이 불가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">GET</code> 방식에 비해 보안상 더 유용하다.<br /><br /></li>
</ul>

<p><img src="../../assets/images/getPostRequest.jpg" alt="getPostRequest" /><br /><br /><br /></p>

<h1 id="3-http-응답response-메시지">3. HTTP 응답(Response) 메시지</h1>
<ul>
  <li>요쳥에 대한 서버의 처리 성공 여부를 표시하는 상태 코드(HTTP 404, 500 등) 번호와 웹 서버가 응답해주는 콘텐츠의 타입 정보(텍스트/HTML, 이미지 등), 콘텐츠의 내용으로 구성된다.</li>
  <li>실제적으로 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스가 요청을 처리해 생성하는 페이지는 웹 서버에서 응답 메시지의 형태로 작성되어 사용자의 브라우저에 전송된다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><category term="HTTP" /><summary type="html"><![CDATA[🎬 HTTP 프로토콜이란? 실제 사용자와 연결된 최상위 계층의 프로토콜로 가장 대표적인 웹브라우저의 통신에 관한 프로토콜]]></summary></entry><entry><title type="html">웹페이지 기초</title><link href="http://localhost:4000/jsp/JSP-web-beginning/" rel="alternate" type="text/html" title="웹페이지 기초" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-web-beginning</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-web-beginning/"><![CDATA[<h1 id="-웹페이지에는-정적데이터와-동적데이터가-있다">🔸 웹페이지에는 정적데이터와 동적데이터가 있다.</h1>

<ul>
  <li>네이버 홈페이지에 접속하면 보이는 이미지 데이터들은 <code class="language-plaintext highlighter-rouge">정적데이터</code></li>
  <li>
    <p>HTML, CSS, JavaScript, … =&gt; WEB 서버에서 처리<br /><br /></p>
  </li>
  <li>신문 기사, 날씨, 코스피 지수 등 변하는 값들은 <code class="language-plaintext highlighter-rouge">동적데이터</code></li>
  <li>DB에 저장되어 있는 데이터 =&gt; <code class="language-plaintext highlighter-rouge">WAS(Web Application Server - web에 application이 추가된 것)</code>서버에서 처리
    <ul>
      <li>예) 톰캣이라는 <code class="language-plaintext highlighter-rouge">서버</code>에서 <code class="language-plaintext highlighter-rouge">자바 애플리케이션</code>이 실행되고 있는 것<br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="-웹페이지-동작">🔸 웹페이지 동작</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">[클라이언트/사용자]</code>가 naver에 요청 ➡️ <code class="language-plaintext highlighter-rouge">[naver - WEB서버]</code>가 판단해서 요청한 데이터가 <code class="language-plaintext highlighter-rouge">정적데이터</code>만 있다면 바로 실행하게 만듦 ➡️ <code class="language-plaintext highlighter-rouge">[클라이언트/사용자]</code>에게 naver가 응답(<code class="language-plaintext highlighter-rouge">정적데이터</code>)</li>
  <li>
    <p>👉 이 결과로 사용자는 naver 페이지를 볼 수 있게 된다.<br /><br /></p>
  </li>
  <li>하지만 <code class="language-plaintext highlighter-rouge">동적데이터</code>도 있다면…</li>
  <li>naver가 <code class="language-plaintext highlighter-rouge">[naver서버 - WAS서버]</code>에 <code class="language-plaintext highlighter-rouge">동적데이터</code>를 요청한다.</li>
  <li>
    <p>그러면 <code class="language-plaintext highlighter-rouge">[Database서버]</code>에 데이터를 요청해서 사용자에게 보여준다.<br /><br />
<img src="../../assets/images/webProcess.png" alt="webProcess" /><br /><br /></p>
  </li>
  <li>+) .com, .co.kr 과 같은 도메인은 비싸다.</li>
  <li>.ar 같은 도메인들은 무료</li>
</ul>

<h1 id="-dns">🔸 DNS</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">도메인 네임서버</code></li>
  <li>IP주소를 도메인 주소로 바꾼 것</li>
  <li>숫자로 된 IP주소는 외우기 힘드니까 좀 더 읽기 쉬운 문자형 주소로 바꾸는 것</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><summary type="html"><![CDATA[🔸 웹페이지에는 정적데이터와 동적데이터가 있다.]]></summary></entry><entry><title type="html">웹 프로그래밍 언어 종류</title><link href="http://localhost:4000/jsp/JSP-web-programming-languages/" rel="alternate" type="text/html" title="웹 프로그래밍 언어 종류" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-web-programming-languages</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-web-programming-languages/"><![CDATA[<h1 id="1-cgicommon-gateway-interface">1. CGI(Common Gateway Interface)</h1>
<ul>
  <li>응용 프로그램과 웹 서버 사이의 정보를 주고받는 방식이나 규약들을 정해 놓은 것</li>
  <li>단순한 <code class="language-plaintext highlighter-rouge">HTML</code> 방식으로는 동적인 웹 페이지를 만들기가 어렵기 때문에 서버측에서 동적인 데이터를 처리해 클라이언트에 <code class="language-plaintext highlighter-rouge">HTML</code> 문서로 전송해 줄 수 있는 <code class="language-plaintext highlighter-rouge">응용 프로그램(웹 프로그램)</code>이 필요해져서 만들어졌다.</li>
  <li>현재 웹 프로그래밍은 대부분 <code class="language-plaintext highlighter-rouge">ASP</code>, <code class="language-plaintext highlighter-rouge">PHP</code>, <code class="language-plaintext highlighter-rouge">JSP</code>를 이용한 것이 대부분인데, <code class="language-plaintext highlighter-rouge">DBMS와의 간편한 연동</code>, <code class="language-plaintext highlighter-rouge">객체 지향적인 특성</code>, <code class="language-plaintext highlighter-rouge">편한 개발 환경</code> 등 강력한 기능을 갖추었기 때문이다.<br /><br /></li>
</ul>

<h2 id="-dbmsdatabase-management-system">🔸 DBMS(Database Management System)</h2>
<ul>
  <li>데이터베이스 관리자라고도 불리며 다수의 컴퓨터 사용자들이 데이터베이스 안에 데이터를 기록하거나 접근할 수 있게 해주는 프로그램</li>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>는 데이터베이스 내의 정보를 검색하거나, 데이터베이스에 정보를 저장하기 편리하고 효율적인 환경을 제공하며, 응용 소프트웨어별로 흩어져 있는 자료들을 통합하고 통합된 자료들을 각 응용 소프트웨어가 공유하여 정보의 체계적인 활용을 가능하게 한다.</li>
  <li>일반적인 형태의 DBMS는 관계형 데이터베이스 관리 시스템(<code class="language-plaintext highlighter-rouge">RDBMS</code>)인데, <code class="language-plaintext highlighter-rouge">RDBMS</code>의 표준화된 사용자 및 프로그램 인터페이스를 <code class="language-plaintext highlighter-rouge">SQL(Strutured Query Language)</code>이라고 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">RDBMS</code>로는 <code class="language-plaintext highlighter-rouge">오라클(Oracle)</code>, <code class="language-plaintext highlighter-rouge">사이베이스(Sybase)</code>, <code class="language-plaintext highlighter-rouge">인포믹스(Infomix)</code>등이 쓰인다.<br /><br /></li>
</ul>

<h2 id="-인터페이스interface">🔸 인터페이스(Interface)</h2>
<ul>
  <li>사물과 사물간의 소통이 가능하도록 만들어진 매개체 또는 규약</li>
  <li>웹 프로그래밍에서는 서버와 응용 프로그램 간의 원활한 통신이 가능하도록 만들어진 규약을 말한다.<br /><br /></li>
</ul>

<h2 id="-스크립트-언어script-language">🔸 스크립트 언어(Script Language)</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">C</code>와 같은 일반적인 프로그래밍 언어는 컴파일러에 의해 컴파일 되어 2진수로 되어있는 기계어로 변환되어야지만 컴퓨터 상에서 실행될 수 있다.</li>
  <li>이와는 달리 컴파일이 필요 없이 해석기(<code class="language-plaintext highlighter-rouge">인터프리터</code>)에 의해 즉시 실행될 수 있는 프로그램 언어를 <code class="language-plaintext highlighter-rouge">스크립트 언어</code>라고 한다.</li>
  <li>대표적으로 <code class="language-plaintext highlighter-rouge">브라우저</code>에 의해 해석되어 실행되는 <code class="language-plaintext highlighter-rouge">JavaScript</code>가 있으며, <code class="language-plaintext highlighter-rouge">Unix</code>의 쉘 스크립트, <code class="language-plaintext highlighter-rouge">윈도우</code>의 Batch 파일도 스크립트 언어라 할 수 있다.<br /><br /><br /></li>
</ul>

<h1 id="2-aspactive-server-page">2. ASP(Active Server Page)</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">C#(.Net)</code>과 유사하다.</li>
  <li>동적인 웹 페이지의 구현을 위해 <code class="language-plaintext highlighter-rouge">Visual Basic</code> 언어를 기반으로 만들어진 <code class="language-plaintext highlighter-rouge">VBScript</code>라는 스크립트 언어를 사용해서 구성된 웹 프로그래밍 기술</li>
  <li>쉬운 문법을 가지고 있어 빠르고 쉽게 개발할 수 있고 Active-X 및 DDL 컴포넌트를 사용하여 어느 정도의 확장성도 갖추었지만 웹 서버로 오직 <code class="language-plaintext highlighter-rouge">Windows</code> 기반의 <code class="language-plaintext highlighter-rouge">IIS(Internet Information Server)</code>만을 사용할 수 있기 때문에 플랫폼에 비독립적이라는 큰 단점을 가디고 있다.</li>
  <li>또한 <code class="language-plaintext highlighter-rouge">Java</code> 기반의 <code class="language-plaintext highlighter-rouge">JSP</code>에 비해 시스템 자원의 효율성과 확장성이 떨어진다.<br /><br /><br /></li>
</ul>

<h1 id="3-phppersonal-hypertext-preprocessor">3. PHP(Personal Hypertext Preprocessor)</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ASP</code>와 유사한 스크립트 기반의 언어이지만 <code class="language-plaintext highlighter-rouge">C</code>를 기반으로 만들어져서 빠른 속도를 가지고 있다.</li>
  <li>다양한 플랫폼에서 사용 가능하며 100% 무료로 사용할 수 있다.</li>
  <li>하지만 서버측의 지원 인프라가 매우 부족하여 확장성이 떨어지고, 기업형의 복잡한 시스템 구조에 적용하기가 힘들고 보안상의 약점을 가지고 있다.<br /><br /><br /></li>
</ul>

<h1 id="4-jsp">4. JSP</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Java</code>를 기반으로 만들어진 <code class="language-plaintext highlighter-rouge">서블릿(Servlet)</code>이라는 동적 웹 구현 기술이 개발된다.</li>
  <li><code class="language-plaintext highlighter-rouge">서블릿</code>은 객체지향적이며 플랫폼 독립적인 자바의 장점을 그대로 웹에서 구현할 수 있었으며 <code class="language-plaintext highlighter-rouge">스레드(Thread)</code> 기반의 요청 처리 방식을 채택했기에 사용자가 많을수록 효율적으로 동작하는 기술이었다.</li>
  <li>하지만 익히기가 쉽지 않은 편이었기 때문에 유저인터페이스의 구현이 쉬운 <code class="language-plaintext highlighter-rouge">ASP</code>의 장점을 수용하여 <code class="language-plaintext highlighter-rouge">JSP</code>가 개발된다.</li>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 또한 스크립트 기반으로 개발되어 훨씬 쉽게 작성할 수 있었고 <strong><code class="language-plaintext highlighter-rouge">서블릿</code>과 함께 구동함으로써 <code class="language-plaintext highlighter-rouge">서블릿</code>의 기능을 그대로 사용할 수 있고 <code class="language-plaintext highlighter-rouge">자바빈즈(JavaBeans)</code>, <code class="language-plaintext highlighter-rouge">EJB</code>같은 기술로 보다 강력한 객체지향적 지원이 가능</strong>해졌다.</li>
  <li>또한 <code class="language-plaintext highlighter-rouge">JSTL</code>을 지원하게 되면서 웹 프로그램의 가독성이 좋아지고 유지 및 보수가 훨씬 쉬워지는 장점을 가지게 되었다.</li>
  <li>이러한 장점들은 대규모 프로젝트에서 유용하기 때문에 최근에는 일정 규모 이상의 웹사이트를 개발할 때에는 주로 <code class="language-plaintext highlighter-rouge">JSP</code>를 사용한다.<br /><br /></li>
</ul>

<h2 id="-프로세스process">🔸 프로세스(Process)</h2>
<ul>
  <li>실행 중인 프로그램을 나타내는 말로 <code class="language-plaintext highlighter-rouge">태스크(Task)</code>라고도 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">윈도우</code>와 같이 멀티태스킹을 지원하는 운영체제에서는 동시에 실행되고 있는 여러 개의 프로세스에 대하여 <code class="language-plaintext highlighter-rouge">CPU</code>와 <code class="language-plaintext highlighter-rouge">메모리 자원</code>을 안정되게 분배해 주어야 하며 이러한 역할은 그 운영체제의 성능을 결정하는 데 있어 아주 중요한 요소이다.</li>
  <li>그런데 운영체제는 똑같은 프로그램이 두 개 이상 실행되면 같은 프로그램이라 하더라도 서로 다른 자원을 할당해 두 개 이상의 프로세스를 만든다.</li>
  <li>이는 실행되는 프로그램의 수가 늘어날수록 할당해야 하는 자원이 늘어나게 되어 굉장히 비효율적이고 성능의 하락을 가져올 것이다.</li>
  <li>이러한 단점을 극복하기 위해 개발된 것이 <code class="language-plaintext highlighter-rouge">스레드(Thread)</code>이다.<br /><br /></li>
</ul>

<h2 id="-스레드thread">🔸 스레드(Thread)</h2>
<ul>
  <li>하나의 프로세스 내에서 해당 프로세스가 할당받은 자원을 공유하며 실행되는 독립적인 작업단위</li>
  <li>프로세스의 자원을 참조할 뿐 새로 할당받을 필요가 없기 때문에 프로세스를 생성하는 것보다 훨씬 빠른 생성 속도를 가진다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><summary type="html"><![CDATA[1. CGI(Common Gateway Interface) 응용 프로그램과 웹 서버 사이의 정보를 주고받는 방식이나 규약들을 정해 놓은 것 단순한 HTML 방식으로는 동적인 웹 페이지를 만들기가 어렵기 때문에 서버측에서 동적인 데이터를 처리해 클라이언트에 HTML 문서로 전송해 줄 수 있는 응용 프로그램(웹 프로그램)이 필요해져서 만들어졌다. 현재 웹 프로그래밍은 대부분 ASP, PHP, JSP를 이용한 것이 대부분인데, DBMS와의 간편한 연동, 객체 지향적인 특성, 편한 개발 환경 등 강력한 기능을 갖추었기 때문이다.]]></summary></entry><entry><title type="html">SELECT 구문을 사용한 데이터 검색</title><link href="http://localhost:4000/database/SQL-SELECT/" rel="alternate" type="text/html" title="SELECT 구문을 사용한 데이터 검색" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/SQL-SELECT</id><content type="html" xml:base="http://localhost:4000/database/SQL-SELECT/"><![CDATA[<h1 id="-sql-문법은-기본적으로-대소문자를-구분하지-않는다-">🎬 SQL 문법은 기본적으로 대소문자를 구분하지 않는다. <br /></h1>

<h2 id="️-문법">☑️ 문법</h2>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="o">|</span> <span class="p">{[</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="k">column</span> <span class="o">|</span> <span class="n">expression</span> <span class="p">[</span><span class="k">alias</span><span class="p">],</span> <span class="p">...}</span>
<span class="k">FROM</span>   <span class="k">table</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="1-테이블-구조-조회">1. 테이블 구조 조회</h2>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DESCRIBE</span> <span class="n">employees</span>
</code></pre></div></div>
<p><img src="../../assets/images/describe.png" alt="describe" /><br /><br /></p>

<h2 id="2-테이블로부터-데이터-검색">2. 테이블로부터 데이터 검색</h2>
<h3 id="1-select-구문">1) SELECT 구문</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span>   <span class="n">department</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>‘*‘은 모든 것을 보여달라고 할 때 사용한다.</li>
  <li>SQL 구문 또한 세미콜론(;)을 사용해서 문장이 끝났다는 것을 표시하기 때문에 명령어를 실행하려면 마지막에 세미콜론을 꼭 찍어줘야 한다.<br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">department_id</span><span class="p">,</span> <span class="n">location_id</span>
<span class="n">FORM</span>   <span class="n">departments</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>SELECT 뒤에 컬럼명을 지정하면 해당 컬럼에 해당하는 내용들만 보여달라는 뜻이 된다.<br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="mi">12</span><span class="o">*</span><span class="n">salary</span><span class="o">+</span><span class="mi">100</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li><strong>12*salary+100</strong> 처럼 내가 원하는 계산을 한 결과를 출력하게 할 수도 있다.<br /><br /></li>
</ul>

<h4 id="-입력한-명령어-수정-마지막으로-쓴-명령어와-비슷한-명령어를-또-써야-할-때-유용하다">🔸 입력한 명령어 수정 (마지막으로 쓴 명령어와 비슷한 명령어를 또 써야 할 때 유용하다)</h4>
<ul>
  <li>SQL에서는 가장 마지막에 입력한 구문 하나만 버퍼에 저장되어서 이것을 수정할 수 있다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ed</span>
</code></pre></div>    </div>
  </li>
  <li>위 명령어를 입력하고 엔터를 치면 버퍼를 수정할 수 있는 모드에 들어갈 수 있다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span>
</code></pre></div>    </div>
  </li>
  <li>를 누르면 하단에 –INTSERT–가 표시되며 버퍼에 저장된 명령어를 수정할 수 있다.</li>
  <li>이 때 구문의 마지막에 세미콜론을 입력하면 <strong>안 된다!!!</strong></li>
  <li>모든 수정이 끝나면 ESC를 눌러 수정을 종료한 뒤
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span><span class="n">wq</span>
</code></pre></div>    </div>
  </li>
  <li>위 명령어를 입력하면 버퍼 수정 모드를 빠져나온다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span> <span class="o">+</span> <span class="n">ENTER</span>
</code></pre></div>    </div>
  </li>
  <li>’/’를 입력하고 엔터를 누르면 버퍼에 저장된 명령어를 실행하는 동작이다. 모든 수정을 마치고 나와서 ‘/’ + 엔터를 실행해주면 아까 수정했던 명령어가 실행되는 것을 볼 수 있다.<br /><br /></li>
</ul>

<h3 id="2-null값이란">2) null값이란?</h3>
<ul>
  <li>사용할 수 없는 값, 알려지지 않은 값, 할당받지 못한 값, 모르는 값, 아직 정의되지 않은 값 등…</li>
  <li>null은 0(zero)이나 공백과는 다른 특수한 값으로 모든 데이터타입에 사용 가능하다.<br /><br /></li>
</ul>

<h3 id="3-column-alias">3) Column Alias</h3>
<ul>
  <li>컬럼명에 별명을 붙이는 것</li>
  <li>원래 정해져 있는 컬럼명을 사용자가 보기에 좀 더 알아보기 쉽게 표시하고 싶을 때 사용한다.
    <h4 id="1️⃣--컬럼명-as-alias">1️⃣  컬럼명 AS alias</h4>
    <h4 id="2️⃣--컬럼명-alias">2️⃣  컬럼명 alias</h4>
    <h4 id="3️⃣--컬럼명-as-alias--대소문자-구분-공백-포함-특수문자-포함을-원하는-경우">3️⃣  컬럼명 [AS] “Alias” =&gt; 대소문자 구분, 공백 포함, 특수문자 포함을 원하는 경우</h4>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="n">commission_pct</span> <span class="n">comm</span>
<span class="n">FORM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><img src="../../assets/images/alias01.png" alt="alias01" /><br /><br /></p>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span> <span class="nv">"Name"</span><span class="p">,</span> <span class="n">salary</span><span class="o">*</span><span class="mi">12</span> <span class="nv">"Annual Salary"</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><img src="../../assets/images/alias02.png" alt="alias02" /><br /><br /></p>
  </li>
</ul>

<h3 id="4-연결-연산자-">4) 연결 연산자 (||)</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span> <span class="o">||</span> <span class="n">job_id</span> <span class="k">AS</span> <span class="nv">"Employees"</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td> </td>
          <td>로 연결된 컬럼들을 묶어서 한 컬럼에 표시해 준다. 이것 또한 Alias 지정이 가능하다.<br /><br /></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="5-리터럴-문자">5) 리터럴 문자</h3>
<ul>
  <li>리터럴 문자란 쿼리 구문에 포함된 일반 문자, 숫자, 날짜 값</li>
  <li>문자나 날짜 리터럴은 작은 따옴표로 묶어서 작성해야 함
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span> <span class="o">||</span> <span class="s1">' is a '</span> <span class="o">||</span> <span class="n">job_id</span>
     <span class="k">AS</span> <span class="nv">"Employee Details"</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>Alias를 지정하지 않았다면 ‘last_name is a job_id’ 라는 컬럼명으로 표시된다.<br /><br /></li>
</ul>

<h3 id="6-distinct-키워드">6) DISTINCT 키워드</h3>
<ul>
  <li>중복된 값을 자동으로 제거해 주는 키워드
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">department_id</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
    <hr />
  </li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[🎬 SQL 문법은 기본적으로 대소문자를 구분하지 않는다.]]></summary></entry><entry><title type="html">WHERE(조건문)절과 ORDER BY(정렬)절</title><link href="http://localhost:4000/database/SQL-WHERE-ORDER-BY/" rel="alternate" type="text/html" title="WHERE(조건문)절과 ORDER BY(정렬)절" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/SQL-WHERE-ORDER-BY</id><content type="html" xml:base="http://localhost:4000/database/SQL-WHERE-ORDER-BY/"><![CDATA[<h1 id="️-문법">☑️ 문법</h1>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="o">|</span> <span class="p">{[</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="k">column</span> <span class="o">|</span> <span class="n">expression</span> <span class="p">[</span><span class="k">alias</span><span class="p">],</span> <span class="p">...}</span>
<span class="k">FROM</span>   <span class="k">table</span>
<span class="p">[</span><span class="k">WHERE</span> <span class="n">condition</span><span class="p">(</span><span class="n">s</span><span class="p">)]</span>
<span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="p">{</span><span class="k">column</span><span class="p">,</span> <span class="n">expr</span><span class="p">,</span> <span class="k">alias</span><span class="p">}</span> <span class="p">[</span><span class="k">ASC</span> <span class="o">|</span> <span class="k">DESC</span><span class="p">]];</span>
</code></pre></div></div>

<h1 id="1-1-where절">1) 1. WHERE절</h1>
<ul>
  <li>WHERE절을 사용해서 특정 칼럼에서 어떤 값을 가진 필드값만 찾아달라고 할 수 있다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">department_id</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">department_id</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>employee_id, last_name, job_id, department_id 컬럼을 출력하는데 department_id가 90인 필드만 출력해라<br /><br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">department_id</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">last_name</span> <span class="o">=</span> <span class="s1">'Whalen'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>last_name, job_id, department_id 컬럼을 출력하는데 last_name이 ‘Whalen’인 필드만 출력해라<br /><br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">hire_date</span> <span class="o">=</span> <span class="s1">'17-FEB-96'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>last_name 컬럼을 출력하는데 hire_date가 96년 2월 17일인 필드를 출력해라</li>
  <li>날짜를 쓸 때엔 ‘DD-MM-YY’형식으로 쓴다.<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">salary</span> <span class="o">&lt;=</span> <span class="mi">3000</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>last_name, salary 컬럼을 출력하는데 salary가 3000 이하인 필드를 출력해라<br /><br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">salary</span> <span class="k">BETWEEN</span> <span class="mi">2500</span> <span class="k">AND</span> <span class="mi">3500</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>last_name, salary 컬럼을 출력하는데 salary가 2500 ~ 3500 사이인 필드를 출력해라<br /><br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">manager_id</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">manager_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">201</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>employee_id, last_name, salary, manager_id 컬럼을 출력하는데 manager_id가 100이거나 101이거나 201인 필드를 출력해라(or과 같은 역할)<br /><br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">last_name</span> <span class="k">LIKE</span> <span class="s1">'_O%'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>last_name 컬럼을 출력하는데 last_name의 두번째 문자가 o인 필드를 출력해라
    <h2 id="-like-비교연산자">🔸 LIKE 비교연산자</h2>
  </li>
  <li>% : 0 char 또는 여러개 char</li>
  <li>_ : 반드시 1 char
    <ul>
      <li>a로 시작되는 문자열 : ‘a%’</li>
      <li>a가 포함된 문자열 : ‘%a%’</li>
      <li>a로 끝나는 문자열 : ‘%a’</li>
      <li>두번째 문자가 a인 문자열 : ‘_a%’</li>
      <li>끝에서 세번째 문자가 a인 문자열 : ‘%a__‘<br /><br /></li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">manager_id</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">manager_id</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>last_name, manager_id 컬럼을 출력하는데 manager_id가 null인 필드를 출력해라<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">salary</span> <span class="o">&gt;=</span> <span class="mi">10000</span>
<span class="k">AND</span>    <span class="n">job_id</span> <span class="k">LIKE</span> <span class="s1">'%MAN%'</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>employee_id, last_name, job_id, salary 컬럼을 출력하는데 salary가 10000 이상이고 job_id에 MAN이 포함되는 필드를 출력해라<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">salary</span> <span class="o">&gt;=</span> <span class="mi">10000</span>
<span class="k">OR</span>     <span class="n">job_id</span> <span class="k">LIKE</span> <span class="s1">'%MAN%'</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>employee_id, last_name, job_id, salary 컬럼을 출력하는데 salary가 10000 이상이거나 job_id에 MAN이 포함되는 필드를 출력해라<br /><br /></li>
</ul>

<h2 id="-비교연산자에-not논리연산자이-조합으로-사용된-경우">🔸 비교연산자에 NOT(논리연산자)이 조합으로 사용된 경우</h2>
<p><img src="../../assets/images/notOperator.png" alt="notOperator" /><br /><br /></p>

<h1 id="2-order-by절">2. ORDER BY절</h1>
<ul>
  <li>ORDER BY절을 사용해서 특정 조건에 따라 필드값을 정렬해서 볼 수 있다.</li>
  <li>ASC : Ascending order, default 오름차순</li>
  <li>DESC : Descending order 내림차순
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">department_id</span><span class="p">,</span> <span class="n">hire_date</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">hire_date</span> <span class="k">DESC</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>last_name, job_id, department_id, hire_date 컬럼을 출력하는데 hire_date의 내림차순으로 정렬해라<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="o">*</span><span class="mi">12</span> <span class="n">annsal</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">annsal</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>employee_id, last_name, salary<em>12 annsal 컬럼을 출력하는데 salary</em>12은 annsal이라는 Alias로 출력하고 annsal의 오름차순으로 정렬해라<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">job_id</span><span class="p">,</span> <span class="n">department_id</span><span class="p">,</span> <span class="n">hire_date</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>last_name, job_id, department_id, hire_date 컬럼을 출력하는데 3번째 컬럼(department_id)의 오름차순으로 정렬해라</li>
  <li>하지만 숫자로 표시하면 알아보기 힘들어서 추천하는 방법은 아니다.<br /><br /></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">department_id</span><span class="p">,</span> <span class="n">salary</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">department_id</span><span class="p">,</span> <span class="n">salary</span> <span class="k">DESC</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>last_name, department_id, salary 컬럼을 출력하는데 department_id, salary 컬럼의 내림차순으로 정렬해라<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[☑️ 문법 SELECT * | {[DISTINCT] column | expression [alias], ...} FROM table [WHERE condition(s)] [ORDER BY {column, expr, alias} [ASC | DESC]];]]></summary></entry><entry><title type="html">단일 행 함수</title><link href="http://localhost:4000/database/SQL-single-func/" rel="alternate" type="text/html" title="단일 행 함수" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/SQL-single-func</id><content type="html" xml:base="http://localhost:4000/database/SQL-single-func/"><![CDATA[<h1 id="1-함수란">1. 함수란?</h1>
<p><img src="../../assets/images/whatIsFunction.png" alt="whatIsFunction" /><br /><br /></p>

<h1 id="2-sql-함수의-두가지-유형">2. SQL 함수의 두가지 유형</h1>
<p><img src="../../assets/images/sqlFuncSort.png" alt="sqlFuncSort" /><br /><br /></p>

<h1 id="3-단일-행-함수">3. 단일 행 함수</h1>
<p><img src="../../assets/images/singleFunc.png" alt="singleFunc" /><br /><br /></p>

<h2 id="1-문자함수">1) 문자함수</h2>
<ul>
  <li>문자 입력을 받아 들이며 문자 및 숫자값을 모두 반환할 수 있다.
<img src="../../assets/images/charFunc.png" alt="charFunc" /><br /><br />
    <h3 id="1️⃣-대소문자-변환-함수">1️⃣ 대소문자 변환 함수</h3>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th>기능</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>LOWER(‘SQL Course’)</td>
      <td>sql course</td>
      <td>모두 소문자로 변환</td>
      <td> </td>
    </tr>
    <tr>
      <td>UPPER(‘SQL Course’)</td>
      <td>SQL COURSE</td>
      <td>모두 대문자로 변환</td>
      <td> </td>
    </tr>
    <tr>
      <td>INITCAP(‘SQL Course’)</td>
      <td>sql Course</td>
      <td>단어의 첫 글자만 대문자로 변환</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">department_id</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="k">LOWER</span><span class="p">(</span><span class="n">last_name</span><span class="p">)</span> <span class="o">=</span> <span class="s1">'higgins'</span><span class="p">;</span>
</code></pre></div></div>
<p><img src="../../assets/images/lowerFunc.png" alt="lowerFunc" /><br /><br /></p>

<h3 id="2️⃣-문자-조작-함수">2️⃣ 문자 조작 함수</h3>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th>기능</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CONCAT(‘Hello’, ‘World’)</td>
      <td>HelloWorld</td>
      <td>파라미터 두개를 연결(사용 가능 파라미터는 두개로 제한)</td>
      <td> </td>
    </tr>
    <tr>
      <td>SUBSTR(‘HelloWorld’, 1, 5)</td>
      <td>Hello</td>
      <td>지정된 범위의 문자열 추출</td>
      <td> </td>
    </tr>
    <tr>
      <td>LENGTH(‘HelloWorld’)</td>
      <td>10</td>
      <td>문자열 길이 리턴</td>
      <td> </td>
    </tr>
    <tr>
      <td>INSTR(‘HelloWorld’, ‘W’)</td>
      <td>6</td>
      <td>문자열에서 지정된 문자의 숫자 위치를 찾음</td>
      <td> </td>
    </tr>
    <tr>
      <td>LPAD(salary, 10, ‘@’)</td>
      <td>@@@@@24000</td>
      <td>길이가 n이 되도록 왼쪽부터 문자식으로 채운 표현식 리턴</td>
      <td> </td>
    </tr>
    <tr>
      <td>RPAD(salary, 10, ‘@’)</td>
      <td>24000@@@@@</td>
      <td>길이가 n이 되도록 오른쪽부터 문자식으로 채운 표현식 리턴</td>
      <td> </td>
    </tr>
    <tr>
      <td>REPLACE(‘JACK and JUE’, ‘J’, ‘BL’)</td>
      <td>BLACK and BLUE</td>
      <td>1번 파라미터에서 2번 파리미터로 입력한 값을 3번 파라미터로 변경</td>
      <td> </td>
    </tr>
    <tr>
      <td>TRIM(‘H’ FROM ‘HelloWorld’)</td>
      <td>elloWorld</td>
      <td>문자열에서 선행문자나 후행문자를 자름</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">CONCAT</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span> <span class="n">NAME</span><span class="p">,</span>
       <span class="n">job_id</span><span class="p">,</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">last_name</span><span class="p">),</span>
       <span class="n">INSTR</span><span class="p">(</span><span class="n">last_name</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">)</span> <span class="nv">"Contains 'a'"</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">SUBSTR</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=</span> <span class="s1">'REP'</span><span class="p">;</span>
</code></pre></div></div>
<p><img src="../../assets/images/charFunc02.png" alt="charFunc02" /><br /><br /><br /></p>

<h2 id="2-숫자함수">2) 숫자함수</h2>
<ul>
  <li>숫자 입력을 받아 들이고 숫자값을 반환한다.<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th>기능</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ROUND(45.926, 2)</td>
      <td>45.93</td>
      <td>지정된 소수점 자릿수로 반올림</td>
      <td> </td>
    </tr>
    <tr>
      <td>TRUNC(45.926, 2)</td>
      <td>45.92</td>
      <td>지정된 소수점 자릿수로 버림</td>
      <td> </td>
    </tr>
    <tr>
      <td>MOD(1600, 300)</td>
      <td>100</td>
      <td>나눈 나머지 반환</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<h3 id="-dual-테이블">🔸 DUAL 테이블</h3>
<ul>
  <li>SYS 소유</li>
  <li>함수 및 계산 결과를 볼 때 사용하는 공용 테이블</li>
  <li>DUMMY라는 하나의 열과 값이 X인 하나의 행을 포함
    <ul>
      <li>이걸 쓰는 이유는 컬럼을 출력할 필요가 없이 어떤 값을 계산한 결과만 보고 싶어도 FROM절에 테이블명을 꼭 써야 함</li>
      <li>이 때 employees 처럼 실제 데이터가 들은 테이블을 호출하면 비효율적이니까 아무것도 없는 빈 테이블을 DUAL 테이블이라 지정하고 계산 결과만 볼 때에 호출하는 것
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">45</span><span class="p">.</span><span class="mi">923</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">45</span><span class="p">.</span><span class="mi">923</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">45</span><span class="p">.</span><span class="mi">923</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">FROM</span>   <span class="n">DUAL</span><span class="p">;</span>
</code></pre></div>        </div>
        <p><img src="../../assets/images/dualTable.png" alt="dualTable" /><br /><br /></p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="3-날짜함수">3) 날짜함수</h2>
<ul>
  <li>DATE 데이터 유형의 값에 대해 실행된다.</li>
</ul>

<h3 id="1️⃣-sysdate-함수">1️⃣ SYSDATE 함수</h3>
<ul>
  <li>현재 데이터베이스 서버 날짜 및 시간을 반환하는 함수
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">sysdate</span>
<span class="k">FROM</span>   <span class="n">dual</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><br /><br /></p>
  </li>
</ul>

<h3 id="2️⃣-날짜를-사용한-산술-연산">2️⃣ 날짜를 사용한 산술 연산<br /></h3>

<table>
  <thead>
    <tr>
      <th>연산</th>
      <th>결과</th>
      <th>설명</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>날짜 + 숫자</td>
      <td>날짜</td>
      <td>날짜에 일 수를 더한다.</td>
      <td> </td>
    </tr>
    <tr>
      <td>날짜 - 숫자</td>
      <td>날짜</td>
      <td>날짜에서 일 수를 뺀다.</td>
      <td> </td>
    </tr>
    <tr>
      <td>날짜 - 날짜</td>
      <td>일 수</td>
      <td>한 날짜를 다른 날짜에서 뺀다.</td>
      <td> </td>
    </tr>
    <tr>
      <td>날짜 + 숫자 / 24</td>
      <td>날짜</td>
      <td>날짜에 시간 수를 더한다.</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="p">(</span><span class="n">SYSDATE</span> <span class="o">-</span> <span class="n">hire_date</span><span class="p">)</span> <span class="o">/</span> <span class="mi">7</span> <span class="k">AS</span> <span class="n">WEEKS</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">department_id</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
</code></pre></div></div>
<h3 id="3️⃣-날짜-조작-함수">3️⃣ 날짜 조작 함수<br /></h3>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MONTHS_BETWEEN</td>
      <td>두 날짜 간의 월 수</td>
      <td> </td>
    </tr>
    <tr>
      <td>ADD_MONTHS</td>
      <td>날짜에 월 추가</td>
      <td> </td>
    </tr>
    <tr>
      <td>NEXT_DAY</td>
      <td>지정된 날짜의 다음 날</td>
      <td> </td>
    </tr>
    <tr>
      <td>LAST_DAY</td>
      <td>월의 마지막 날</td>
      <td> </td>
    </tr>
    <tr>
      <td>ROUND</td>
      <td>날짜 반올림</td>
      <td> </td>
    </tr>
    <tr>
      <td>TRUNC</td>
      <td>날짜 버림</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MONTHS_BETWEEN(‘01-SEP-95’, ‘11-JAN-94’)</td>
      <td>19.6774194</td>
      <td> </td>
    </tr>
    <tr>
      <td>ADD_MONTHS(‘31-JAN-96’, 1)</td>
      <td>‘29-FEB-96’</td>
      <td> </td>
    </tr>
    <tr>
      <td>NEXT_DAY(‘01-SEP-95’, ‘FRIDAY’)</td>
      <td>‘08-SEP-95’</td>
      <td> </td>
    </tr>
    <tr>
      <td>LAST_DAY(‘01-FEB-95’)</td>
      <td>‘28-FEB-95’</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<h3 id="-round와-trunc의-활용">🔸 ROUND와 TRUNC의 활용<br /></h3>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th>결과</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ROUND(SYSDATE, ‘MONTH’)</td>
      <td>01-AUG-03</td>
      <td> </td>
    </tr>
    <tr>
      <td>ROUND(SYSDATE, ‘YEAR’)</td>
      <td>01-JAN-04</td>
      <td> </td>
    </tr>
    <tr>
      <td>TRUNC(SYSDATE, ‘MONTH’)</td>
      <td>01-JUL-03</td>
      <td> </td>
    </tr>
    <tr>
      <td>TRUNC(SYSDATE, ‘YEAR’)</td>
      <td>01-JAN-03</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<h2 id="4-변환함수">4) 변환함수</h2>
<p><img src="../../assets/images/transferFunc.png" alt="transferFunc" /><br /><br /></p>
<ul>
  <li>값의 데이터유형을 변환한다.
    <h3 id="1️⃣-to_char-함수date-️-char">1️⃣ TO_CHAR 함수(DATE ➡️ CHAR)</h3>
    <h4 id="-문법">🔸 문법</h4>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TO_CHAR</span><span class="p">(</span><span class="nb">date</span><span class="p">,</span> <span class="s1">'format_model'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="-날짜-형식-요소">🔸 날짜 형식 요소</h4>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>결과</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>YYYY</td>
      <td>숫자로 된 전체 연도</td>
      <td> </td>
    </tr>
    <tr>
      <td>YEAR</td>
      <td>영어 철자로 표기된 연도</td>
      <td> </td>
    </tr>
    <tr>
      <td>MM</td>
      <td>월의 2자리 값</td>
      <td> </td>
    </tr>
    <tr>
      <td>MONTH</td>
      <td>전체 월 이름</td>
      <td> </td>
    </tr>
    <tr>
      <td>MON</td>
      <td>월의 3자 약어</td>
      <td> </td>
    </tr>
    <tr>
      <td>DY</td>
      <td>3문자로 된 요일 약어</td>
      <td> </td>
    </tr>
    <tr>
      <td>DAY</td>
      <td>요일의 전체 이름</td>
      <td> </td>
    </tr>
    <tr>
      <td>DD</td>
      <td>숫자 형식의 월간 일</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>시간 요소는 날짜에서 시간 부분의 형식을 지정한다.<br />
HH24:MI:SS AM ➡️ 15:45:32 PM</p>
  </li>
  <li>
    <p>문자열은 큰 따옴표로 묶어 추가한다.<br />
DD “of” MONTH ➡️ 12 of OCTOBER</p>
  </li>
  <li>숫자 접미어는 숫자를 영어 철자로 표기한다.<br />
ddspth ➡️ fourtheenth</li>
  <li>sp라 쓰면 약간 잘라서 약자로 표현함<br /><br /></li>
</ul>

<h3 id="2️⃣-to_char-함수number-️-char">2️⃣ TO_CHAR 함수(NUMBER ➡️ CHAR)</h3>
<h4 id="-문법-1">🔸 문법</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TO_CHAR</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="s1">'format_model'</span><span class="p">)</span>
</code></pre></div></div>
<p><br /><br /></p>
<h4 id="-숫자-형식-요소">🔸 숫자 형식 요소</h4>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>결과</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>9</td>
      <td>숫자를 나타냄(0 ~ 9)</td>
      <td> </td>
    </tr>
    <tr>
      <td>0</td>
      <td>0이 표시되도록 강제 적용(0만 표시됨)</td>
      <td> </td>
    </tr>
    <tr>
      <td>$</td>
      <td>부동 달러 기호 배치</td>
      <td> </td>
    </tr>
    <tr>
      <td>L</td>
      <td>부동 로컬 통화 기호 사용</td>
      <td> </td>
    </tr>
    <tr>
      <td>.</td>
      <td>소수점 출력</td>
      <td> </td>
    </tr>
    <tr>
      <td>,</td>
      <td>천단위 표시자로 쉼표 출력</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">TO_CHAR</span><span class="p">(</span><span class="n">salary</span><span class="p">,</span> <span class="s1">'$99,999.00'</span><span class="p">)</span> <span class="n">SALARY</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">last_name</span> <span class="o">=</span> <span class="s1">'Ernst'</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>TO_CHAR(salary, ‘$99,999.00’) 에서 ‘$99,999.00’를 통해 출력할 수 있는 자리수는 최대 6자리이다.</li>
  <li>만약 자리수를 초과하면 ####으로 출력되고 숫자 자체가 출력되지 않는다. =&gt; 그러니까 자리수를 넉넉히 쓰자<br /><br /></li>
</ul>

<h3 id="3️⃣-to_number-함수char-️-number">3️⃣ TO_NUMBER 함수(CHAR ➡️ NUMBER)</h3>
<h4 id="-문법-2">🔸 문법</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TO_NUMBER</span><span class="p">(</span><span class="nb">char</span><span class="p">[,</span> <span class="s1">'format_model'</span><span class="p">])</span>
</code></pre></div></div>
<ul>
  <li>문자를 숫자로 바꿔주는 함수인데 쓸 일이 거의 없다.</li>
  <li>salary 같은 컬럼을 $3,000이라 저장하면 조회할 때 보기에는 편하지만 필드값을 계산에 사용하려고 하면 $가 없는 숫자로 바꿔줘야 해서 번거롭다.</li>
  <li>그래서 보통 3000 숫자 자체만 저장해놓기 때문에 TO_NUMBER 함수를 쓸 일이 없다.<br /><br /></li>
</ul>

<h3 id="4️⃣-to_date-함수char-️-date">4️⃣ TO_DATE 함수(CHAR ➡️ DATE)</h3>
<h4 id="-문법-3">🔸 문법</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TO_DATE</span><span class="p">(</span><span class="nb">char</span><span class="p">[,</span> <span class="s1">'format_model'</span><span class="p">])</span>
</code></pre></div></div>
<ul>
  <li>내가 원하는대로 날짜값을 출력해주는 함수
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employee_id</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">hire_date</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">hire_date</span> <span class="o">&lt;</span> <span class="n">to_date</span><span class="p">(</span><span class="s1">'2004/08/09'</span><span class="p">,</span> <span class="s1">'YYYY/MM/DD'</span><span class="p">);</span>
</code></pre></div>    </div>
    <p><br /><br /></p>
  </li>
</ul>

<h2 id="5-일반함수">5) 일반함수</h2>
<ul>
  <li>모든 데이터타입에 사용가능하다.<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>함수</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>NVL(expr1, expr2)</td>
      <td> </td>
    </tr>
    <tr>
      <td>NVL2(expr1, expr2, expr3)</td>
      <td> </td>
    </tr>
    <tr>
      <td>NULLIF(expr1, expr2)</td>
      <td> </td>
    </tr>
    <tr>
      <td>COALESCE(expr1, expr2, …, exprn)</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<h3 id="1️⃣-nvl-함수">1️⃣ NVL 함수</h3>
<ul>
  <li>null 값을 실제 값으로 변환</li>
  <li>사용할 수 있는 데이터 유형은 날짜, 문자 및 숫자</li>
  <li>데이터 유형이 일치해야 함
    <ul>
      <li>NVL(commission_pct, 0)</li>
      <li>NVL(hire_date, ‘01-JAN-97’)</li>
      <li>NVL(job_id, ‘No Job Yet’)</li>
    </ul>
  </li>
  <li>산술식에 null이 들어가면 결과값은 null이다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">NVL</span><span class="p">(</span><span class="n">commission_pct</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> 
     <span class="p">(</span><span class="n">salary</span><span class="o">*</span><span class="mi">12</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">salary</span><span class="o">*</span><span class="mi">12</span><span class="o">*</span><span class="n">NVL</span><span class="p">(</span><span class="n">commission_pct</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="n">AN_SAL</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><br /><br /></p>
  </li>
</ul>

<h3 id="2️⃣-nvl2-함수">2️⃣ NVL2 함수</h3>
<ul>
  <li>첫번째 표현식을 검사해서 null이 아니면 두번째 표현식을 반환하고 또 null이면 세번째 반환
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">commission_pct</span><span class="p">,</span> 
     <span class="n">NVL2</span><span class="p">(</span><span class="n">commission_pct</span><span class="p">,</span> <span class="s1">'SAL+COMM'</span><span class="p">,</span> <span class="s1">'SAL'</span><span class="p">)</span> <span class="n">income</span>
<span class="k">FROM</span>   <span class="n">employees</span>
<span class="k">WHERE</span>  <span class="n">department_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">);</span>
</code></pre></div>    </div>
    <p><img src="../../assets/images/nvl2.png" alt="nvl2" /><br /><br /></p>
  </li>
</ul>

<h3 id="3️⃣-nullif-함수">3️⃣ NULLIF 함수</h3>
<ul>
  <li>expr1과 expr2를 비교해서 두 표현식이 같으면 null을 반환하고 두 표현식이 다르면 expr1 반환
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">first_name</span><span class="p">)</span> <span class="nv">"expr1"</span><span class="p">,</span>
     <span class="n">last_name</span><span class="p">,</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">last_name</span><span class="p">)</span> <span class="nv">"expr2"</span><span class="p">,</span>
     <span class="k">NULLIF</span><span class="p">(</span><span class="k">LENGTH</span><span class="p">(</span><span class="n">first_name</span><span class="p">),</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">last_name</span><span class="p">))</span> <span class="k">result</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><img src="../../assets/images/nullif.png" alt="nullif" /><br /><br /></p>
  </li>
</ul>

<h3 id="4️⃣-coalesce-함수">4️⃣ COALESCE 함수</h3>
<ul>
  <li>NVL 함수보다 여러 대체값을 가질 수 있음</li>
  <li>null이 아닌 첫번째 표현식 반환</li>
  <li>파라미터들의 자료형이 모두 같아야 한다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">employee_id</span><span class="p">,</span> 
     <span class="n">COALESCE</span><span class="p">(</span><span class="n">TO_CHAR</span><span class="p">(</span><span class="n">commission_pct</span><span class="p">),</span> <span class="n">TO_CHAR</span><span class="p">(</span><span class="n">manager_id</span><span class="p">),</span> 
     <span class="s1">'No commission and no manager'</span><span class="p">)</span>
<span class="k">FROM</span>   <span class="n">employees</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[1. 함수란?]]></summary></entry><entry><title type="html">깃허브 프로필(Github Profile) 꾸미기</title><link href="http://localhost:4000/story/decorate-github-profile/" rel="alternate" type="text/html" title="깃허브 프로필(Github Profile) 꾸미기" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/story/decorate-github-profile</id><content type="html" xml:base="http://localhost:4000/story/decorate-github-profile/"><![CDATA[<h1 id="-시작">🎬 시작<br /></h1>
<p>드디어 깃헙 블로그를 만들고… 다른 깃헙들을 구경하다 보니까 깃헙 메인 화면 자체를 예쁘게 꾸며놓으신 분들이 많더라고요!<br /><br />
<img src="../../assets/images/githubProfileComplete.png" alt="githubProfileComplete" /><br /><br />
이렇게요!<br /><br />
되게 좋아 보이잖아요?ㅎㅎㅎ 그래서 저도 꾸며보기로 했습니다.<br /><br /></p>

<h1 id="1-new-repository-만들기">1. New Repository 만들기<br /></h1>
<p><img src="../../assets/images/createNewRepo.png" alt="createNewRepo" /><br /><br />
먼저 내 아이디와 같은 이름으로 새로운 레포지토리를 만들어 줍니다.<br />
처음 깃헙 블로그를 만들 때 봤을 때엔 깃헙 프로필 페이지 자체를 꾸밀 수 있다는 것을 몰라서 뭔 소린가 했는데 이런 뜻이었네요…<br /><br /></p>

<p><img src="../../assets/images/addReadme.png" alt="addReadme" /><br /><br />
만들 때엔 add a readme에 꼭 체크해 주세요! readme로 프로필 페이지를 꾸며야 하거든요.<br /><br /></p>

<h1 id="2-readmemd-편집하기">2. README.md 편집하기<br /></h1>
<p><img src="../../assets/images/editReadme01.png" alt="editReadme01" /><br /><br />
새로 만든 레포로 들어오면 아무것도 없어서 휑한 모습을 볼 수 있습니다. 전 까먹고 스샷을 좀 늦게 찍었더니 어느정도 꾸미기를 진행한 상태였네요 😅 <br />
여기서 리드미 파일 상단의 연필 그림을 누르거나 오른쪽에 보이는 초록색 edit readme 버튼을 눌러서 웹상에서 바로 편집을 진행하셔도 되고 로컬로 다운받아서 편집한 다음에 푸시하셔도 됩니다.<br /><br /></p>

<h2 id="-markdown-미리보기">🔸 markdown 미리보기<br /></h2>
<p>혹은 <a href="https://dillinger.io/">https://dillinger.io/</a><br />
<img src="../../assets/images/markdownPreviewService.png" alt="markdownPreviewService" /><br /><br />
라는 사이트가 있는데 여기에서는 마크다운으로 작성하는 파일을 실시간으로 미리볼 수 있는 서비스를 제공하고 있습니다.<br />
보통 마크다운 파일을 편집할 땐 미리보기가 가능하지 않으니까 여러번 커밋과 푸시를 하게 되어서 좀 귀찮은데 이 사이트에서는 실시간으로 확인하면서 작성한 다음에 복붙해서 한 번에 커밋할 수 있어서 꽤 편합니다.<br /><br />
하지만 전 쓸 게 그렇게 많지는 않아서 여기 쓰려다가 안 쓰고 그냥 레포에서 바로 수정했습니다…😅<br /><br /></p>

<h2 id="-배지-만들기">🔸 배지 만들기<br /></h2>
<p><img src="../../assets/images/techStack.png" alt="techStack" /><br /><br />
다른 분들 보니까 이런식으로 c++같은 프로그래밍 언어들을 그냥 텍스트로 쓰지 않고 배지 그림으로 달아 놓으셨더라고요. 저도 좋아보이는 건 다 해보고 싶어서 배지 이미지를 만들어 주는 사이트에서 만들었습니다.<br /><br /></p>

<h3 id="️-배지--httpsshieldsio">▪️ 배지 : <a href="https://shields.io/">https://shields.io/</a></h3>
<h3 id="️-언어-로고--httpssimpleiconsorg">▪️ 언어 로고 : <a href="https://simpleicons.org/">https://simpleicons.org/</a><br /></h3>
<p>위 사이트들에 가면 저런 폼나는 아이콘들을 얻을 수 있습니다.<br /><br /></p>

<p>배지를 만드시려면<br /><br />
<img src="../../assets/images/makeBadge01.png" alt="makeBadge01" /><br /><br />
이런식으로 넣고 싶은 문구를 입력하고 세번째 칸의 화살표를 눌러서 색상을 선택하거나 직접 입력하시고 나서 오른쪽의 Make Badge 버튼을 누르시면 <br /><br />
<img src="../../assets/images/makeBadge02.png" alt="makeBadge02" /><br /><br />
이렇게 배지를 만들어 줍니다. 여기서 주소를 복사하세요.<br /><br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://img.shields.io/badge/-TechBlog-brightgreen"&gt;
</code></pre></div></div>
<p>위 태그를 리드미에 입력하시면 우리가 만든 배지를 불러옵니다. 하지만 이렇게만 작성하면 단순히 그림만 불러오고 이 그림을 눌렀을 때 어디로 이동할지는 정해주지 않았기 때문에 그냥 새 창에서 그림이 호출될 것이어요… <br /><br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="https://miro7923.github.io/"&gt;
&lt;img src="https://img.shields.io/badge/-TechBlog-brightgreen"&gt;
</code></pre></div></div>
<p>그렇기 때문에 이런식으로 a 태그를 이용해 하이퍼링크를 걸어주시면 우리가 만든 배지 그림을 눌렀을 때 나의 블로그로 이동하게 됩니다.<br /><br /></p>

<p>일반화한다면 <br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://img.shields.io/badge/라벨-메세지-색상"&gt;
</code></pre></div></div>
<p>이렇게 작성하시면 됩니다.<br /><br /></p>

<p>만약 이메일 주소도 추가하고 싶으시면 <br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="mailto:miro7923@gmail.com"&gt;
</code></pre></div></div>
<p>mailto를 이용해 메일주소를 적어주세요!<br /><br /></p>

<h2 id="-프로그래밍-언어-로고-만들기">🔸 프로그래밍 언어 로고 만들기<br /></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://img.shields.io/badge/C++-00599C?style=flat-square&amp;logo=C%2B%2B&amp;logoColor=white"/&gt;&lt;/a&gt;&amp;nbsp 
</code></pre></div></div>
<p>프로그래밍 언어 로고는 위와 같이 태그를 입력하면 되는데 이것을 일반화하면<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://img.shields.io/badge/언어-색상?style=flat-square&amp;logo=simpleicons에서 로고 이름&amp;logoColor=white"/&gt;&lt;/a&gt;&amp;nbsp 
</code></pre></div></div>
<p>위와 같은 형태로 만들 수 있습니다.<br /><br />
<img src="../../assets/images/simpleIcons.png" alt="simpleIcons" /><br /><br />
simpleicons 사이트에서 원하는 언어를 검색해서 그 언어의 이름과 색상을 넣어준 다음 simpleicons 사이트에서 표시되어 있는 언어의 이름을 넣어주시면 됩니다. <br /><br /></p>

<p>단, c++을 쓸 때에만 좀 주의하면 되는데 simpleicons 사이트에는 단순히 C++이라 나와있지만 이걸 그대로 쓰면 적용이 안 되고 C%2B%2B라고 적어주어야 적용이 된다고 합니다. %2B가 +에 대응된다고 합니다.<br /><br />
c#은 C Sharp 이라는 이름으로 등록되어 있었습니다.<br /><br /></p>

<p><img src="../../assets/images/editReadme02.png" alt="editReadme02" /><br /><br />
대략 이렇게 태그들을 쓴 다음에 <br /><br /></p>

<p><img src="../../assets/images/editReadme03.png" alt="editReadme03" /><br /><br />
커밋 버튼 눌러서 마무리!<br /><br /></p>

<h1 id="3-최종-완성">3. 최종 완성<br /></h1>
<p><img src="../../assets/images/completeReadme.png" alt="completeReadme" /><br /><br />
짠 👏 커밋 버튼을 눌러서 나오면 이렇게 완성된 리드미를 볼 수 있습니다.<br /><br /></p>

<p><img src="../../assets/images/githubProfileComplete.png" alt="githubProfileComplete" /><br /><br />
그리고 제 깃헙 프로필 메인 페이지를 확인해보면 이렇게 있어보이게 바꼈습니다! 😄 뿌듯~~!!<br /><br />
이렇게 보니까 할 줄 아는거 되게 많네요! ㅎㅎ 더 뿌듯하다…<br /><br /></p>

<p>앞으로 공부 더 열심히 해야겠습니다. 그럼 다음 글에서 만나요! 👋<br /></p>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Story" /><category term="story" /><summary type="html"><![CDATA[🎬 시작 드디어 깃헙 블로그를 만들고… 다른 깃헙들을 구경하다 보니까 깃헙 메인 화면 자체를 예쁘게 꾸며놓으신 분들이 많더라고요! 이렇게요! 되게 좋아 보이잖아요?ㅎㅎㅎ 그래서 저도 꾸며보기로 했습니다.]]></summary></entry></feed>