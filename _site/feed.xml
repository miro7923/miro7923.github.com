<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-10T16:48:35+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">프로젝트) Cafe(웹 사이트) 만들기 4</title><link href="http://localhost:4000/project%20log/cafe-project-04/" rel="alternate" type="text/html" title="프로젝트) Cafe(웹 사이트) 만들기 4" /><published>2022-03-10T00:00:00+09:00</published><updated>2022-03-10T00:00:00+09:00</updated><id>http://localhost:4000/project%20log/cafe-project-04</id><content type="html" xml:base="http://localhost:4000/project%20log/cafe-project-04/"><![CDATA[<h1 id="개발환경">개발환경</h1>
<ul>
  <li>OpenJDK 8</li>
  <li>Eclipse 2021-12</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="시작">시작</h1>
<ul>
  <li>2022.3.4 ~ <br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 중간 과제로 개인 프로젝트를 진행하게 되었다.</li>
  <li>회원가입/로그인/탈퇴 등 기본적인 회원관리 시스템을 가진 웹 사이트를 만드는 것이다. 주어진 기한은 <code class="language-plaintext highlighter-rouge">한 달</code></li>
  <li>나는 <code class="language-plaintext highlighter-rouge">다음 카페</code>를 소규모로 만들어 보기로 했다. 평소 자주 이용하기도 했고 과제의 평가 기준에서 요구하는 기능들을 다 담고 있기도 했기 때문에 이번 기회에 구현해 보면 그동안 배운 것들을 활용하기에 좋을 거 같았다.</li>
  <li>평가 기준에 사이트의 디자인 구현(HTML/CSS 등 프론트엔드)은 포함되지 않기 때문에 본인이 쓰고 싶은 HTML/CSS 템플릿을 구한 뒤 회원 관리 기능을 구현하면 된다.<br /><br /><br /></li>
</ul>

<h1 id="진행상황-1">진행상황 1</h1>
<ul>
  <li>오늘은 저번에 구현한 기본적인 회원가입 틀에서 사용자가 입력한 정보의 유효성을 검사하는 코드를 추가했다.</li>
  <li><code class="language-plaintext highlighter-rouge">Ajax</code>를 이용해 비동기방식으로 사용자가 입력한 아이디의 중복체크를 하려 했는데 학원 선생님이 워낙 짧게 알려주고 수업 시간이 다 끝나버린 데다 나도 웹 개발은 처음이라 당초 예상과 다르게 아이디 유효성 체크를 구현하는 데에 오랜 시간이 소요되었다.</li>
  <li>그래도 숱한 구글링 끝에 아이디 중복체크 부분은 내가 원하는대로 구현이 되었다!</li>
  <li>내가 모티브로 잡고 구현했던 기능은 <code class="language-plaintext highlighter-rouge">네이버 회원가입 페이지의 아이디 중복검사</code> 기능이다.</li>
</ul>

<h2 id="1-회원가입-페이지에-아이디-중복여부를-알려주는-문구-추가">1. 회원가입 페이지에 아이디 중복여부를 알려주는 문구 추가</h2>

<ul>
  <li>join.jsp</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;jsp:include </span><span class="na">page=</span><span class="s">"../inc/top.jsp"</span><span class="nt">&gt;&lt;/jsp:include&gt;</span>
<span class="c">&lt;!-- jQuery 라이브러리 로드 부분은 top.jsp에 있음 --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"${pageContext.request.contextPath}/js/join.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

...
중간 생략

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>아이디 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">id=</span><span class="s">"id"</span> <span class="na">placeholder=</span><span class="s">"5~10자 이내의 영문+숫자만 입력하세요."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"idMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">jQuery</code>를 이용해서 <code class="language-plaintext highlighter-rouge">&lt;div id="idMsg"&gt;&lt;/div&gt;</code> 태그에 중복인지 아닌지 알려주는 메세지를 삽입할 것이다.</li>
</ul>

<h2 id="2-memeberdao에서-db에-아이디-존재여부를-확인하는-함수-작성">2. MemeberDAO에서 DB에 아이디 존재여부를 확인하는 함수 작성</h2>

<ul>
  <li>MemberDAO.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// isExist(id)</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isExist</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span>
<span class="o">{</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : isExist() 호출"</span><span class="o">);</span>
		
	<span class="k">try</span> 
	<span class="o">{</span>
		<span class="c1">// 1. 2. DB 연결</span>
		<span class="n">con</span> <span class="o">=</span> <span class="n">getCon</span><span class="o">();</span>
			
		<span class="c1">// 3. sql 작성 &amp; pstmt 연결</span>
		<span class="n">sql</span> <span class="o">=</span> <span class="s">"select id from cafe_members where id=?"</span><span class="o">;</span>
		<span class="n">pstmt</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
		<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
			
		<span class="c1">// 4. sql 실행</span>
		<span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
			
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : 아이디 정보 조회 완료"</span><span class="o">);</span>
			
		<span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span> 
	<span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> 
	<span class="o">{</span>
		<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="k">finally</span> 
	<span class="o">{</span>
		<span class="nc">CloseDB</span><span class="o">();</span>
	<span class="o">}</span>
		
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : isExist(id) 끝!!!"</span><span class="o">);</span>
		
	<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">// isExist(id)</span>
</code></pre></div></div>

<ul>
  <li>매개변수로 받은 아이디를 이용해 DB에서 조회한 후 해당 아이디가 존재한다면 <code class="language-plaintext highlighter-rouge">true</code>를, 존재하지 않으면 <code class="language-plaintext highlighter-rouge">false</code>를 리턴하도록 했다.</li>
  <li>매개변수로 받은 아이디가 존재하지 않을 때에만(<code class="language-plaintext highlighter-rouge">return false</code>) 모든 정보를 입력했을 때에 회원가입 프로세스가 진행되도록 할 것이기 때문에 기본 리턴값은 <code class="language-plaintext highlighter-rouge">true</code>로 설정했다.</li>
</ul>

<h2 id="3-서블릿-만들어서-중복체크-확인하는-동작-수행">3. 서블릿 만들어서 중복체크 확인하는 동작 수행</h2>
<ul>
  <li>IdCheck.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">"/idCheck.me"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IdCheck</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span>
<span class="o">{</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doProcess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="n">req</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
		<span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html; charset=utf-8"</span><span class="o">);</span>
		
		<span class="nc">MemberDAO</span> <span class="n">dao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDAO</span><span class="o">();</span>
		<span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
		<span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="n">dao</span><span class="o">.</span><span class="na">isExist</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"false"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">else</span> 
		<span class="o">{</span>
			<span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"true"</span><span class="o">);</span>
		<span class="o">}</span>
        
		<span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="n">doProcess</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="n">doProcess</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>처음엔 <code class="language-plaintext highlighter-rouge">jsp</code> 페이지를 만들어서 아주 간단하게 만들었는데 생각보다 잘 안 되서 구글링 후 서블릿으로 만들었다.</li>
  <li><code class="language-plaintext highlighter-rouge">PrintWriter</code>를 이용해 출력 스트림을 만들어 DB 검색 결과를 보내도록 했다. 검색 결과가 있다면 중복되는 아이디가 있어서 사용할 수 없는 아이디니까 <code class="language-plaintext highlighter-rouge">false</code>, 없다면 중복되는 아이디가 없어서 사용 가능한 아이디니까 <code class="language-plaintext highlighter-rouge">true</code></li>
  <li>이 부분을 구현하면서 출력 스트림에 대해 다시 공부하게 되어서 좋았다! 역시 그냥 배우는 것 보다는 직접 써 봐야 머리에 잘 들어온다.</li>
</ul>

<h2 id="4-jquery로-아이디-중복체크-하는-함수-구현">4. jQuery로 아이디 중복체크 하는 함수 구현</h2>
<ul>
  <li>join.js</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="kd">var</span> <span class="nx">$idCheck</span> <span class="o">=</span> <span class="nx">idCheck</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nx">idCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">idCheck() 호출</span><span class="dl">"</span><span class="p">);</span>
	
	<span class="kd">var</span> <span class="nx">ret</span><span class="p">;</span>
	
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
		<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
			<span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">async</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
			<span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./idCheck.me</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">data</span><span class="p">:</span> <span class="p">{</span>
				<span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
			<span class="p">},</span>
			<span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
					<span class="k">if</span> <span class="p">(</span><span class="mi">5</span> <span class="o">&gt;</span> <span class="nx">userId</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="nx">userId</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="nx">$id</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">5자리 이상 10자리 이하로 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
					<span class="p">}</span>
					<span class="k">else</span> 
					<span class="p">{</span>
						<span class="nx">ret</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">사용할 수 있는 아이디입니다.</span><span class="dl">'</span><span class="p">);</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>
				<span class="k">else</span> 
				<span class="p">{</span>
					<span class="nx">ret</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
					<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">이미 존재하는 아이디입니다.</span><span class="dl">'</span><span class="p">);</span>
					<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">},</span>
			<span class="na">error</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">});</span>
	<span class="p">});</span>
	
	<span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">IdCheck</code>에서 출력 스트림으로 받은 결과값을 이용해 아이디 입력란 하단에 출력할 메세지를 결정하는데 리턴값이 <code class="language-plaintext highlighter-rouge">false</code>라면 사용불가 메세지를 바로 출력하면 되지만 <code class="language-plaintext highlighter-rouge">true</code>인 경우에 사용가능 메세지를 바로 출력하니까 아이디를 입력하지 않고 입력란 바깥을 클릭했을 때에도 사용가능한 아이디라는 메세지가 출력되었다. 아이디를 입력하지 않았을 때에도 DB에서 검색되지 않을 테니까 최종적으로 사용이 가능하다는 파라미터가 리턴될 것이다.</li>
  <li>그래서 리턴값이 <code class="language-plaintext highlighter-rouge">true</code>인 경우에는 아이디 입력란에 입력되어 있는 문자열의 길이를 검사한 후 그에 따라 분기를 나누었다.</li>
  <li>여기까지 해서 <code class="language-plaintext highlighter-rouge">네이버 회원가입 페이지</code>의 아이디 중복검사 기능과 같게 구현했다! 뿌듯뿌듯 ☺️</li>
</ul>
<p align="center"><img src="../../assets/images/existId.png" width="400" /></p>
<p align="center"><img src="../../assets/images/nonExistId.png" width="400" /></p>
<p align="center"><img src="../../assets/images/tooLong.png" width="400" /></p>
<p align="center"><img src="../../assets/images/tooShort.png" width="400" /></p>
<p><br /><br /></p>

<h1 id="진행상황-2">진행상황 2</h1>

<p align="center"><img src="../../assets/images/inputPhone.png" width="400" /></p>

<ul>
  <li>휴대폰 번호 입력받는 부분을 세 칸으로 나누었기 때문에 각 필드마다 정해진 자리수만큼 입력하면 다음 칸으로 자동으로 커서가 넘어가도록 하는 부분을 구현했다.</li>
</ul>

<h2 id="1-사용자에게서-휴대폰-번호-입력받는-부분-수정">1. 사용자에게서 휴대폰 번호 입력받는 부분 수정</h2>
<ul>
  <li>join.jsp</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_TelField"</span><span class="nt">&gt;</span>휴대폰 번호 <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"phone"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone1"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone1"</span> <span class="na">size=</span><span class="s">"1"</span> <span class="na">maxlength=</span><span class="s">"3"</span> <span class="na">oninput=</span><span class="s">"tabCursor(1)"</span><span class="nt">&gt;</span> - 
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone2"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone2"</span> <span class="na">size=</span><span class="s">"3"</span> <span class="na">maxlength=</span><span class="s">"4"</span> <span class="na">oninput=</span><span class="s">"tabCursor(2)"</span><span class="nt">&gt;</span> - 
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone3"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone3"</span> <span class="na">size=</span><span class="s">"3"</span> <span class="na">maxlength=</span><span class="s">"4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h2 id="2-javascript로-커서-이동하는-함수-구현">2. javascript로 커서 이동하는 함수 구현</h2>
<ul>
  <li>join.js</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 휴대폰 번호 필드 1, 2번 칸에서 지정된 숫자만큼 입력하면 다음 칸으로 커서 넘기는 함수</span>
<span class="kd">function</span> <span class="nx">tabCursor</span><span class="p">(</span><span class="nx">_section</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kd">var</span> <span class="nx">ph</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">switch</span> <span class="p">(</span><span class="nx">_section</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
			<span class="nx">ph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">join</span><span class="p">.</span><span class="nx">phone1</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="mi">3</span> <span class="o">===</span> <span class="nx">ph</span><span class="p">)</span>
				<span class="nx">join</span><span class="p">.</span><span class="nx">phone2</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
			<span class="k">break</span><span class="p">;</span>
		
		<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
			<span class="nx">ph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">join</span><span class="p">.</span><span class="nx">phone2</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">===</span> <span class="nx">ph</span><span class="p">)</span>
				<span class="nx">join</span><span class="p">.</span><span class="nx">phone3</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
			<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span> 
</code></pre></div></div>

<ul>
  <li>처음에 내 뜻대로 구현되지 않을 때에는 머리를 많이 쥐어뜯었지만 구현을 완료하고 나니까 참 뿌듯하다 😄<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-26</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Project Log" /><category term="Project" /><category term="Cafe" /><category term="Log" /><summary type="html"><![CDATA[개발환경 OpenJDK 8 Eclipse 2021-12 tomcat 8.5]]></summary></entry><entry><title type="html">프로젝트) Cafe(웹 사이트) 만들기 5 - 회원가입 유효성 검사 구현 완료</title><link href="http://localhost:4000/project%20log/cafe-project-05/" rel="alternate" type="text/html" title="프로젝트) Cafe(웹 사이트) 만들기 5 - 회원가입 유효성 검사 구현 완료" /><published>2022-03-10T00:00:00+09:00</published><updated>2022-03-10T00:00:00+09:00</updated><id>http://localhost:4000/project%20log/cafe-project-05</id><content type="html" xml:base="http://localhost:4000/project%20log/cafe-project-05/"><![CDATA[<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Eclipse 2021-12</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="시작">시작</h1>
<ul>
  <li>2022.3.4 ~ <br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 중간 과제로 개인 프로젝트를 진행하게 되었다.</li>
  <li>회원가입/로그인/탈퇴 등 기본적인 회원관리 시스템을 가진 웹 사이트를 만드는 것이다. 주어진 기한은 <code class="language-plaintext highlighter-rouge">한 달</code></li>
  <li>나는 <code class="language-plaintext highlighter-rouge">다음 카페</code>를 소규모로 만들어 보기로 했다. 평소 자주 이용하기도 했고 과제의 평가 기준에서 요구하는 기능들을 다 담고 있기도 했기 때문에 이번 기회에 구현해 보면 그동안 배운 것들을 활용하기에 좋을 거 같았다.</li>
  <li>평가 기준에 사이트의 디자인 구현(HTML/CSS 등 프론트엔드)은 포함되지 않기 때문에 본인이 쓰고 싶은 HTML/CSS 템플릿을 구한 뒤 회원 관리 기능을 구현하면 된다.<br /><br /><br /></li>
</ul>

<h1 id="진행상황-1">진행상황 1</h1>
<ul>
  <li>어제 회원가입 페이지에서 사용자가 입력한 아이디의 유효성을 검증하는 부분까지 구현했다.</li>
  <li>그리고 오늘 회원가입 시 사용자가 입력한 정보가 유효한지 검증하는 로직을 모두 구현했다!</li>
</ul>

<h2 id="1-joinjsp">1. join.jsp</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h3&gt;</span>회원가입<span class="nt">&lt;/h3&gt;&lt;br&gt;</span>
<span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">"join"</span> <span class="na">action=</span><span class="s">"./MemberJoinAction.me"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">onsubmit=</span><span class="s">"return finalCheck();"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>아이디 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">id=</span><span class="s">"id"</span> <span class="na">placeholder=</span><span class="s">"5~10자 이내의 영문+숫자 조합"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"idMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>비밀번호 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"pass"</span> <span class="na">id=</span><span class="s">"pass"</span> <span class="na">placeholder=</span><span class="s">"8~20자 영문+숫자+특수문자 조합"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"passMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>비밀번호 확인 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"confirm"</span> <span class="na">id=</span><span class="s">"confirm"</span> <span class="na">placeholder=</span><span class="s">"비밀번호를 다시 입력하세요."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"confirmMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>이름 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">id=</span><span class="s">"MOD_TEXTFORM_NameField"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">class=</span><span class="s">"name"</span> <span class="na">placeholder=</span><span class="s">"이름을 입력하세요."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"nameMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>생년월일 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">id=</span><span class="s">"MOD_TEXTFORM_NameField"</span> <span class="na">type=</span><span class="s">"date"</span> <span class="na">name=</span><span class="s">"birth"</span> <span class="na">class=</span><span class="s">"birth"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"birthMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>성별 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">class=</span><span class="s">"radio"</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">name=</span><span class="s">"gender"</span> <span class="na">id=</span><span class="s">"gender"</span> <span class="na">value=</span><span class="s">"남"</span><span class="nt">&gt;&lt;label</span> <span class="na">class=</span><span class="s">"radioText"</span><span class="nt">&gt;</span>남<span class="nt">&lt;/label&gt;</span> 
    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"radio"</span> <span class="na">id=</span><span class="s">"gender"</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">name=</span><span class="s">"gender"</span> <span class="na">value=</span><span class="s">"여"</span><span class="nt">&gt;&lt;label</span> <span class="na">class=</span><span class="s">"radioText"</span><span class="nt">&gt;</span>여<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"genderMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>도시 <span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">"city"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">selected</span> <span class="na">disabled</span><span class="nt">&gt;</span>도시를 선택하세요.<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option&gt;</span>서울<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option&gt;</span>부산<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option&gt;</span>대전<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"cityMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_TelField"</span><span class="nt">&gt;</span>휴대폰 번호 <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"phone"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone1"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone1"</span> <span class="na">size=</span><span class="s">"1"</span> <span class="na">maxlength=</span><span class="s">"3"</span> <span class="na">oninput=</span><span class="s">"tabCursor(1)"</span><span class="nt">&gt;</span> - 
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone2"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone2"</span> <span class="na">size=</span><span class="s">"3"</span> <span class="na">maxlength=</span><span class="s">"4"</span> <span class="na">oninput=</span><span class="s">"tabCursor(2)"</span><span class="nt">&gt;</span> - 
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"phone3"</span> <span class="na">type=</span><span class="s">"tel"</span> <span class="na">name=</span><span class="s">"phone3"</span> <span class="na">size=</span><span class="s">"3"</span> <span class="na">maxlength=</span><span class="s">"4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"phoneMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_EmailField"</span><span class="nt">&gt;</span>이메일 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">name=</span><span class="s">"email"</span> <span class="na">id=</span><span class="s">"email"</span> <span class="na">placeholder=</span><span class="s">"abc123@gmail.com"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"emailMsg"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn"</span><span class="nt">&gt;</span>Send form<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">html</code> 부분은 무료 템플릿 사이트에 있는 것을 다운받아서 사용한 것이고 입력 정보 유효성 검사를 위해 각 필드별로 <code class="language-plaintext highlighter-rouge">id</code>와 <code class="language-plaintext highlighter-rouge">class</code>만 추가했다.</li>
  <li>거주지를 입력하는 부분은 약식으로 도시 3개만 넣었다.</li>
  <li><code class="language-plaintext highlighter-rouge">form</code> 태그를 최종 <code class="language-plaintext highlighter-rouge">submit</code> 하기 전에 <code class="language-plaintext highlighter-rouge">finalCheck()</code> 함수를 호출해 입력한 정보들의 유효성 검사를 완료한 후에 결과에 따라 페이지를 이동하도록 했다.</li>
</ul>

<h2 id="2-joinjs">2. join.js</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">$id</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$pass</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$passConfirm</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$name</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$gender</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$city</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$phone</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">$email</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
 
<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">idCheck</span><span class="p">();</span>
	<span class="nx">passCheck</span><span class="p">();</span>
	<span class="nx">passConfirm</span><span class="p">();</span>
	<span class="nx">nameCheck</span><span class="p">();</span>
	<span class="nx">birthCheck</span><span class="p">();</span>
	<span class="nx">emailCheck</span><span class="p">();</span>
<span class="p">});</span>

<span class="c1">// 휴대폰 번호 필드 1, 2번 칸에서 지정된 숫자만큼 입력하면 다음 칸으로 커서 넘기는 함수</span>
<span class="kd">function</span> <span class="nx">tabCursor</span><span class="p">(</span><span class="nx">section</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kd">var</span> <span class="nx">ph</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">switch</span> <span class="p">(</span><span class="nx">section</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
			<span class="nx">ph</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone1</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
			<span class="k">if</span> <span class="p">(</span><span class="mi">3</span> <span class="o">===</span> <span class="nx">ph</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
				<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone2</span><span class="dl">"</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
			<span class="k">break</span><span class="p">;</span>
		
		<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
			<span class="nx">ph</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone2</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
			<span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">===</span> <span class="nx">ph</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
				<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone3</span><span class="dl">"</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
			<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span> 

<span class="kd">function</span> <span class="nx">idCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
			<span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">async</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
			<span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./idCheck.me</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">data</span><span class="p">:</span> <span class="p">{</span>
				<span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
			<span class="p">},</span>
			<span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text</span><span class="dl">'</span><span class="p">,</span>
			<span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
					<span class="k">if</span> <span class="p">(</span><span class="mi">5</span> <span class="o">&gt;</span> <span class="nx">userId</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="nx">userId</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="nx">$id</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">5자리 이상 10자리 이하로 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
					<span class="p">}</span>
					<span class="k">else</span> 
					<span class="p">{</span>
						<span class="nx">$id</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">사용할 수 있는 아이디입니다.</span><span class="dl">'</span><span class="p">);</span>
						<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>
				<span class="k">else</span> 
				<span class="p">{</span>
					<span class="nx">$id</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
					<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">이미 존재하는 아이디입니다.</span><span class="dl">'</span><span class="p">);</span>
					<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#idMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">},</span>
			<span class="na">error</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">});</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 비밀번호 유효성 검사하는 함수</span>
<span class="kd">function</span> <span class="nx">passCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#pass</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#pass</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
		<span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">0-9</span><span class="se">]</span><span class="sr">/g</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">eng</span> <span class="o">=</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">a-z</span><span class="se">]</span><span class="sr">/ig</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">spe</span> <span class="o">=</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">`~!@@#$%^&amp;*|₩₩₩'₩";:₩</span><span class="se">/</span><span class="sr">?</span><span class="se">]</span><span class="sr">/gi</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="mi">20</span> <span class="o">&lt;</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$pass</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">8자 ~ 20자 이내로 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">pass</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/</span><span class="se">\s</span><span class="sr">/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$pass</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">공백 없이 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">eng</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">spe</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$pass</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">영문, 숫자, 특수문자를 포함해서 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> 
		<span class="p">{</span>
			<span class="nx">$pass</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">사용 가능한 비밀번호 입니다!</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#passMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 재입력한 비밀번호가 맞는지 확인하는 함수</span>
<span class="kd">function</span> <span class="nx">passConfirm</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirm</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> 
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirm</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>

		<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&gt;=</span> <span class="nx">pass</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$passConfirm</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">비밀번호를 한 번 더 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#pass</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">!==</span> <span class="nx">pass</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$passConfirm</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">비밀번호가 일치하지 않습니다.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="nx">$passConfirm</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">비밀번호가 일치합니다!</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#confirmMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 이름 입력 여부 확인하는 함수</span>
<span class="kd">function</span> <span class="nx">nameCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.name</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.name</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>

		<span class="k">if</span> <span class="p">(</span><span class="dl">""</span> <span class="o">===</span> <span class="nx">name</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nx">$name</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#nameMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">이름을 입력해 주세요.</span><span class="dl">'</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#nameMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> 
		<span class="p">{</span>
			<span class="nx">$name</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#nameMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 생년월일 유효성 검사하는 함수</span>
<span class="kd">function</span> <span class="nx">birthCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="c1">// input 태그에서 date type으로 입력받아서 태그단에서 미리 유효한 날짜만 선택할 수 있게 하지만 첫 프로젝트라 연습 삼아 구현했다.</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.birth</span><span class="dl">'</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">birth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.birth</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
		
		<span class="kd">var</span> <span class="nx">birthArr</span> <span class="o">=</span> <span class="nx">birth</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="nx">birthArr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
		<span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">birthArr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
		<span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">birthArr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
		<span class="kd">var</span> <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
		<span class="kd">var</span> <span class="nx">curYear</span> <span class="o">=</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">();</span>

		<span class="k">if</span> <span class="p">(</span><span class="mi">10</span> <span class="o">&gt;=</span> <span class="nx">birth</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="mi">1900</span> <span class="o">&gt;</span> <span class="nx">year</span> <span class="o">||</span> <span class="nx">curYear</span> <span class="o">&lt;</span> <span class="nx">year</span><span class="p">)</span> 
				<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="nx">month</span> <span class="o">||</span> <span class="mi">12</span> <span class="o">&lt;</span> <span class="nx">month</span><span class="p">)</span> 
				<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="nx">day</span> <span class="o">||</span> <span class="mi">31</span> <span class="o">&lt;</span> <span class="nx">day</span><span class="p">)</span> 
				<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="mi">31</span> <span class="o">==</span> <span class="nx">day</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mi">4</span> <span class="o">==</span> <span class="nx">month</span> <span class="o">||</span> <span class="mi">6</span> <span class="o">==</span> <span class="nx">month</span> <span class="o">||</span> <span class="mi">9</span> <span class="o">==</span> <span class="nx">month</span> <span class="o">||</span> <span class="mi">11</span> <span class="o">==</span> <span class="nx">month</span><span class="p">))</span>
				<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="mi">2</span> <span class="o">==</span> <span class="nx">month</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="c1">// 2월엔 윤년 여부 검사</span>
				<span class="kd">var</span> <span class="nx">leapYear</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">||</span> <span class="mi">0</span> <span class="o">==</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">400</span><span class="p">));</span>
				<span class="k">if</span> <span class="p">(</span><span class="mi">29</span> <span class="o">&lt;</span> <span class="nx">day</span> <span class="o">||</span> <span class="p">(</span><span class="mi">29</span> <span class="o">==</span> <span class="nx">day</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">leapYear</span><span class="p">))</span>
					<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
				<span class="k">else</span> 
					<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">else</span> 
				<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> 
			<span class="nx">$birth</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 성별 선택 여부 확인하는 함수</span>
<span class="kd">function</span> <span class="nx">genderCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name=gender]</span><span class="dl">'</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="dl">"</span><span class="s2">:checked</span><span class="dl">"</span><span class="p">))</span>
	<span class="p">{</span>
		<span class="nx">$gender</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#genderMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
	<span class="p">}</span>	
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="nx">$gender</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#genderMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">성별을 선택하세요!</span><span class="dl">'</span><span class="p">);</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#genderMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>	
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 도시 선택 여부 확인하는 함수</span>
<span class="kd">function</span> <span class="nx">cityCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">==</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">[name=city] &gt; option:selected</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="nx">$city</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cityMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">거주 중인 도시를 선택하세요!</span><span class="dl">"</span><span class="p">);</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#cityMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
	<span class="p">}</span>	
	<span class="k">else</span> 
	<span class="p">{</span>
		<span class="nx">$city</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#cityMsg</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 휴대폰 번호 유효성 검사하는 함수</span>
<span class="kd">function</span> <span class="nx">phoneCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone1</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">second</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone2</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">third</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phone3</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">010</span><span class="dl">"</span> <span class="o">==</span> <span class="nx">first</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span> <span class="o">==</span> <span class="nx">second</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span> <span class="o">==</span> <span class="nx">third</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">$phone</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phoneMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
	<span class="p">}</span>	
	<span class="k">else</span> 
	<span class="p">{</span>
		<span class="nx">$phone</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phoneMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">휴대폰 번호 형식이 올바르지 않습니다!</span><span class="dl">"</span><span class="p">);</span>
		<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#phoneMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 이메일 유효성 검사하는 함수</span>
<span class="kd">function</span> <span class="nx">emailCheck</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#email</span><span class="dl">"</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#email</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
		<span class="kd">var</span> <span class="nx">regEmail</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">([</span><span class="sr">0-9a-zA-Z_</span><span class="se">\.</span><span class="sr">-</span><span class="se">]</span><span class="sr">+</span><span class="se">)</span><span class="sr">@</span><span class="se">([</span><span class="sr">0-9a-zA-Z_-</span><span class="se">]</span><span class="sr">+</span><span class="se">)(\.[</span><span class="sr">0-9a-zA-Z_-</span><span class="se">]</span><span class="sr">+</span><span class="se">){1,2}</span><span class="sr">$/</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">regEmail</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">email</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="nx">$email</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#emailMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> 
		<span class="p">{</span>
			<span class="nx">$email</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#emailMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">이메일 형식이 올바르지 않습니다!</span><span class="dl">"</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#emailMsg</span><span class="dl">"</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 마지막 제출 전에 유효성 검사하는 함수</span>
<span class="kd">function</span> <span class="nx">finalCheck</span><span class="p">()</span> 
<span class="p">{</span>
	<span class="kd">var</span> <span class="nx">join</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">join</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$id</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>
		
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$pass</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">pass</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$passConfirm</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">confirm</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$name</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$birth</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">birth</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="nx">genderCheck</span><span class="p">();</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$gender</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>

	<span class="nx">cityCheck</span><span class="p">();</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$city</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	
	<span class="nx">phoneCheck</span><span class="p">();</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$phone</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">phone1</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$email</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nx">join</span><span class="p">.</span><span class="nx">email</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>입력 데이터 중 생년월일은 <code class="language-plaintext highlighter-rouge">input</code> 태그에서 <code class="language-plaintext highlighter-rouge">type="date"</code>로 지정해서 입력 단계에서 유효성 검사가 이루어지긴 하는데 웹 개발 프로젝트는 처음 진행하는 것이라 연습 삼아 <code class="language-plaintext highlighter-rouge">String</code>형으로만 입력을 받았을 때에 유효성 검사를 확인하는 코드도 작성해 보았다. 사실상 필요 없는 부분이라 최종 빌드 때엔 삭제할 예정이다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-25</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Project Log" /><category term="Project" /><category term="Cafe" /><category term="Log" /><summary type="html"><![CDATA[개발환경 MacBook Air (M1, 2020) OpenJDK 8 Eclipse 2021-12 tomcat 8.5]]></summary></entry><entry><title type="html">컴퓨터구조) Function과 매크로 함수의 차이점</title><link href="http://localhost:4000/computer%20science/function/" rel="alternate" type="text/html" title="컴퓨터구조) Function과 매크로 함수의 차이점" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/computer%20science/function</id><content type="html" xml:base="http://localhost:4000/computer%20science/function/"><![CDATA[<h1 id="function">Function</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">function call</code>이 이뤄짐에 따라 중간에 생기는 연산값을 저장하고 불러오는 과정이 필요하며 <code class="language-plaintext highlighter-rouge">return</code>값에 따라 <code class="language-plaintext highlighter-rouge">Jump &amp; Link</code>가 이뤄져야 하고 그에 따라 스택 프레임 포인터도 변경해줘야 하는 등 할 게 많다.</li>
  <li><code class="language-plaintext highlighter-rouge">function call</code>과 <code class="language-plaintext highlighter-rouge">return</code> 없이 순차적으로 실행하는 코드에 비해 수행해야 할 명령어의 수가 많아지기 때문에 오버헤드가 커지고 성능이 떨어진다.</li>
</ul>

<h1 id="매크로-함수">매크로 함수</h1>
<ul>
  <li>함수를 매크로로 작성하면 실행 될 때 <code class="language-plaintext highlighter-rouge">Text</code> 영역에 위치하게 된다. 즉 형태는 <code class="language-plaintext highlighter-rouge">function call</code>을 하는 것 같지만 프로그램 코드로 인식되어 <code class="language-plaintext highlighter-rouge">Text</code> 영역에 있기 때문에 <code class="language-plaintext highlighter-rouge">Jump &amp; Link</code>가 발생하지 않아 오버헤드가 적고 성능이 올라간다.</li>
  <li>하지만 그만큼 <code class="language-plaintext highlighter-rouge">Text</code>가 길어져서 그만큼 차지하는 공간이 늘어나게 된다.<br /></li>
</ul>

<p>👀 두 방식에 각각 장단점이 있기 때문에 상황에 맞게 사용하면 된다.</p>

<h2 id="오버헤드">오버헤드</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">부담</code>이라 할 수 있다.</li>
  <li>추가적으로 해야 하는 일이기 때문에 컴퓨터가 어떤 작업을 수행할 때 오버헤드가 크다는 것은 그 작업을 수행하기 위해 필요한 명령어의 수가 많아지기 때문이라고 할 수 있다.<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/cview.do?cid=26adea597863b523">컴퓨터구조 - 고려대학교 KOCW 공개강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Computer Science" /><category term="CS" /><category term="function" /><summary type="html"><![CDATA[Function function call이 이뤄짐에 따라 중간에 생기는 연산값을 저장하고 불러오는 과정이 필요하며 return값에 따라 Jump &amp; Link가 이뤄져야 하고 그에 따라 스택 프레임 포인터도 변경해줘야 하는 등 할 게 많다. function call과 return 없이 순차적으로 실행하는 코드에 비해 수행해야 할 명령어의 수가 많아지기 때문에 오버헤드가 커지고 성능이 떨어진다.]]></summary></entry><entry><title type="html">C++) BOJ 2579. 계단 오르기</title><link href="http://localhost:4000/boj/boj1525-cpp/" rel="alternate" type="text/html" title="C++) BOJ 2579. 계단 오르기" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj1525-cpp</id><content type="html" xml:base="http://localhost:4000/boj/boj1525-cpp/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/2579">https://www.acmicpc.net/problem/2579</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 1 초</li>
  <li>메모리 제한 : 128 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>계단 오르는 데는 다음과 같은 규칙이 있다.</p>
  </li>
  <li>계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.</li>
  <li>연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.</li>
  <li>마지막 도착 계단은 반드시 밟아야 한다.</li>
  <li>
    <p>따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.</p>
  </li>
  <li>각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.<br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>
    <p>입력의 첫째 줄에 계단의 개수가 주어진다.</p>
  </li>
  <li>
    <p>둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.<br /><br /></p>
  </li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>
    <p>참고 풀이 : <a href="https://yabmoons.tistory.com/510">https://yabmoons.tistory.com/510</a><br /></p>
  </li>
  <li>dp로 어떻게 풀어야 할 지 대충은 알겠는데 구체적인 풀이가 안 떠올라서 구글링했다.</li>
  <li>처음에는 1번 계단과 2번 계단부터 시작하는 경우를 나눈 규칙에 따라 다음 계단을 올라가며 최대값을 구하는데 마지막 계단을 밟지 못하는 경우가 생길수도 있으니까 규칙에 따라 왔을 때 마지막 계단에 도착하지 못하면 다시 되돌아가서 다른 경우를 탐색하는 방식으로 하려 했었다.</li>
  <li>
    <p>그래서 재귀로 짜려고 했는데 되돌아가서 다시 탐색해야 하는 경우에 대한 조건 설정하는 것이 너무 애매해서 할 수 없었다 ㅠㅠ 그래서 구글링…<br /></p>
  </li>
  <li>
    <p>문제 풀이의 키포인트는 <code class="language-plaintext highlighter-rouge">i번째 계단</code>을 밟았을 때 얻을 수 있는 최대값을 구해서 dp 배열에 저장하는 것인데<br /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">1번</code> 계단에 왔을 때의 최대값은 <code class="language-plaintext highlighter-rouge">1번</code> 계단의 값이다.<br /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">2번</code> 계단에 왔을 때의 최대값은 <code class="language-plaintext highlighter-rouge">1번+2번</code> 계단의 값이 될 것이다.<br /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">3번</code> 계단에 왔을 때의 최대값은 <code class="language-plaintext highlighter-rouge">1번+3번</code> 계단 or <code class="language-plaintext highlighter-rouge">2번+3번</code> 계단의 값만 가능하다.<br /></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">4번</code> 계단에 왔을 때의 최대값은 <code class="language-plaintext highlighter-rouge">1번+3번+4번</code> 계단 or <code class="language-plaintext highlighter-rouge">2번+4번</code> 계단 or <code class="language-plaintext highlighter-rouge">1번+2번+4번</code> 계단의 값이 가능하다.</li>
  <li>여기서 2, 3번째 경우를 보면 둘 다 2번 계단을 밟고 4번까지 오는데 두 경우 중 <code class="language-plaintext highlighter-rouge">1+2+4번</code> 경우가 항상 더 큰 값이 나올 것이다.</li>
  <li>그래서 <code class="language-plaintext highlighter-rouge">4번</code> 계단에 왔을 때엔 <code class="language-plaintext highlighter-rouge">1번+3번+4번</code> 계단 or <code class="language-plaintext highlighter-rouge">1번+2번+4번</code> 계단의 값 중 하나가 최대값이 될 것이다.</li>
  <li>이걸 바꿔 표현하면 <code class="language-plaintext highlighter-rouge">1번까지 왔을 때의 최대값 + 3번 + 4번</code> or <code class="language-plaintext highlighter-rouge">2번까지 왔을 때의 최대값 + 4번</code>이 된다.</li>
  <li>여기서 4에 i를 대입하면 <code class="language-plaintext highlighter-rouge">i번째 계단</code> = <code class="language-plaintext highlighter-rouge">i-3까지 왔을 때의 최대값 + i-1번째 계단 + i번째 계단</code> or <code class="language-plaintext highlighter-rouge">i-2까지 왔을 때의 최대값 + i번째</code> 계단이 된다.</li>
  <li>dp 배열에 대입하면 <code class="language-plaintext highlighter-rouge">dp[i]는 i번째 계단에 왔을 때의 최대값</code>이라고 정의하면</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dp[i] = max(dp[i-3] + stair[i-1] + stair[i], dp[i-2] + stair[i])</code><br /></p>
  </li>
  <li>dp 배열의 마지막 계단 인덱스값을 출력하면 정답이 된다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 0 ms</li>
  <li>메모리 : 2020 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/b85c3cb316ef7b853fb1e0b73248b886.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No2579" /><category term="DP" /><category term="C++" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/2579 제한 시간 제한 : 1 초 메모리 제한 : 128 MB]]></summary></entry><entry><title type="html">OS) Deadlock</title><link href="http://localhost:4000/operating%20system/OS-07-Deadlock/" rel="alternate" type="text/html" title="OS) Deadlock" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/OS-07-Deadlock</id><content type="html" xml:base="http://localhost:4000/operating%20system/OS-07-Deadlock/"><![CDATA[<h1 id="-deadlock교착상태란">👀 Deadlock(교착상태)란?</h1>
<ul>
  <li>일련의 프로세스들이 서로가 가진 자원을 기다리며 <code class="language-plaintext highlighter-rouge">block</code>된 상태</li>
</ul>

<h2 id="resource자원">Resource(자원)</h2>
<ul>
  <li>하드웨어, 소프트웨어 등을 포함하는 개념</li>
  <li>예) <code class="language-plaintext highlighter-rouge">I/O device</code>, <code class="language-plaintext highlighter-rouge">CPU cycle</code>, <code class="language-plaintext highlighter-rouge">memory space</code>, <code class="language-plaintext highlighter-rouge">semaphore</code> 등</li>
  <li>프로세스가 자원을 사용하는 절차
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Request</code> -&gt; <code class="language-plaintext highlighter-rouge">Allocate</code> -&gt; <code class="language-plaintext highlighter-rouge">Use</code> -&gt; <code class="language-plaintext highlighter-rouge">Release</code></li>
    </ul>
  </li>
</ul>

<h2 id="데드락이-발생하는-예">데드락이 발생하는 예</h2>
<ul>
  <li>시스템에 2개의 <code class="language-plaintext highlighter-rouge">tape drive</code>가 있고 프로세스 <code class="language-plaintext highlighter-rouge">P1</code>, <code class="language-plaintext highlighter-rouge">P2</code> 각각이 하나의 <code class="language-plaintext highlighter-rouge">tape drive</code>를 보유한 채 다른 하나를 기다리고 있는 경우<br /><br /></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P0</span>          <span class="n">P1</span>
<span class="nf">P</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>       <span class="n">P</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>
<span class="n">P</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>       <span class="n">P</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>두 세마포어가 필요한 자원을 서로 자원을 하나씩 가진 상태에서 상대가 내놓기를 기다리는 경우</li>
</ul>

<h2 id="데드락-발생의-4가지-조건">데드락 발생의 4가지 조건</h2>
<h3 id="mutual-exclusion-상호-배제">Mutual exclusion (상호 배제)</h3>
<ul>
  <li>매 순간 하나의 프로세스만이 자원을 사용할 수 있음</li>
</ul>

<h3 id="no-preemption-비선점">No preemption (비선점)</h3>
<ul>
  <li>프로세스는 자원을 스스로 내어놓을 뿐 강제로 빼앗기지 않음</li>
</ul>

<h3 id="hold-and-wait-보유-대기">Hold and wait (보유 대기)</h3>
<ul>
  <li>자원을 가진 프로세스가 다른 자원을 기다릴 때 보유 자원을 놓지 않고 계속 가지고 있음</li>
</ul>

<h3 id="circular-wait-순환-대기">Circular wait (순환 대기)</h3>
<ul>
  <li>자원을 기다리는 프로세스간에 사이클이 형성되어야 함</li>
  <li>프로세스 <code class="language-plaintext highlighter-rouge">1, 2, 3, 4</code>가 있을 때
    <ul>
      <li><code class="language-plaintext highlighter-rouge">1</code>은 <code class="language-plaintext highlighter-rouge">2</code>가 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">2</code>는 <code class="language-plaintext highlighter-rouge">3</code>이 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">3</code>은 <code class="language-plaintext highlighter-rouge">4</code>가 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">4</code>는 <code class="language-plaintext highlighter-rouge">1</code>이 가진 자원을 기다림<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="데드락-처리-방법">데드락 처리 방법</h2>
<h3 id="deadlock-prevention">Deadlock Prevention</h3>
<ul>
  <li>자원 할당 시 <code class="language-plaintext highlighter-rouge">데드락</code>의 4가지 필요 조건 중 어느 하나가 만족되지 않도록 하는 것</li>
</ul>

<h3 id="deadlock-avoidance">Deadlock Avoidance</h3>
<ul>
  <li>자원 요청에 대한 부가적인 정보를 이용해서 <code class="language-plaintext highlighter-rouge">데드락</code>의 가능성이 없는 경우에만 자원 할당</li>
  <li>시스템 <code class="language-plaintext highlighter-rouge">state</code>가 원래 <code class="language-plaintext highlighter-rouge">state</code>로 돌아올 수 있는 경우에만 자원 할당</li>
</ul>

<h3 id="deadlock-detection-and-recovery">Deadlock Detection and recovery</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">데드락</code> 발생은 허용하되 그에 대한 <code class="language-plaintext highlighter-rouge">detection</code> 루틴을 두어 <code class="language-plaintext highlighter-rouge">데드락</code> 발견시 <code class="language-plaintext highlighter-rouge">recover</code></li>
</ul>

<h3 id="deadlock-ingorance">Deadlock Ingorance</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">데드락</code>을 시스템이 책임지지 않음</li>
  <li><code class="language-plaintext highlighter-rouge">UNIX</code>를 포함한 대부분의 <code class="language-plaintext highlighter-rouge">OS</code>가 채택</li>
  <li><code class="language-plaintext highlighter-rouge">데드락</code> 자체가 자주 발생하는 일이 아니기 때문에 <code class="language-plaintext highlighter-rouge">데드락</code>에 대비한다고 시스템의 자원 분배를 조절하는 것은 비효율적이기 때문에 사용자가 알아서 처리하도록 한다.<br /><br /></li>
</ul>

<h2 id="데드락-방지">데드락 방지</h2>
<h3 id="mutual-exclusion">Mutual exclusion</h3>
<ul>
  <li>공유해서는 안 되는 자원의 경우 반드시 성립해야 함</li>
  <li>즉 이 조건이 반드시 성립한다면 데드락이 발생할 수 없다.</li>
</ul>

<h3 id="hold-and-wait">Hold and Wait</h3>
<ul>
  <li>프로세스가 자원을 요청할 때 다른 어떤 자원도 가지고 있지 않아야 한다.</li>
  <li>방법 1 : 프로세스 시작 시 모든 필요한 자원을 할당받게 하는 방법</li>
  <li>방법 2 : 자원이 필요할 경우 보유 자원을 모두 놓고 다시 요청</li>
</ul>

<h3 id="no-preemption">No Preemption</h3>
<ul>
  <li>프로세스가 자원을 기다려야 하는 경우 이미 보유한 자원이 선점됨</li>
  <li>모든 필요한 자원을 얻을 수 있을 때 그 프로세스는 다시 시작됨</li>
  <li>즉 자원을 선점할 수 있게 하는 것</li>
  <li><code class="language-plaintext highlighter-rouge">state</code>를 쉽게 <code class="language-plaintext highlighter-rouge">save</code>하고 <code class="language-plaintext highlighter-rouge">restore</code>할 수 있는 자원에서 주로 사용 (예: <code class="language-plaintext highlighter-rouge">CPU</code>, <code class="language-plaintext highlighter-rouge">memory</code>)</li>
</ul>

<h3 id="circular-wait">Circular Wait</h3>
<ul>
  <li>모든 자원 유형에 할당 순서를 정하여 정해진 순서대로만 자원 할당</li>
  <li>예를 들어 순서가 3인 자원을 보유 중인 프로세스가 순서가 1인 자원을 할당받기 위해서는 우선 순서 3을 <code class="language-plaintext highlighter-rouge">release</code>해야 한다.</li>
  <li>
    <p>자원 요청 사이클이 생성되지 않게 하는 것<br /></p>
  </li>
  <li>하지만 위 기법들을 적용하면 <code class="language-plaintext highlighter-rouge">Utilization(이용률)</code> 저하, <code class="language-plaintext highlighter-rouge">Throughput(성능)</code> 감소, <code class="language-plaintext highlighter-rouge">Starvation</code> 문제가 생겨서 굉장히 비효율적이다.<br /><br /></li>
</ul>

<h2 id="deadlock-avoidance-1">Deadlock Avoidance</h2>
<ul>
  <li>자원 요청에 대한 부가정보를 이용해서 자원 할당이 데드락으로부터 안전한지 동적으로 조사해서 안전한 경우에만 할당</li>
  <li>가장 단순하고 일반적인 모델은 프로세스들이 필요로 하는 각 자원별 최대 사용량을 미리 선언하도록 하는 방법</li>
</ul>

<h3 id="resource-allocation-graph-algorithm">Resource Allocation Graph algorithm</h3>
<ul>
  <li>자원당 하나의 인스턴스만 있을 때 사용하는 방법</li>
  <li>자원들과 프로세스들 간을 실선과 점선으로 잇는 그래프를 그려 할당과 요청된 자원은 실선으로 표시하고 어떤 프로세스가 미래에 한 번은 사용할 수 있는 자원은 점선으로 표시하는 것이다.</li>
  <li>새로운 자원 요청이 들어오면 실선을 점선으로 바꿨을 때 사이클이 생기지 않을 때에만 요청 자원을 할당한다.</li>
  <li>사이클 생성 여부 조사시 프로세스의 수가 <code class="language-plaintext highlighter-rouge">n</code>일 때 <code class="language-plaintext highlighter-rouge">O(n^2)</code> 시간이 걸린다.</li>
</ul>

<h3 id="bankers-algorithm">Banker’s Algorithm</h3>
<ul>
  <li>가정
    <ul>
      <li>모든 프로세스는 자원의 최대 사용량을 미리 명시</li>
      <li>프로세스가 요청 자원을 모두 할당받은 경우 유한 시간 안에 이들 자원을 다시 반납한다.</li>
    </ul>
  </li>
  <li>방법
    <ul>
      <li>기본 개념 : 자원 요청 시 <code class="language-plaintext highlighter-rouge">safe</code> 상태를 유지할 경우에만 할당</li>
      <li>총 요청 자원의 수가 가용 자원의 수보다 적은 프로세스를 선택 (그런 프로세스가 없으면 <code class="language-plaintext highlighter-rouge">unsafe</code> 상태)</li>
      <li>위의 경우에 부합하는 프로세스가 있으면 그 프로세스에게 자원 할당</li>
      <li>할당받은 프로세스가 종료되면 모든 자원 반납</li>
      <li>모든 프로세스가 종료될 때까지 이러한 과정 반복</li>
    </ul>
  </li>
</ul>

<h2 id="deadlock-detection-and-recovery-1">Deadlock Detection and Recovery</h2>
<h3 id="detection">Detection</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Banker's Algorithm</code>과 유사한 방법으로 사이클의 존재 여부를 주기적으로 검사하여 자원을 할당하는 방법이 있다.</li>
</ul>

<h3 id="recovery">Recovery</h3>
<h4 id="process-termination">Process termination</h4>
<ul>
  <li>데드락 된 모든 프로세스 종료</li>
  <li>데드락이 해결될 때 까지 데드락에 갇혀 있는 프로세스를 하나씩 종료</li>
</ul>

<h4 id="resource-preemption">Resource preemption</h4>
<ul>
  <li>비용을 최소화 할 <code class="language-plaintext highlighter-rouge">victim</code> 선정</li>
  <li><code class="language-plaintext highlighter-rouge">safe state</code>로 <code class="language-plaintext highlighter-rouge">rollback</code>하여 프로세스 재시작</li>
  <li><code class="language-plaintext highlighter-rouge">Starvation</code> 문제
    <ul>
      <li>동일한 프로세스가 계속해서 <code class="language-plaintext highlighter-rouge">victim</code>으로 선정되는 경우</li>
      <li><code class="language-plaintext highlighter-rouge">cost factor</code>에 <code class="language-plaintext highlighter-rouge">rollback</code> 횟수도 같이 고려<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="deadlock-ignorance">Deadlock Ignorance</h2>
<ul>
  <li>데드락이 일어나지 않는다고 생각하고 아무런 조치도 취하지 않음</li>
  <li>데드락은 매우 드물게 발생하므로 데드락에 대한 조치 자체가 더 큰 오버헤드일 수 있다.</li>
  <li>만약, 시스템에 데드락이 발생한 경우 시스템이 비정상적으로 작동하는 것을 사람이 느낀 후 직접 프로세스를 죽이는 등의 방법으로 대처</li>
  <li><code class="language-plaintext highlighter-rouge">UNIX</code>, <code class="language-plaintext highlighter-rouge">Windows</code> 등 대부분의 범용 <code class="language-plaintext highlighter-rouge">OS</code>가 채택<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">운영체제 - 이화여자대학교 KOCW 공개강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Operating System" /><category term="CS" /><category term="OS" /><category term="Process" /><category term="Deadlock" /><summary type="html"><![CDATA[👀 Deadlock(교착상태)란? 일련의 프로세스들이 서로가 가진 자원을 기다리며 block된 상태]]></summary></entry><entry><title type="html">OS) Process Synchronization</title><link href="http://localhost:4000/operating%20system/OS-06-process-synchronization/" rel="alternate" type="text/html" title="OS) Process Synchronization" /><published>2022-03-07T00:00:00+09:00</published><updated>2022-03-07T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/OS-06-process-synchronization</id><content type="html" xml:base="http://localhost:4000/operating%20system/OS-06-process-synchronization/"><![CDATA[<h1 id="-process-synchronization-문제">👀 Process Synchronization 문제</h1>
<ul>
  <li>컴퓨터에 저장되어 있는 어떤 데이터를 변경하려면 그 데이터에 접근해서 변경하는 연산을 한 뒤 연산 결과를 다시 그 데이터가 있는 자리에 갱신시켜줘야 한다.</li>
  <li>그런데 이 때 하나의 프로세스만 접근해서 작업을 하면 문제가 없지만 컴퓨터에는 수많은 프로세스가 있고 하나의 데이터에 여러 프로세스가 접근하는 상황이 생길 수 있다.</li>
  <li>이 때 아무런 제어 없이 여러 프로세스가 접근해서 하나의 데이터를 변경시키면 서로 다른 시점에 데이터를 변경하게 될 수 있고 그러다보면 데이터가 사용자의 의도와 다르게 변경될 수 있다(데이터 불일치 문제). 그래서 이걸 막고 데이터의 일관성 유지를 위해서 공유 데이터에 접근할 때 협력 프로세스 간의 실행 순서를 정해주어야 한다.</li>
</ul>

<h2 id="-race-condition">🔸 Race condition</h2>
<ul>
  <li>여러 프로세스들이 동시에 공유 데이터에 접근하는 상황</li>
  <li>데이터의 최종 연산 결과는 마지막에 그 데이터를 다룬 프로세스에 따라 달라짐</li>
  <li><code class="language-plaintext highlighter-rouge">Race condition</code>을 막기 위해 <code class="language-plaintext highlighter-rouge">concurrent process(동시 접근)</code>는 <code class="language-plaintext highlighter-rouge">동기화(synchronize)</code>되어야 한다.<br /><br /><br /></li>
</ul>

<h1 id="race-condition이-발생하는-상황">Race Condition이 발생하는 상황</h1>
<h2 id="1-커널-수행-중-인터럽트-발생-시">1. 커널 수행 중 인터럽트 발생 시</h2>
<ul>
  <li>커널 데이터를 처리하는 도중에 <code class="language-plaintext highlighter-rouge">인터럽트</code>가 생긴 경우</li>
  <li>해결책 : 먼저 작업 중이던 커널 코드의 작업이 끝나기 전 까지는 <code class="language-plaintext highlighter-rouge">인터럽트</code>를 받지 않는다.</li>
</ul>

<h2 id="2-프로세스가-시스템-콜을-하여-커널-모드로-수행-중인데-context-switch가-일어나는-경우">2. 프로세스가 시스템 콜을 하여 커널 모드로 수행 중인데 context switch가 일어나는 경우</h2>
<ul>
  <li>A 프로세스가 <code class="language-plaintext highlighter-rouge">PC</code>를 증가시키는 도중에 다른 커널 코드 B에게 <code class="language-plaintext highlighter-rouge">CPU</code>를 뺏겼다가 뺏어간 쪽의 작업이 끝난 후 다시 돌려 받으면 A는 B가 증가시키기 전의 <code class="language-plaintext highlighter-rouge">PC</code> 정보를 가지고 있기 때문에 A가 증가시키는 <code class="language-plaintext highlighter-rouge">PC</code>는 정확한 값으로 증가되지 않는다.</li>
  <li>해결책 : 커널 모드에서 수행 중일 때는 <code class="language-plaintext highlighter-rouge">CPU</code>를 <code class="language-plaintext highlighter-rouge">preempt</code>하지 않고 커널 모드에서 사용자 모드로 돌아갈 때 <code class="language-plaintext highlighter-rouge">preempt</code>한다.</li>
</ul>

<h2 id="3-multiprocessor에서-shared-memory-내의-커널-데이터">3. Multiprocessor에서 shared memory 내의 커널 데이터</h2>
<ul>
  <li>위 경우들은 같은 <code class="language-plaintext highlighter-rouge">CPU</code> 내에서만 할 수 있는 동작들이기 때문에 멀티 프로세서 환경에서는 적용이 어렵다.</li>
  <li>여러 프로세스들이 하나의 공유 메모리에 접근해야 할 때 각각의 <code class="language-plaintext highlighter-rouge">CPU</code>에서 동시에 접근해서 데이터를 변경할 수 있다.</li>
  <li>해결책 1 : 한 번에 하나의 <code class="language-plaintext highlighter-rouge">CPU</code>만이 커널에 들어갈 수 있게 하는 방법</li>
  <li>해결책 2 : 커널 내부에 있는 각 공유 데이터에 접근할 때마다 그 데이터에 대한 <code class="language-plaintext highlighter-rouge">lock/unlock</code>을 하는 방법<br /><br /><br /></li>
</ul>

<h1 id="the-critical-section-problem">The Critical-Section Problem</h1>
<ul>
  <li>n개의 프로세스가 공유 데이터를 동시에 사용하기를 원하는 경우</li>
  <li>각 프로세스의 <code class="language-plaintext highlighter-rouge">code segment</code>에는 공유 데이터를 접근하는 코드인 <code class="language-plaintext highlighter-rouge">critical section</code>이 존재</li>
  <li>하나의 프로세스가 <code class="language-plaintext highlighter-rouge">critical section</code>에 있을 때 다른 모든 프로세스는 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어갈 수 없어야 한다.</li>
</ul>

<h2 id="프로그램적-해결법의-충족-조건">프로그램적 해결법의 충족 조건</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Mutual Exclusion(상호 배제/배타적 접근)</code>
    <ul>
      <li>프로세스 Pirk <code class="language-plaintext highlighter-rouge">critical section</code> 부분을 수행 중이면 다른 모든 프로세스들은 그들의 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가면 안 된다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Progress(진행)</code>
    <ul>
      <li>아무도 <code class="language-plaintext highlighter-rouge">critical section</code>에 있지 않은 상태에서 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가고자 하는 프로세스가 있으면 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가게 해 주어야 한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Bounded Waiting(유한 대기)</code>
    <ul>
      <li>프로세스가 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가려고 요청한 후부터 그 요청이 허용될 때까지 다른 프로세스들이 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가는 횟수에 한계가 있어야 한다.</li>
      <li>무한대로 기다리지 않게 해서 <code class="language-plaintext highlighter-rouge">starvation</code>을 방지<br /></li>
    </ul>
  </li>
  <li>가정
    <ul>
      <li>모든 프로세스의 수행 속도는 0보다 크다.</li>
      <li>프로세스들 간의 상대적인 수행 속도는 가정하지 않는다.</li>
    </ul>
  </li>
</ul>

<h2 id="기본적인-해결-방법">기본적인 해결 방법</h2>
<ul>
  <li>두 개의 프로세스 <code class="language-plaintext highlighter-rouge">P0</code>, <code class="language-plaintext highlighter-rouge">P1</code>이 있다고 가정했을 때</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="p">{</span>
    <span class="n">entry</span> <span class="n">section</span>   <span class="cm">/* lock */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">exti</span> <span class="n">section</span>    <span class="cm">/* unlock */</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>프로세스들은 수행의 동기화를 위해 몇몇 변수를 공유할 수 있다. - <code class="language-plaintext highlighter-rouge">Synchronization variable</code></li>
</ul>

<h3 id="algorithm-1">Algorithm 1</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">turn</span><span class="p">;</span>   <span class="cm">/* 누구 차례인지 표시할 변수.  Synchronization variable */</span>
<span class="n">initially</span> <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>  <span class="cm">/* 내 턴이 아닌 동안 대기 */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="cm">/* 상대편으로 턴 넘김 */</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>위 코드대로만 진행되면 문제가 없어 보이지만 반드시 상대 프로세스가 들어와서 <code class="language-plaintext highlighter-rouge">turn</code>을 바꿔 주어야만 다른 프로세스가 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어갈 수 있기 때문에 만약 A 프로세스가 더 빈번하게 <code class="language-plaintext highlighter-rouge">critical section</code>에 들어가야 하는 경우 B 프로세스는 상대적으로 덜 들어가기 때문에 <code class="language-plaintext highlighter-rouge">turn</code>이 바뀌지 않아 A 프로세스가 들어갈 수 없는 상황이 생긴다.</li>
</ul>

<h3 id="algorithm-2">Algorithm 2</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boolean</span> <span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>    <span class="cm">/* critical section에 들어가고자 하는 의중을 표시하는 flag */</span>
<span class="n">initially</span> <span class="n">flag</span><span class="p">[</span><span class="err">모두</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="cm">/* 처음엔 critical section에 아무도 없음 */</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>     <span class="cm">/* 진입 표시 */</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>    <span class="cm">/* 상대 프로세스도 진입해 있으면 대기 */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>    <span class="cm">/* 나왔다고 표시 */</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>위 코드에서는 만약 A 프로세스가 첫번째 줄만 실행하고 <code class="language-plaintext highlighter-rouge">CPU</code>를 뺏긴 경우 상대 프로세스도 첫번째 줄을 실행하고 두번째 줄에서 대기하게 될 것이다. 즉 둘 다 무한히 대기하게 된다.</li>
</ul>

<h3 id="algorithm-3-petersons-algorithm">Algorithm 3 (Peterson’s Algorithm)</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="p">{</span>
    <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>     <span class="cm">/* 진입 표시 */</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>           <span class="cm">/* 상대편으로 턴 변경 */</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">j</span><span class="p">);</span>   <span class="cm">/* 들어가고자 하는 프로세스와 턴 모두 확인 */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>알고리즘 1과 2를 합친 방법으로 앞선 두 가지 방법에서 있었던 문제들을 모두 해결할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">Busy Waiting(= spin lock)</code>
    <ul>
      <li>하지만 <code class="language-plaintext highlighter-rouge">critical section</code>에 프로세스가 이미 있어서 못 들어가는 것이 확실한 상황에서도 계속 <code class="language-plaintext highlighter-rouge">CPU</code>를 얻어서 <code class="language-plaintext highlighter-rouge">while</code>문 조건을 확인해야 하기 때문에 지속적으로 <code class="language-plaintext highlighter-rouge">CPU</code>와 <code class="language-plaintext highlighter-rouge">memory</code>를 소모하게 된다.</li>
    </ul>
  </li>
</ul>

<h3 id="하드웨어적으로-해결하기">하드웨어적으로 해결하기</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Instruction</code> 하나로 <code class="language-plaintext highlighter-rouge">Synchronization variable</code> 읽기와 쓰기를 동시에 실행하면 위의 알고리즘으로 해결하고자 했던 문제들을 간단히 해결할 수 있다.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boolean</span> <span class="n">lock</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">Test_and_set</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span> <span class="cm">/* lock이 걸려있다면 lock을 걸고 기다릴 것이고 걸려있지 않다면 lock을 걸고 들어갈 것임 */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">lock</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>
<p><br /><br /></p>

<h2 id="semaphores">Semaphores</h2>
<ul>
  <li>프로그래머가 매번 앞의 작업들을 하려면 귀찮으니까 그 작업들을 추상화시킨 것</li>
  <li><code class="language-plaintext highlighter-rouge">integer variable</code> 형태로 자원의 갯수를 가지고 있다.</li>
  <li>아래의 두 가지 <code class="language-plaintext highlighter-rouge">atomic</code> 연산에 의해서만 접근할 수 있다.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* P(S) : 공유 데이터를 획득하는 연산 */</span>
<span class="k">while</span> <span class="p">(</span><span class="n">S</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">do</span> <span class="n">wait</span><span class="p">;</span> <span class="cm">/* 사용할 수 있는 자원이 없으면 대기 */</span>
<span class="n">S</span><span class="o">--</span><span class="p">;</span>

<span class="cm">/* V(S) : 공유 데이터를 사용 후 반납 */</span>
<span class="n">S</span><span class="o">++</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="세마포어를-이용한-코드---busy-wait">세마포어를 이용한 코드 - Busy-wait</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">semaphore</span> <span class="n">mutex</span><span class="p">;</span>    <span class="cm">/* initially 1 : 1개가 critical section에 들어갈 수 있다 */</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="n">P</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>   <span class="cm">/* 자원이 남아 있으면 하나 감소시키고 입장 */</span>
    <span class="n">critical</span> <span class="n">section</span>
    <span class="n">V</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>   <span class="cm">/* 자원 반납 및 증가 */</span>
    <span class="n">remainder</span> <span class="n">section</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>대기하는 프로세스가 있으면 자원이 생겼는지 계속 확인해야 하기 때문에 <code class="language-plaintext highlighter-rouge">busy-wait</code>하게 된다.</li>
</ul>

<h3 id="세마포어를-이용한-코드---block--wekeup">세마포어를 이용한 코드 - Block &amp; wekeup</h3>
<ul>
  <li>세마포어를 다음과 같이 정의한다.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>          <span class="cm">/* semaphore */</span>
    <span class="k">struct</span> <span class="n">process</span> <span class="o">*</span><span class="n">L</span><span class="p">;</span>  <span class="cm">/* 프로세스 대기열 */</span>
<span class="p">}</span> <span class="n">semaphore</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">block</code>과 <code class="language-plaintext highlighter-rouge">wakeup</code>을 다음과 같이 가정한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">block</code> : 커널은 <code class="language-plaintext highlighter-rouge">block</code>을 호출한 프로세스를 <code class="language-plaintext highlighter-rouge">suspend</code> 시킨 후 이 프로세스의 <code class="language-plaintext highlighter-rouge">PCB</code>를 세마포어에 대한 대기열에 넣음</li>
      <li><code class="language-plaintext highlighter-rouge">wakeup</code> : <code class="language-plaintext highlighter-rouge">block</code>된 프로세스를 <code class="language-plaintext highlighter-rouge">wakeup</code> 시킨 후 이 프로세스의 <code class="language-plaintext highlighter-rouge">PCB</code>를 <code class="language-plaintext highlighter-rouge">ready queue</code>로 옮김</li>
    </ul>
  </li>
  <li>세마포어 연산 정의</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* P(S) */</span>
<span class="n">S</span><span class="p">.</span><span class="n">value</span><span class="o">--</span><span class="p">;</span>  <span class="cm">/* 입장 전에 자원의 수를 감소시킴 */</span>
<span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>    <span class="cm">/* 현재 쓸 수 있는 자원이 없으면 대기시킨다 */</span>
<span class="p">{</span>
    <span class="n">add</span> <span class="n">this</span> <span class="n">process</span> <span class="n">to</span> <span class="n">S</span><span class="p">.</span><span class="n">L</span><span class="p">;</span>
    <span class="n">block</span><span class="p">();</span>
<span class="p">}</span>

<span class="cm">/* V(S) */</span>
<span class="n">S</span><span class="p">.</span><span class="n">value</span><span class="o">++</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">value</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>   <span class="cm">/* P 연산에서 자원을 미리 감소시키고 들어가기 때문에 자원을 반납했는데도 갯수가 0 이하라면 기다리고 있는 프로세스가 있는 것 */</span>
<span class="p">{</span>
    <span class="n">remove</span> <span class="n">a</span> <span class="n">process</span> <span class="n">P</span> <span class="n">from</span> <span class="n">S</span><span class="p">.</span><span class="n">L</span><span class="p">;</span>
    <span class="n">wakeup</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="-busy-wait-vs-blockwakeup">👀 Busy-wait vs. Block/wakeup</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">critical section</code>의 길이가 긴 경우 <code class="language-plaintext highlighter-rouge">Block/wakeup</code>이 적당</li>
  <li><code class="language-plaintext highlighter-rouge">critical section</code>의 길이가 매우 짧은 경우 <code class="language-plaintext highlighter-rouge">Block/wakeup</code> 오버헤드가 <code class="language-plaintext highlighter-rouge">Busy-wait</code> 오버헤드보다 더 커질 수 있다.</li>
  <li>일반적으로는 <code class="language-plaintext highlighter-rouge">Block/wakeup</code> 방식이 좋다.<br /><br /></li>
</ul>

<h2 id="세마포어의-두-종류">세마포어의 두 종류</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Counting semaphore</code>
    <ul>
      <li>도메인이 0 이상인 임의의 정수값</li>
      <li>주로 리소스의 갯수를 세는 데 사용한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Binary semaphore</code>
    <ul>
      <li>0 또는 1 값만 가질 수 있는 세마포어</li>
      <li>주로 <code class="language-plaintext highlighter-rouge">mutual exclusion (lock/unlock)</code>에 사용</li>
    </ul>
  </li>
</ul>

<h2 id="deadlock-and-starvation">Deadlock and Starvation</h2>
<h3 id="deadlock">Deadlock</h3>
<ul>
  <li>둘 이상의 프로세스가 서로 상대방에 의해 충족될 수 있는 event를 무한히 기다리는 현상</li>
  <li>1과 2 두 개의 자원을 얻어야 하는 A 프로세스가 있을 때 만약 A 프로세스가 1번 자원만 얻고 B 프로세스에게 <code class="language-plaintext highlighter-rouge">CPU</code>를 뺏긴 후 B 프로세스가 2번 자원을 얻으면 A 프로세스는 <code class="language-plaintext highlighter-rouge">CPU</code>를 다시 돌려받아도 2번 자원을 얻지 못해서 다음으로 진행할 수 없다. B 프로세스 또한 1번 자원이 필요하다면 영원히 기다리게 된다.</li>
  <li>이러한 현상을 해결하기 위해서 자원을 획득하는 순서를 정해줘서 1번 자원을 먼저 얻어야만 2번 자원을 얻을 수 있게 하는 방식을 사용할 수 있다.</li>
</ul>

<h3 id="starvation">Starvation</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">indefinite blocking</code></li>
  <li>프로세스가 <code class="language-plaintext highlighter-rouge">suspend</code>된 이유에 해당하는 세마포어 큐에서 빠져나갈 수 없는 현상<br /><br /><br /></li>
</ul>

<h1 id="classical-problems-of-synchronization">Classical Problems of Synchronization</h1>
<h2 id="-bounded-buffer-problem">🔸 Bounded buffer problem</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Producer-Consumer Problem</code>이라고도 하며 데이터 입력을 위한 버퍼를 생성하는 생산자와 그 버퍼를 읽어서 수정된 데이터를 반영할 소비자로 나누는 개념이다.</li>
  <li>생산자는 빈 버퍼가 있는지 확인 후(없으면 기다림) 공유데이터에 lock을 걸고 버퍼에 데이터를 입력한 다음 lock을 풀고 든 버퍼를 하나 증가시킨다.</li>
  <li>소비자는 든 버퍼가 있는지 확인 후(없으면 기다림) 공유데이터에 lock을 걸고 버퍼에서 데이터를 꺼낸 뒤 lock을 풀고 빈 버퍼를 하나 증가시킨다.</li>
</ul>

<h3 id="공유-데이터">공유 데이터</h3>
<ul>
  <li>버퍼 및 버퍼 조작 변수(empty/full buffer의 시작 위치)</li>
</ul>

<h3 id="동기화-변수">동기화 변수</h3>
<ul>
  <li>mutual exclusion : 공유데이터의 mutual exclusion을 위해 필요</li>
  <li>resource count : 남은 empty/full buffer의 수를 표시하기 위해 필요</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Producer */</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="n">produce</span> <span class="n">an</span> <span class="n">item</span> <span class="n">in</span> <span class="n">x</span>
    <span class="p">...</span>
    <span class="n">P</span><span class="p">(</span><span class="n">empty</span><span class="p">);</span>
    <span class="n">P</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
    <span class="p">...</span>
    <span class="n">add</span> <span class="n">x</span> <span class="n">to</span> <span class="n">buffer</span>
    <span class="p">...</span>
    <span class="n">V</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
    <span class="n">V</span><span class="p">(</span><span class="n">full</span><span class="p">);</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>

<span class="cm">/* Consumer */</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="n">P</span><span class="p">(</span><span class="n">full</span><span class="p">);</span>
    <span class="n">P</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
    <span class="p">...</span>
    <span class="n">remove</span> <span class="n">an</span> <span class="n">item</span> <span class="n">from</span> <span class="n">buffer</span> <span class="n">to</span> <span class="n">y</span>
    <span class="p">...</span>
    <span class="n">V</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
    <span class="n">V</span><span class="p">(</span><span class="n">empty</span><span class="p">);</span>
    <span class="p">...</span>
    <span class="n">consume</span> <span class="n">the</span> <span class="n">item</span> <span class="n">in</span> <span class="n">y</span>
    <span class="p">...</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="-readers-writers-problem">🔸 Readers-Writers Problem</h2>
<ul>
  <li>한 프로세스가 <code class="language-plaintext highlighter-rouge">DB</code>에 <code class="language-plaintext highlighter-rouge">write</code> 중일 때 다른 프로세스가 접근하면 안 됨</li>
  <li><code class="language-plaintext highlighter-rouge">read</code>는 동시에 여럿이 해도 됨</li>
  <li>solution
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Writer</code>가 <code class="language-plaintext highlighter-rouge">DB</code>에 접근 허가를 아직 얻지 못한 상태에서는 모든 대기 중인 <code class="language-plaintext highlighter-rouge">Reader</code>들을 다 <code class="language-plaintext highlighter-rouge">DB</code>에 접근하게 해준다.</li>
      <li><code class="language-plaintext highlighter-rouge">Writer</code>는 대기 중인 <code class="language-plaintext highlighter-rouge">Reader</code>가 하나도 없을 때 <code class="language-plaintext highlighter-rouge">DB</code> 접근이 허용된다.</li>
      <li>일단 <code class="language-plaintext highlighter-rouge">Writer</code>가 <code class="language-plaintext highlighter-rouge">DB</code>에 접근 중이면 <code class="language-plaintext highlighter-rouge">Reader</code>들은 접근이 금지된다.</li>
      <li><code class="language-plaintext highlighter-rouge">Writer</code>가 <code class="language-plaintext highlighter-rouge">DB</code>에서 빠져 나가야만 <code class="language-plaintext highlighter-rouge">Reader</code>의 접근이 허용된다.</li>
    </ul>
  </li>
</ul>

<h3 id="공유-데이터-1">공유 데이터</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DB</code> 자체</li>
  <li><code class="language-plaintext highlighter-rouge">readcount</code> : 현재 <code class="language-plaintext highlighter-rouge">DB</code>에 접근 중인 <code class="language-plaintext highlighter-rouge">Reader</code>의 수</li>
</ul>

<h3 id="동기화-변수-1">동기화 변수</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">mutex</code> : 공유 변수 <code class="language-plaintext highlighter-rouge">readcount</code>를 접근하는 코드(critical section)의 <code class="language-plaintext highlighter-rouge">mutual exclusion</code> 보장을 위해 사용</li>
  <li><code class="language-plaintext highlighter-rouge">db</code> : <code class="language-plaintext highlighter-rouge">Reader</code>와 <code class="language-plaintext highlighter-rouge">Writer</code>가 공유 <code class="language-plaintext highlighter-rouge">DB</code> 자체를 올바르게 접근하는 역할</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">readcount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">DB</span> <span class="err">자체</span><span class="p">;</span>
<span class="n">semaphore</span> <span class="n">mutex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">db</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="cm">/* Writer */</span>
<span class="n">P</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
<span class="p">...</span>
<span class="n">writing</span> <span class="n">DB</span> <span class="p">...</span>
<span class="p">...</span>
<span class="n">V</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>

<span class="cm">/* Reader */</span>
<span class="n">P</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
<span class="n">readcount</span><span class="o">++</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">readcount</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">P</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>  <span class="cm">/* Writer 대기시킴 */</span>
<span class="n">V</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
<span class="p">...</span>
<span class="n">reading</span> <span class="n">DB</span> <span class="p">...</span>
<span class="p">...</span>
<span class="n">P</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
<span class="n">readcount</span><span class="o">--</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">readcount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">V</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>  <span class="cm">/* Writer 입장 가능 */</span>
<span class="n">V</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>하지만 위 코드대로만 하면 <code class="language-plaintext highlighter-rouge">Reader</code>가 계속 들어와서 <code class="language-plaintext highlighter-rouge">Writer</code>가 영원히 기다리게 될 수 있기 때문에(starvation) <code class="language-plaintext highlighter-rouge">Writer</code>의 우선순위를 높여줘서 너무 오래 기다리지 않게 한다.</li>
</ul>

<h2 id="-dining-philosophers-problem">🔸 Dining-Philosophers Problem</h2>
<ul>
  <li>다섯 명의 철학자가 원형 테이블에 앉아서 생각과 식사를 반복하는데 젓가락이 5개(2개 세트 아님)밖에 없음</li>
  <li>철학자는 내 양 옆에 있는 젓가락을 옆에 있는 철학자들이 쓰고 있지 않아야 젓가락을 사용해 밥을 먹을 수 있다.</li>
  <li>이 때 어떤 철학자의 양 옆에 있는 철학자들이 계속 밥을 먹어서 어떤 철학자가 젓가락을 영원히 쓰지 못하면 굶어 죽는다는.. 그런 문제이다.</li>
  <li>해결 방안
    <ul>
      <li>4명의 철학자만 테이블에 동시에 앉을 수 있도록 한다.</li>
      <li>젓가락을 두 개 모두 집을 수 있을 때에만 젓가락을 집을 수 있게 한다.</li>
      <li>비대칭 : 짝수(홀수) 철학자는 왼쪽(오른쪽) 젓가락부터 집도록 한다.<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="monitor">Monitor</h1>
<h2 id="세마포어의-문제점">세마포어의 문제점</h2>
<ul>
  <li>코딩하기 힘들다. - 문제가 생겼을 때 버그 잡기 힘듦</li>
  <li>정확성(correctness)의 입증이 어렵다.</li>
  <li>자발적 협력(voluntary cooperation)이 필요하다.</li>
  <li>한 번의 실수가 모든 시스템이 치명적인 영향을 끼친다.</li>
</ul>

<h3 id="예">예</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>V(mutex)
critical section
P(mutex)
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Mutual exclusion</code>이 깨짐<br /></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P(mutex)
critical section
P(mutex)
</code></pre></div></div>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Deadlock</code><br /></p>
  </li>
  <li>
    <p>위 경우들처럼 순서가 바뀌거나 같은 연산을 두 번 쓰는 실수가 생기면 오작동이 생긴다.</p>
  </li>
</ul>

<h2 id="monitor-1">Monitor</h2>
<ul>
  <li>동시 수행 중인 프로세스 사이에서 <code class="language-plaintext highlighter-rouge">abstract data type</code>의 안전한 공유를 보장하기 위한 <code class="language-plaintext highlighter-rouge">high-level synchronization construct</code></li>
  <li>객체 지향 프로그래밍에서 <code class="language-plaintext highlighter-rouge">class</code>에 멤버 변수와 함수를 담아서 사용하듯이 공유 데이터를 모니터 안에 선언하고 공유 데이터에 접근하려면 모니터 내부의 함수를 통해서만 하도록 하는 방법</li>
  <li>모니터 내의 함수는 한 번에 하나만 실행할 수 있기 때문에 <code class="language-plaintext highlighter-rouge">lock</code>을 걸 필요가 없다. 그래서 프로그래머 입장에서는 좀 더 간편하게 프로그램을 짤 수 있다.<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">운영체제 - 이화여자대학교 KOCW 공개강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Operating System" /><category term="CS" /><category term="OS" /><category term="Process" /><category term="Synchronization" /><summary type="html"><![CDATA[👀 Process Synchronization 문제 컴퓨터에 저장되어 있는 어떤 데이터를 변경하려면 그 데이터에 접근해서 변경하는 연산을 한 뒤 연산 결과를 다시 그 데이터가 있는 자리에 갱신시켜줘야 한다. 그런데 이 때 하나의 프로세스만 접근해서 작업을 하면 문제가 없지만 컴퓨터에는 수많은 프로세스가 있고 하나의 데이터에 여러 프로세스가 접근하는 상황이 생길 수 있다. 이 때 아무런 제어 없이 여러 프로세스가 접근해서 하나의 데이터를 변경시키면 서로 다른 시점에 데이터를 변경하게 될 수 있고 그러다보면 데이터가 사용자의 의도와 다르게 변경될 수 있다(데이터 불일치 문제). 그래서 이걸 막고 데이터의 일관성 유지를 위해서 공유 데이터에 접근할 때 협력 프로세스 간의 실행 순서를 정해주어야 한다.]]></summary></entry><entry><title type="html">프로젝트) Cafe(웹 사이트) 만들기 3</title><link href="http://localhost:4000/project%20log/cafe-project-03/" rel="alternate" type="text/html" title="프로젝트) Cafe(웹 사이트) 만들기 3" /><published>2022-03-07T00:00:00+09:00</published><updated>2022-03-07T00:00:00+09:00</updated><id>http://localhost:4000/project%20log/cafe-project-03</id><content type="html" xml:base="http://localhost:4000/project%20log/cafe-project-03/"><![CDATA[<h1 id="개발환경">개발환경</h1>
<ul>
  <li>OpenJDK 8</li>
  <li>Eclipse 2021-12</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="시작">시작</h1>
<ul>
  <li>2022.3.4 ~ <br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 중간 과제로 개인 프로젝트를 진행하게 되었다.</li>
  <li>회원가입/로그인/탈퇴 등 기본적인 회원관리 시스템을 가진 웹 사이트를 만드는 것이다. 주어진 기한은 <code class="language-plaintext highlighter-rouge">한 달</code></li>
  <li>나는 <code class="language-plaintext highlighter-rouge">다음 카페</code>를 소규모로 만들어 보기로 했다. 평소 자주 이용하기도 했고 과제의 평가 기준에서 요구하는 기능들을 다 담고 있기도 했기 때문에 이번 기회에 구현해 보면 그동안 배운 것들을 활용하기에 좋을 거 같았다.</li>
  <li>평가 기준에 사이트의 디자인 구현(HTML/CSS 등 프론트엔드)은 포함되지 않기 때문에 본인이 쓰고 싶은 HTML/CSS 템플릿을 구한 뒤 회원 관리 기능을 구현하면 된다.<br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>오늘은 저번 시간에 만든 <code class="language-plaintext highlighter-rouge">DB 테이블</code>과 내가 만든 사이트를 연동해서 회원가입 기능을 구현했다.</li>
</ul>

<h2 id="1-xml-파일-만들기">1. xml 파일 만들기</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DB</code> 연결이 필요한 페이지마다 DB 연결을 위한 코드를 작성하면 비효율적이니까 먼저 <code class="language-plaintext highlighter-rouge">xml</code> 파일에 연결에 필요한 정보를 저장한 후 불러온다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;Context&gt;</span>
  <span class="c">&lt;!-- Context : 프로젝트 --&gt;</span>
  <span class="nt">&lt;Resource</span> 
    <span class="na">name=</span><span class="s">"디비에 접근하기 위한 이름"</span> 
    <span class="na">auth=</span><span class="s">"컨테이너 자원 관리자 설정 - Application or Container"</span> 
    <span class="na">type=</span><span class="s">"리소스를 사용할 때 실제로 사용되는 클래스 타입"</span> 
    <span class="na">username=</span><span class="s">"디비 아이디"</span> 
    <span class="na">password=</span><span class="s">"디비 비밀번호"</span> 
    <span class="na">driverClassName=</span><span class="s">"드라이버 주소"</span> 
    <span class="na">url=</span><span class="s">"디비 연결 주소"</span> 
    <span class="na">maxActive=</span><span class="s">"커넥션 회수 대기시간"</span>
  <span class="nt">/&gt;</span>
<span class="nt">&lt;/Context&gt;</span>
</code></pre></div></div>

<ul>
  <li>기본 형식과 각 라인의 의미는 위와 같으며</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;Context&gt;</span>
  <span class="nt">&lt;Resource</span>
    <span class="na">name =</span> <span class="s">"jdbc/cafe"</span> 
    <span class="na">auth =</span> <span class="s">"container"</span> 
    <span class="na">type =</span> <span class="s">"javax.sql.DataSource"</span> 
    <span class="na">driverClassName =</span> <span class="s">"com.mysql.cj.jdbc.Driver"</span> 
    <span class="na">url =</span> <span class="s">"jdbc:mysql://localhost:3306/jspdb"</span> 
    <span class="na">username =</span> <span class="s">"root"</span>
    <span class="na">password =</span> <span class="s">"1234"</span>
  <span class="nt">/&gt;</span>
<span class="nt">&lt;/Context&gt;</span>
</code></pre></div></div>

<ul>
  <li>나는 이렇게 작성했다.</li>
</ul>

<h2 id="2-dto-dao-클래스-만들기">2. DTO, DAO 클래스 만들기</h2>
<ul>
  <li>회원 가입에 필요한 정보를 모아서 한꺼번에 전달할 수 있는 객체를 만들기 위해 <code class="language-plaintext highlighter-rouge">MemberDTO</code> 클래스를 만들었다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.sql.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.Timestamp</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberDTO</span> 
<span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">pass</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Date</span> <span class="n">birth</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">gender</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Timestamp</span> <span class="n">regdate</span><span class="o">;</span>
	
    <span class="c1">// getter/setter 작성</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>그리고 <code class="language-plaintext highlighter-rouge">DB</code> 연결을 처리할 서블릿 클래스를 만들었다. 커넥션 풀을 사용하도록 구현했다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.PreparedStatement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.ResultSet</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.naming.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.naming.InitialContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberDAO</span> 
<span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Connection</span> <span class="n">con</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
	
	<span class="c1">// DB 연결정보 준비</span>
	<span class="kd">private</span> <span class="nc">Connection</span> <span class="nf">getCon</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span>
	<span class="o">{</span>
		<span class="c1">// Context 객체 생성</span>
		<span class="nc">Context</span> <span class="n">initCTX</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InitialContext</span><span class="o">();</span>
		<span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="o">(</span><span class="nc">DataSource</span><span class="o">)</span> <span class="n">initCTX</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">"java:comp/env/jdbc/cafe"</span><span class="o">);</span>
		<span class="n">con</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : 1.2. DB 연결 성공"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : "</span> <span class="o">+</span> <span class="n">con</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="n">con</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// DB 자원해제</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">CloseDB</span><span class="o">()</span>
	<span class="o">{</span>
		<span class="k">try</span> 
		<span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">rs</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">pstmt</span><span class="o">)</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">con</span><span class="o">)</span> <span class="n">con</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="o">}</span> 
		<span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> 
		<span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
 
    <span class="c1">// insertMember(dto)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertMember</span><span class="o">(</span><span class="nc">MemberDTO</span> <span class="n">dto</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"insertMember(dto) 호출"</span><span class="o">);</span>
		
		<span class="c1">// 1.2. DB 연결</span>
		<span class="k">try</span> 
		<span class="o">{</span>
			<span class="n">con</span> <span class="o">=</span> <span class="n">getCon</span><span class="o">();</span>
			
			<span class="c1">// 3. sql 작성 &amp; pstmt 연결</span>
			<span class="n">sql</span> <span class="o">=</span> <span class="s">"insert into cafe_members(id, pass, name, birth, age, gender, address, phone, email, regdate) "</span>
					<span class="o">+</span> <span class="s">"values(?,?,?,?,?,?,?,?,?,?)"</span><span class="o">;</span>
			
			<span class="n">pstmt</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
			
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getPass</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setDate</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getBirth</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getGender</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getAddress</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getPhone</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">setTimestamp</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">dto</span><span class="o">.</span><span class="na">getRegdate</span><span class="o">());</span>
			
			<span class="c1">// 4. sql 실행</span>
			<span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : 회원가입 완료"</span><span class="o">);</span>
		<span class="o">}</span> 
		<span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> 
		<span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">finally</span> 
		<span class="o">{</span>
			<span class="nc">CloseDB</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"DAO : insertMember(dto) 끝!"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="c1">// insertMember(dto)</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="3-회원가입-처리-동작을-수행할-action-클래스-만들기">3. 회원가입 처리 동작을 수행할 Action 클래스 만들기</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">jsp</code> 페이지에서 회원가입 처리를 수행하지 않고 자바 클래스에서 처리할 것이다.</li>
  <li><code class="language-plaintext highlighter-rouge">Action</code> 페이지에서 구현해야 하는 기능을 빼먹지 않고 강제하기 위해서 인터페이스를 <code class="language-plaintext highlighter-rouge">implements</code> 한 뒤 오버라이딩하여 구현했다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Action</span> 
<span class="o">{</span>
	<span class="kd">public</span> <span class="nc">ActionForward</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>

<span class="kn">import</span> <span class="nn">java.sql.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.Timestamp</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.project.cafe.member.db.MemberDAO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.project.cafe.member.db.MemberDTO</span><span class="o">;</span>

<span class="c1">// 회원가입 처리동작 수행</span>
<span class="c1">// model 객체로 pro 페이지 역할을 한다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberJoinAction</span> <span class="kd">implements</span> <span class="nc">Action</span>
<span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">ActionForward</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> 
	<span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"M : MemberJoinAction - execute() 호출"</span><span class="o">);</span>
		
		<span class="c1">// 한글처리</span>
		<span class="n">request</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
		
		<span class="c1">// 전달받은 파라미터 저장 (JSP 페이지가 아니므로 액션태그는 쓸 수 없고 setter를 이용해 저장한다)</span>
		<span class="nc">MemberDTO</span> <span class="n">dto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDTO</span><span class="o">();</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setPass</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"pass"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"address"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">)));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setBirth</span><span class="o">(</span><span class="nc">Date</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"birth"</span><span class="o">)));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"email"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"gender"</span><span class="o">));</span>
		
		<span class="c1">// 폰번호 3개 필드 합친 후 저장</span>
		<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
		<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"phone1"</span><span class="o">));</span>
		<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"phone2"</span><span class="o">));</span>
		<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"phone3"</span><span class="o">));</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setPhone</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
		
		<span class="c1">// 날짜 정보 추가 저장</span>
		<span class="n">dto</span><span class="o">.</span><span class="na">setRegdate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Timestamp</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()));</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"M : 전달된 회원 정보 저장"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"M : "</span> <span class="o">+</span> <span class="n">dto</span><span class="o">);</span>
		
		<span class="c1">// DAO 객체 생성</span>
		<span class="nc">MemberDAO</span> <span class="n">dao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDAO</span><span class="o">();</span>
		
		<span class="c1">// 회원가입 메서드 호출</span>
		<span class="n">dao</span><span class="o">.</span><span class="na">insertMember</span><span class="o">(</span><span class="n">dto</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"M : 회원가입 완료"</span><span class="o">);</span>
		
		<span class="c1">// 페이지 이동 (로그인 페이지로 - ./login.me)</span>
		<span class="nc">ActionForward</span> <span class="n">forward</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ActionForward</span><span class="o">();</span>
		<span class="n">forward</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"./login.me"</span><span class="o">);</span>
		<span class="n">forward</span><span class="o">.</span><span class="na">setRedirect</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// Action 페이지를 노출하지 않고 가상 주소를 보여줘야 하니까 true로 설정해서 주소줄에 표시되는 주소를 바꾼다.</span>
		
		<span class="k">return</span> <span class="n">forward</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DB 테이블</code>에서 회원의 생년월일 정보를 <code class="language-plaintext highlighter-rouge">DATE</code> 타입으로 설정했기 때문에 이 단계에서 생년월일은 어떻게 세팅해서 넣어줘야 하는지 몰라서 좀 헤멨다. 그 동안 <code class="language-plaintext highlighter-rouge">Timestamp</code>만 쓰고 <code class="language-plaintext highlighter-rouge">Date</code>를 쓰는 것이 처음이었기 때문에…😅</li>
  <li>처음엔 <code class="language-plaintext highlighter-rouge">YYYY-DD-MM</code> 형태로 입력되는 데이터에서 ‘-‘을 빼고 숫자만 있는 형태로 <code class="language-plaintext highlighter-rouge">new Date</code> 객체를 생성해서 넣어보기도 하는 등 헤메다가 구글링 후 <code class="language-plaintext highlighter-rouge">Date.valueOf("YYYY-DD-MM")</code> 형태로 넣어주면 된다는 것을 알게 되어서 <code class="language-plaintext highlighter-rouge">request</code> 객체의 <code class="language-plaintext highlighter-rouge">getParameter()</code>를 그대로 넣었다.</li>
  <li><code class="language-plaintext highlighter-rouge">jsp</code> 페이지의 <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> 태그의 <code class="language-plaintext highlighter-rouge">date</code> 타입으로 입력받기 때문에 전달되는 데이터의 형태가 <code class="language-plaintext highlighter-rouge">YYYY-DD-MM</code>였다.</li>
</ul>

<h2 id="4-회원가입-페이지에서-memberjoinaction-클래스-연결">4. 회원가입 페이지에서 MemberJoinAction 클래스 연결</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">join.jsp</code> 페이지에서 폼태그의 <code class="language-plaintext highlighter-rouge">action</code> 부분을 수정한다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h3&gt;</span>회원가입<span class="nt">&lt;/h3&gt;</span>
   <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"join"</span> <span class="na">action=</span><span class="s">"./MemberJoinAction.me"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>아이디 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">id=</span><span class="s">"MOD_TEXTFORM_NameField"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"id"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formRow"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"MOD_TEXTFORM_NameField"</span><span class="nt">&gt;</span>비밀번호 <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">id=</span><span class="s">"MOD_TEXTFORM_NameField"</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"pass"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
   ...
</code></pre></div></div>

<h2 id="5-controller에서-action-클래스-연결하기">5. Controller에서 Action 클래스 연결하기</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MemberFrontController</code> 클래스의 <code class="language-plaintext highlighter-rouge">doProcess()</code> 함수의 가상주소 매핑 부분을 수정한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doProcess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
<span class="o">{</span>
	<span class="c1">// 1. 전달되는 가상주소 계산</span>
	<span class="o">...</span>
        
	<span class="c1">// 2. 가상주소 매핑</span>
	<span class="nc">Action</span> <span class="n">action</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="nc">ActionForward</span> <span class="n">forward</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		
	<span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/main.me"</span><span class="o">)</span> <span class="o">||</span> <span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/join.me"</span><span class="o">)</span> <span class="o">||</span> <span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/login.me"</span><span class="o">))</span>
	<span class="o">{</span>
		<span class="n">forward</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ActionForward</span><span class="o">();</span>

		<span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/main.me"</span><span class="o">))</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 메인페이지 호출"</span><span class="o">);</span>
			<span class="n">forward</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"./main/main.jsp"</span><span class="o">);</span>				
		<span class="o">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/join.me"</span><span class="o">))</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 회원가입 페이지 호출"</span><span class="o">);</span>
			<span class="n">forward</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"./member/join.jsp"</span><span class="o">);</span>				
		<span class="o">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/login.me"</span><span class="o">))</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 로그인 페이지 호출"</span><span class="o">);</span>
			<span class="n">forward</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"./member/login.jsp"</span><span class="o">);</span>				
		<span class="o">}</span>
			
		<span class="n">forward</span><span class="o">.</span><span class="na">setRedirect</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/MemberJoinAction.me"</span><span class="o">))</span>
	<span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : /MemberJoinAction.me 호출"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 이전 페이지 정보를 가져와서 DB 테이블에 저장 후 페이지 이동"</span><span class="o">);</span>
			
		<span class="n">action</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberJoinAction</span><span class="o">();</span> <span class="c1">// 인터페이스를 통해 객체를 생성함으로써 약한결합이 되도록 한다.</span>
			
		<span class="k">try</span> 
		<span class="o">{</span>
			<span class="n">forward</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
		<span class="o">}</span> 
		<span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> 
		<span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
		
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 가상주소 매핑 완료\n"</span><span class="o">);</span>
	<span class="c1">// 2. 가상주소 매핑</span>
        
    <span class="c1">// 3. 페이지 이동</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="6-동작-테스트-결과">6. 동작 테스트 결과!</h2>
<p align="center"><img src="../../assets/images/cafeMemTable.png" /></p>

<ul>
  <li>잘 들어간다!</li>
  <li>그리고 회원가입이 완료되면 로그인 페이지로 이동하는 것까지 잘 구현되었다.<br />
 뿌듯-!😄<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-28</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Project Log" /><category term="Project" /><category term="Cafe" /><category term="Log" /><summary type="html"><![CDATA[개발환경 OpenJDK 8 Eclipse 2021-12 tomcat 8.5]]></summary></entry><entry><title type="html">C++) BOJ 21921. 블로그</title><link href="http://localhost:4000/boj/boj21921-cpp/" rel="alternate" type="text/html" title="C++) BOJ 21921. 블로그" /><published>2022-03-06T00:00:00+09:00</published><updated>2022-03-06T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj21921-cpp</id><content type="html" xml:base="http://localhost:4000/boj/boj21921-cpp/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/21921">https://www.acmicpc.net/problem/21921</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 1 초</li>
  <li>메모리 제한 : 512 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>찬솔이는 블로그를 시작한 지 벌써 N일이 지났다.</p>
  </li>
  <li>
    <p>요즘 바빠서 관리를 못 했다가 방문 기록을 봤더니 벌써 누적 방문 수가 6만을 넘었다.</p>
  </li>
  <li>
    <p>찬솔이는 X일 동안 가장 많이 들어온 방문자 수와 그 기간들을 알고 싶다.</p>
  </li>
  <li>
    <p>찬솔이를 대신해서 X일 동안 가장 많이 들어온 방문자 수와 기간이 몇 개 있는지 구해주자.<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>
    <p>첫째 줄에 블로그를 시작하고 지난 일수 N와 X가 공백으로 구분되어 주어진다.</p>
  </li>
  <li>
    <p>둘째 줄에는 블로그 시작 1일차부터 N일차까지 하루 방문자 수가 공백으로 구분되어 주어진다.<br /><br /></p>
  </li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>
    <p>첫째 줄에 X일 동안 가장 많이 들어온 방문자 수를 출력한다. 만약 최대 방문자 수가 0명이라면 SAD를 출력한다.</p>
  </li>
  <li>
    <p>만약 최대 방문자 수가 0명이 아닌 경우 둘째 줄에 기간이 몇 개 있는지 출력한다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>입력 배열의 처음부터 X일만큼의 합을 구하면서 한 칸씩 뒤로 이동하는데 그 중 합계가 가장 높은 경우와 그 일수들을 따로 저장해 주었다.</li>
  <li>N개 중 X개의 합을 매번 구하면 좀 비효율적이란 생각이 들어 처음에 N 배열의 0번 원소부터 X개의 합을 구한 뒤 그것을 최대값으로 설정한 다음 다른 X개의 합을 구하는 반복문에서는 i가 1부터 시작하면서 i-1번째 원소는 합계에서 빼고 i+(X-1)번째 원소를 더해주며 부분 합계를 구했다.</li>
  <li>그 과정에서 현재 최대값과 같은 값이 나오면 최대 일수를 계산하는 카운트를 증가시키고 현재 최대값보다 큰 값이 나오면 카운트를 1로 초기화한 뒤 최대값을 갱신해 주었다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 20 ms</li>
  <li>메모리 : 2876 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/0030cd127d490d3935f573b1750e5db2.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No21921" /><category term="Sliding Window" /><category term="C++" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/21921 제한 시간 제한 : 1 초 메모리 제한 : 512 MB]]></summary></entry><entry><title type="html">프로젝트) Cafe(웹 사이트) 만들기 2</title><link href="http://localhost:4000/project%20log/cafe-project-02/" rel="alternate" type="text/html" title="프로젝트) Cafe(웹 사이트) 만들기 2" /><published>2022-03-06T00:00:00+09:00</published><updated>2022-03-06T00:00:00+09:00</updated><id>http://localhost:4000/project%20log/cafe-project-02</id><content type="html" xml:base="http://localhost:4000/project%20log/cafe-project-02/"><![CDATA[<h1 id="개발환경">개발환경</h1>
<ul>
  <li>OpenJDK 8</li>
  <li>Eclipse 2021-12</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="시작">시작</h1>
<ul>
  <li>2022.3.4 ~ <br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백앤드 수업 중 중간 과제로 개인 프로젝트를 진행하게 되었다.</li>
  <li>회원가입/로그인/탈퇴 등 기본적인 회원관리 시스템을 가진 웹 사이트를 만드는 것이다. 주어진 기한은 <code class="language-plaintext highlighter-rouge">한 달</code></li>
  <li>나는 <code class="language-plaintext highlighter-rouge">다음 카페</code>를 소규모로 만들어 보기로 했다. 평소 자주 이용하기도 했고 과제의 평가 기준에서 요구하는 기능들을 다 담고 있기도 했기 때문에 이번 기회에 구현해 보면 그동안 배운 것들을 활용하기에 좋을 거 같았다.</li>
  <li>평가 기준에 사이트의 디자인 구현(HTML/CSS 등 프론트엔드)은 포함되지 않기 때문에 본인이 쓰고 싶은 HTML/CSS 템플릿을 구한 뒤 회원 관리 기능을 구현하면 된다.<br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<p align="center"><img src="../../assets/images/e-r-Diagram.png" /></p>
<p><br /></p>

<ul>
  <li>오늘은 좀 더 진행하기 전에 <code class="language-plaintext highlighter-rouge">E-R 다이어그램</code>을 만들면서 <code class="language-plaintext highlighter-rouge">DB 테이블</code>을 정리하고 가는 것이 좋을 거 같아서 내 프로젝트에 필요한 <code class="language-plaintext highlighter-rouge">E-R 다이어그램</code>을 만들었다.</li>
  <li>회원은 게시판에 글과 댓글을 쓰지 않을 수도 있지만 쓴다면 여러 개 쓸 수 있고 게시글과 댓글은 회원이 쓸 때에만 생성될 수 있다. 그리고 댓글 또한 게시글이 없으면 생성될 수 없고 한 게시글에 댓글이 달리지 않을 수도, 여러 개의 댓글이 달릴 수도 있다.</li>
  <li>일단 이 정도로 틀을 잡아놓고 테이블들을 생성했다.</li>
</ul>

<h2 id="1-회원-테이블cafe_members">1. 회원 테이블(cafe_members)</h2>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">cafe_members</span> <span class="p">(</span>
    <span class="n">member_num</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
    <span class="n">id</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">unique</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">pass</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">birth</span> <span class="nb">date</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">age</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">gender</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">address</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">phone</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">email</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span>
    <span class="n">regdate</span> <span class="nb">timestamp</span> <span class="k">not</span> <span class="k">null</span>
<span class="p">);</span>
</code></pre></div></div>

<p align="center"><img src="../../assets/images/memberTable.png" /></p>
<p><br /></p>

<ul>
  <li>member_num : 회원 번호. 1부터 차례대로 증가하며 회원의 고유 식별자로 사용</li>
  <li>id : 회원 아이디. 중복되지 않도록 <code class="language-plaintext highlighter-rouge">unique</code> 조건을 걸어주었다.</li>
  <li>pass : 회원 비밀번호</li>
  <li>name : 회원 이름</li>
  <li>birth : 회원의 생년월일</li>
  <li>age : 회원 나이</li>
  <li>gender : 회원 성별</li>
  <li>address : 회원의 거주지 주소</li>
  <li>phone : 회원 휴대폰 번호</li>
  <li>email : 회원 이메일 주소</li>
  <li>regdate : 회원이 가입한 날짜. <code class="language-plaintext highlighter-rouge">timestamp</code>로 가입하는 당시의 날짜와 시간으로 자동 저장</li>
</ul>

<h2 id="2-게시글post">2. 게시글(post)</h2>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">post</span> <span class="p">(</span>
    <span class="n">num</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
    <span class="n">writer</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">title</span> <span class="nb">longtext</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">content</span> <span class="nb">longtext</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">posted_date</span> <span class="nb">datetime</span> <span class="k">not</span> <span class="k">null</span>
<span class="p">);</span>
</code></pre></div></div>

<p align="center"><img src="../../assets/images/postTable.png" /></p>
<p><br /></p>

<ul>
  <li>num : 게시글 번호. 1부터 차례대로 증가하며 고유 식별자로 사용</li>
  <li>writer : 작성자 아이디</li>
  <li>title : 게시글 제목</li>
  <li>content : 게시글 내용</li>
  <li>posted_date : 최초로 작성된 날짜. YYYY-MM-DD 형식</li>
</ul>

<h2 id="3-댓글comment">3. 댓글(comment)</h2>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="k">comment</span> <span class="p">(</span>
	<span class="n">num</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
    <span class="n">post_num</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
	<span class="n">writer</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">content</span> <span class="nb">longtext</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">commented_date</span> <span class="nb">datetime</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">parent</span> <span class="nb">int</span> <span class="k">default</span> <span class="mi">0</span>
<span class="p">);</span>
</code></pre></div></div>

<p align="center"><img src="../../assets/images/commentTable.png" /></p>
<p><br /></p>

<ul>
  <li>num : 댓글 번호. 1부터 차례대로 증가하며 고유 식별자로 사용</li>
  <li>post_num : 댓글이 등록된 글 번호</li>
  <li>writer : 댓글 작성자 아이디</li>
  <li>content : 댓글 내용</li>
  <li>commented_date : 댓글이 작성된 날짜</li>
  <li>parent : 만약 이 댓글이 대댓글이라면 대댓글을 단 원래 댓글의 댓글 번호. 모든 댓글이 대댓글이 되는 것은 아니기 때문에 디폴트값은 0으로 둔다. 0이라면 상위 댓글을 의미한다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-29</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Project Log" /><category term="Project" /><category term="Cafe" /><category term="Log" /><summary type="html"><![CDATA[개발환경 OpenJDK 8 Eclipse 2021-12 tomcat 8.5]]></summary></entry><entry><title type="html">프로젝트) Cafe(웹 사이트) 만들기 1</title><link href="http://localhost:4000/project%20log/cafe-project-01/" rel="alternate" type="text/html" title="프로젝트) Cafe(웹 사이트) 만들기 1" /><published>2022-03-05T00:00:00+09:00</published><updated>2022-03-05T00:00:00+09:00</updated><id>http://localhost:4000/project%20log/cafe-project-01</id><content type="html" xml:base="http://localhost:4000/project%20log/cafe-project-01/"><![CDATA[<h1 id="개발환경">개발환경</h1>
<ul>
  <li>OpenJDK 8</li>
  <li>Eclipse 2021-12</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="시작">시작</h1>
<ul>
  <li>2022.3.4 ~ <br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백앤드 수업 중 중간 과제로 개인 프로젝트를 진행하게 되었다.</li>
  <li>회원가입/로그인/탈퇴 등 기본적인 회원관리 시스템을 가진 웹 사이트를 만드는 것이다. 주어진 기한은 <code class="language-plaintext highlighter-rouge">한 달</code></li>
  <li>나는 <code class="language-plaintext highlighter-rouge">다음 카페</code>를 소규모로 만들어 보기로 했다. 평소 자주 이용하기도 했고 과제의 평가 기준에서 요구하는 기능들을 다 담고 있기도 했기 때문에 이번 기회에 구현해 보면 그동안 배운 것들을 활용하기에 좋을 거 같았다.</li>
  <li>평가 기준에 사이트의 디자인 구현(HTML/CSS 등 프론트엔드)은 포함되지 않기 때문에 본인이 쓰고 싶은 HTML/CSS 템플릿을 구한 뒤 회원 관리 기능을 구현하면 된다.<br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<p align="center"><img src="../../assets/images/cafeProj01.png" /></p>
<p><br /></p>

<ul>
  <li>그래서 오늘 진행한 것은 무료 템플릿 사이트에서 다운받은 템플릿을 이용해 기본적인 사이트 틀을 만들었다.</li>
  <li>메인 페이지를 만들고 로그인 페이지와 회원가입 페이지 폼을 만들어서 연결시키는 것 까지 했다.<br /><br /></li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;servlet&gt;</span>
    <span class="nt">&lt;servlet-name&gt;</span>CafeFrontController<span class="nt">&lt;/servlet-name&gt;</span>
    <span class="nt">&lt;servlet-class&gt;</span>com.project.cafe.CafeFrontController<span class="nt">&lt;/servlet-class&gt;</span>
  <span class="nt">&lt;/servlet&gt;</span>
  
  <span class="nt">&lt;servlet-mapping&gt;</span>
    <span class="nt">&lt;servlet-name&gt;</span>CafeFrontController<span class="nt">&lt;/servlet-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>*.me<span class="nt">&lt;/url-pattern&gt;</span>
  <span class="nt">&lt;/servlet-mapping&gt;</span>
</code></pre></div></div>

<ul>
  <li>물론 <code class="language-plaintext highlighter-rouge">HTML</code>을 이용해 그냥 연결시키지 않았고 서블릿을 이용해 <code class="language-plaintext highlighter-rouge">Model2 MVC</code> 패턴을 적용시킬 계획이기 때문에 <code class="language-plaintext highlighter-rouge">.xml</code> 페이지에서 서블릿 클래스 매핑을 통해 페이지 경로를 주소창에 노출시키면서 연결하는 것이 아닌, 주소창에는 가상 주소를 보여주도록 하기 위한 틀을 만들었다.</li>
  <li>매핑될 가상주소는 하나로 고정시키는 것이 아닌, 페이지별 용도에 따라 다른 주소를 출력할 수 있도록 <code class="language-plaintext highlighter-rouge">*</code>을 사용해 맨 뒤에 <code class="language-plaintext highlighter-rouge">.me</code>만 붙으면 그 주소를 올바른 것으로 인식하고 대응시킬 수 있도록 했다.<br /><br /></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.RequestDispatcher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CafeFrontController</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span>
<span class="o">{</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doProcess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="c1">// 1. 전달되는 가상주소 계산</span>
		<span class="c1">// 매핑된(.me로 끝나는) 주소를 받아옴</span>
		<span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"requestURI : "</span> <span class="o">+</span> <span class="n">requestURI</span><span class="o">);</span>
		
		<span class="c1">// 매핑된 해당 프로젝트 주소를 구함</span>
		<span class="nc">String</span> <span class="n">ctxPath</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ctxPath : "</span> <span class="o">+</span> <span class="n">ctxPath</span><span class="o">);</span>
		
		<span class="c1">// 매핑된 주소 - 프로젝트 주소 = 계속 바뀔 뒷자리 주소 구함</span>
		<span class="nc">String</span> <span class="n">command</span> <span class="o">=</span> <span class="n">requestURI</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">ctxPath</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"command : "</span> <span class="o">+</span> <span class="n">command</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 가상주소 계산 완료\n"</span><span class="o">);</span>
		<span class="c1">// 1. 전달되는 가상주소 계산</span>
		
		
		<span class="c1">// 2. 가상주소 매핑</span>
		<span class="nc">ActionForward</span> <span class="n">forward</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/main.me"</span><span class="o">))</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 메인페이지 호출"</span><span class="o">);</span>
			
			<span class="n">forward</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ActionForward</span><span class="o">();</span>
			<span class="n">forward</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"./main/main.jsp"</span><span class="o">);</span>
			<span class="n">forward</span><span class="o">.</span><span class="na">setRedirect</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 가상주소 매핑 완료\n"</span><span class="o">);</span>
		<span class="c1">// 2. 가상주소 매핑</span>
		
		
		<span class="c1">// 3. 페이지 이동</span>
		<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">forward</span><span class="o">)</span> <span class="c1">// 페이지 이동정보가 있을 때</span>
		<span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">forward</span><span class="o">.</span><span class="na">isRedirect</span><span class="o">())</span>
			<span class="o">{</span>
				<span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">forward</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>
			<span class="o">}</span>
			<span class="k">else</span> 
			<span class="o">{</span>
				<span class="nc">RequestDispatcher</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">forward</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>
				<span class="n">dis</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
			<span class="o">}</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C : 페이지 이동 완료"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="c1">// 3. 페이지 이동</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="n">doProcess</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> 
	<span class="o">{</span>
		<span class="n">doProcess</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이런 식으로 서블릿 클래스를 만든 다음<br /><br /></li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span><span class="na">language=</span><span class="s">"java"</span><span class="na"> contentType=</span><span class="s">"text/html; charset=UTF-8"</span><span class="na">
    pageEncoding=</span><span class="s">"UTF-8"</span><span class="nt">%&gt;</span>

<span class="nt">&lt;%</span>
  <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"./main.me"</span><span class="o">);</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>실제 실행시킬 페이지인 <code class="language-plaintext highlighter-rouge">index.jsp</code>에서는 매핑된 서블릿으로 연결시켜서 실행되도록 했다.<br /><br /></li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span><span class="na">language=</span><span class="s">"java"</span><span class="na"> contentType=</span><span class="s">"text/html; charset=UTF-8"</span><span class="na">
    pageEncoding=</span><span class="s">"UTF-8"</span><span class="nt">%&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- Start Head --&gt;</span>
  <span class="nt">&lt;jsp:include </span><span class="na">page=</span><span class="s">"../inc/top.jsp"</span><span class="nt">&gt;&lt;/jsp:include&gt;</span>
<span class="c">&lt;!-- End Head --&gt;</span>

<span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">"modern"</span><span class="nt">&gt;</span>

<span class="c">&lt;!--
START MODULE AREA 2: Menu 1
--&gt;</span>
  <span class="nt">&lt;jsp:include </span><span class="na">page=</span><span class="s">"../inc/subTop.jsp"</span><span class="nt">&gt;&lt;/jsp:include&gt;</span>
<span class="c">&lt;!--
END MODULE AREA 2: Menu 1
--&gt;</span>
</code></pre></div></div>

<ul>
  <li>그리고 이런 식으로 헤더와 푸터 부분은 다른 <code class="language-plaintext highlighter-rouge">jsp</code> 페이지로 분리해서 새로운 페이지가 추가되어도 헤더와 푸터 페이지를 액션 태그를 써서 인클루드만 해 주고 헤더와 푸터 부분에서 수정 사항이 생기면 <code class="language-plaintext highlighter-rouge">top.jsp</code>, <code class="language-plaintext highlighter-rouge">bottom.jsp</code> 페이지만 수정하면 되도록 만들었다.</li>
  <li>이렇게 만들어놓고 나니까 헤더 부분에서 수정할 점이 생겨도 페이지 하나만 수정하면 되니까 정말 편하다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-30</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Project Log" /><category term="Project" /><category term="Cafe" /><category term="Log" /><summary type="html"><![CDATA[개발환경 OpenJDK 8 Eclipse 2021-12 tomcat 8.5]]></summary></entry></feed>