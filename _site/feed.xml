<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-01T13:58:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">JSP란?</title><link href="http://localhost:4000/jsp/What-is-JSP/" rel="alternate" type="text/html" title="JSP란?" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/What-is-JSP</id><content type="html" xml:base="http://localhost:4000/jsp/What-is-JSP/"><![CDATA[<h1 id="-jspjava-server-page란">👀 JSP(Java Server Page)란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Java</code>를 이용하여 <code class="language-plaintext highlighter-rouge">동적인 웹 페이지</code>를 만들기 위해 Sun Microsystems사가 개발한 기술<br /><br /></li>
</ul>

<h1 id="jsp의-특징">JSP의 특징</h1>
<h2 id="1-강력한-이식성">1. 강력한 이식성</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">자바기반</code>의 언어로 어떤 <code class="language-plaintext highlighter-rouge">JSP 컨테이너</code>에서도 사용이 가능하므로 한 번 작성한 코드를 별다른 수정 없이 다른 플랫폼으로 이식이 가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">모듈화</code>와 <code class="language-plaintext highlighter-rouge">모듈의 재사용성</code>이 좋다.</li>
</ul>

<h2 id="2-서버-자원의-효율적인-사용">2. 서버 자원의 효율적인 사용</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">스레드(Thread)</code> 기반의 아키텍처 사용으로 불필요한 자원 낭비를 감소시켰다.</li>
</ul>

<h2 id="3-간편한-mvc-패턴디자인-패턴">3. 간편한 MVC 패턴(디자인 패턴)</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MVC 패턴</code>을 <code class="language-plaintext highlighter-rouge">JSP(View)</code>와 <code class="language-plaintext highlighter-rouge">자바빈즈(Model)</code>, <code class="language-plaintext highlighter-rouge">서블릿(Controller)</code>을 이용해 쉽게 구현할 수 있다.</li>
</ul>

<h3 id="-mvc-패턴">🔸 MVC 패턴</h3>
<ul>
  <li>사용자에게 보여지는 화면인 <code class="language-plaintext highlighter-rouge">View</code> 부분과 실제 비즈니스 로직이 들어가는 <code class="language-plaintext highlighter-rouge">Model</code> 부분 그리고 <code class="language-plaintext highlighter-rouge">View</code>와 <code class="language-plaintext highlighter-rouge">Model</code>을 연결시켜주는 <code class="language-plaintext highlighter-rouge">Controller</code> 부분으로 구성</li>
  <li>최근에 중대형 프로젝트에서 효과적이라 평가되어 많이 사용되고 있다.</li>
</ul>

<h3 id="-디자인-패턴">🔸 디자인 패턴</h3>
<ul>
  <li>프로젝트를 개발함에 있어서 특정한 문제가 주어졌을 때 그 문제를 해결하기 위한 방법을 설명해 놓은 일종의 지침</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP(Java Server Page)란? Java를 이용하여 동적인 웹 페이지를 만들기 위해 Sun Microsystems사가 개발한 기술]]></summary></entry><entry><title type="html">JavaScript 기본 문법</title><link href="http://localhost:4000/javascript/JavaScript/" rel="alternate" type="text/html" title="JavaScript 기본 문법" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/javascript/JavaScript</id><content type="html" xml:base="http://localhost:4000/javascript/JavaScript/"><![CDATA[<h1 id="자바스크립트란">자바스크립트란?</h1>
<ul>
  <li>웹 페이지에 방문했을 때 사용자의 동작(이벤트)에 따른 처리를 하는 언어</li>
  <li><code class="language-plaintext highlighter-rouge">인터프리터 언어</code>로 작성된 코드를 위에서 아래로 순차적으로 실행한다.</li>
  <li><code class="language-plaintext highlighter-rouge">컴파일 언어</code>와 다른 점은 일단 실행을 하고 에러가 발생하기 전 까지의 코드만 실행한다.</li>
  <li>객체 기반 언어이다.</li>
  <li>오픈소스 언어</li>
  <li>다양한 라이브러리(API) 사용 가능
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Jquery</code> 주로 사용 - <code class="language-plaintext highlighter-rouge">Ajax</code>, <code class="language-plaintext highlighter-rouge">Json</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">HTML5</code>(웹표준) API 기반의 언어<br /><br /><br /></li>
</ul>

<h1 id="변수-선언">변수 선언</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> 키워드를 이용해 선언한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>일반적인 프로그래밍 언어와 다르게 자료형별로 구분해서 선언하지 않는다. 변수 선언과 동시에 초기화하는 내용물에 따라서 자바스트립트가 알아서 자료형을 지정한다.</li>
  <li>편한 듯 하면서도 원래 하던 언어가 있어서 그런지 무의식적으로 int num … 과 같이 타이핑하게 될 때가 많다.</li>
</ul>

<h2 id="-var">🔸 var</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> 키워드는 같은 이름으로 중복해서 선언하고 값을 넣는 것이 가능하다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// james</span>

<span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">lily</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// lily</span>
</code></pre></div></div>

<ul>
  <li>컴파일 언어를 하다 온 입장에서는 다소 이해가 되지 않지만 <code class="language-plaintext highlighter-rouge">자바스크립트</code>에서의 <code class="language-plaintext highlighter-rouge">var</code> 키워드는 이런 흐름이 가능하다.</li>
  <li>변수가 많아지면 중간에 꼬일 가능성이 아주 많아 보이는 속성이다. 그래서 이것을 보완하기 위해 나온 것이 <code class="language-plaintext highlighter-rouge">let</code> 키워드이다.</li>
</ul>

<h2 id="-let">🔸 let</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code> 키워드도 <code class="language-plaintext highlighter-rouge">var</code>처럼 변수를 선언하는 키워드지만 약간 속성이 다르다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// james</span>

<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">lily</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> 
<span class="c1">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code> 키워드를 사용하니까 컴파일 언어와 같은 흐름을 보인다.</li>
</ul>

<h2 id="-const">🔸 const</h2>
<ul>
  <li>컴파일 언어에서와 마찬가지로 상수 선언 키워드이다.</li>
  <li><code class="language-plaintext highlighter-rouge">const</code> 다음에 자료형은 쓸 필요 없이 바로 변수 이름을 선언하고 초기화하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>
<p><br /><br /></p>

<h1 id="연산자">연산자</h1>
<ul>
  <li>연산자의 사용은 동일하지만 자바스크립트에는 <code class="language-plaintext highlighter-rouge">===</code>과 <code class="language-plaintext highlighter-rouge">!==</code>이라는 연산자가 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">데이터값</code>과 <code class="language-plaintext highlighter-rouge">자료형</code>이 <strong>모두 동일</strong>한지 확인하는 연산자이다.</li>
  <li><code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">!=</code> 연산자들은 단순히 값만 확인하고 자료형이 같은지는 확인하지 않는다.
    <ul>
      <li>그래서 문자 100과 숫자 100을 <code class="language-plaintext highlighter-rouge">==</code>을 이용해서 값이 같은지 비교하면 <code class="language-plaintext highlighter-rouge">true</code>를 리턴한다.</li>
      <li><code class="language-plaintext highlighter-rouge">===</code> 연산자 사용시 <code class="language-plaintext highlighter-rouge">false</code> 리턴</li>
    </ul>
  </li>
</ul>

<h2 id="-연산자-우선순위">🔸 연산자 우선순위<br /></h2>
<ol>
  <li>()<br /></li>
  <li>단항연산자(++, –, !)<br /></li>
  <li>산술연산자(+, -, *, /, %)<br /></li>
  <li>비교연산자(&gt;, &lt;, &gt;=, &lt;=, ==, !=, ===, !==)<br /></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>논리연산자(&amp;&amp;,</td>
          <td> </td>
          <td>)<br /></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>복합대입연산자(=, +=, -=, *=, /=, %=)<br /><br /></li>
</ol>

<h1 id="함수">함수</h1>
<ul>
  <li>함수 또한 자료형을 구분하지 않고 <code class="language-plaintext highlighter-rouge">function</code> 키워드 하나만 쓴다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">함수명</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nx">실행문</span><span class="p">;</span>
<span class="p">}</span>
<span class="nl">호출법</span> <span class="p">:</span> <span class="nx">함수명</span><span class="p">();</span>
</code></pre></div></div>
<p><br /><br /></p>

<ul>
  <li>익명함수도 사용 가능하다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">변수</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
  <span class="nx">실행문</span><span class="p">;</span>
<span class="p">}</span>
<span class="nl">호출법</span> <span class="p">:</span> <span class="nx">참조</span> <span class="nx">변수명</span><span class="p">();</span>
</code></pre></div>    </div>
    <p><br /><br /></p>
  </li>
</ul>

<h1 id="객체">객체</h1>
<ul>
  <li>내 눈앞에 보이는 모든 대상</li>
</ul>

<h3 id="-객체-생성은-new-키워드를-이용해서-생성한다">🔸 객체 생성은 new 키워드를 이용해서 생성한다.</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">참조변수</span><span class="p">(</span><span class="nx">레퍼런스</span><span class="p">)</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</code></pre></div></div>
<p><br /><br /></p>

<h2 id="1-내장객체">1) 내장객체</h2>
<ul>
  <li>자바스크립트 안에 포함된 객체
    <ul>
      <li><code class="language-plaintext highlighter-rouge">문자(String)</code>, <code class="language-plaintext highlighter-rouge">날짜(Date)</code>, <code class="language-plaintext highlighter-rouge">수학(Math)</code>, <code class="language-plaintext highlighter-rouge">숫자(Number)</code>, <code class="language-plaintext highlighter-rouge">배열(Array)</code>, …</li>
    </ul>
  </li>
</ul>

<h3 id="-날짜date객체">🔸 날짜(Date)객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 2022년 1월 1일</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">자바스크립트</code>에서의 <code class="language-plaintext highlighter-rouge">날짜객체</code>에서 좀 희안한 점이라면 월(Month)이 실제 숫자보다 <strong>1 적은 형태</strong>로 표현된다는 것이다. <code class="language-plaintext highlighter-rouge">new Date(2022,1,1);</code> 이라 쓰면 2022년 2월 1일이다.</li>
</ul>

<h3 id="-배열array객체">🔸 배열(Array)객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 다 가능</span>
<span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> 
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">자바스크립트</code>에서 <code class="language-plaintext highlighter-rouge">배열</code>은 <code class="language-plaintext highlighter-rouge">배열객체</code>를 통해 생성 할 수도 있고 컴파일 언어와 비슷하게 <code class="language-plaintext highlighter-rouge">[]를 사용해서 초기화</code> 하는 형태로 선언할 수도 있다.</li>
  <li>또 특이한 점이라면 <strong>하나의 배열에 서로 다른 자료형을 가진 값을 담을 수 있다</strong>는 것이다.</li>
</ul>

<h2 id="2-브라우저-객체-모델bom">2) 브라우저 객체 모델(BOM)</h2>
<ul>
  <li>웹 브라우저에 포함되어 브라우저를 표현하는 객체</li>
  <li>계층형 구조로 되어 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         <span class="o">/</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">screen</span><span class="p">,</span> <span class="p">...</span>
<span class="nb">window</span> <span class="o">-</span>   <span class="nx">location</span><span class="p">,</span> <span class="nx">history</span>
         <span class="err">\</span> <span class="nb">navigator</span>
</code></pre></div></div>

<ul>
  <li>알림창을 출력할 때
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">메시지 출력 메서드</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>를 많이 쓴다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
<span class="kd">function</span> <span class="nx">myOpen</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">test1.html</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">test1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">width=300, height=200, top=150, left=500</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"팝업창 열기"</span> <span class="na">onclick=</span><span class="s">"myOpen();"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li>위 처럼 <code class="language-plaintext highlighter-rouge">HTML</code> 태그와 함께 쓸 수 있다.</li>
</ul>

<h3 id="-location-객체">🔸 location 객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test1.html</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// test1.html로 이동</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span> <span class="c1">// 페이지 새로고침</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">test2.html</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 현재 페이지를 test2.html로 변경</span>
</code></pre></div></div>

<ul>
  <li>주소창과 관련된 기능을 가지고 있다.</li>
  <li>특정 페이지로 이동하거나 현재 페이지를 다시 로드하는 등의 동작을 수행할 수 있다.</li>
</ul>

<h3 id="-history-객체">🔸 history 객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">history</span><span class="p">.</span><span class="nx">back</span><span class="p">();</span> <span class="c1">// 뒤로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">forward</span><span class="p">();</span> <span class="c1">// 앞으로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="o">-</span><span class="nx">숫자</span><span class="p">);</span> <span class="c1">// 숫자만큼 뒤로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="nx">숫자</span><span class="p">);</span> <span class="c1">// 숫자만큼 앞으로 가기</span>
</code></pre></div></div>

<ul>
  <li>페이지의 방문기록에 따른 동작을 수행할 수 있다.</li>
</ul>

<h3 id="-navigator-객체">🔸 navigator 객체</h3>
<ul>
  <li>방문자(클라이언트)의 브라우저 정보 및 운영체제정보 확인 가능</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<ul>
  <li>위와 같이 쓰면 팝업창에서 사용자의 브라우저 정보와 운영체제정보를 볼 수 있다.</li>
</ul>

<h2 id="3-문서-객체-모델dom">3) 문서 객체 모델(DOM)</h2>
<ul>
  <li>HTML문서 구조(객체)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">src</span><span class="p">;</span> <span class="c1">// 현재 페이지에 있는 이미지들 중 첫번째 소스에 접근</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">폼태그명</span><span class="p">.</span><span class="nx">속성</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HTML</code>의 <code class="language-plaintext highlighter-rouge">폼태그</code>와 결합해 사용할 수 있다.</li>
</ul>

<h3 id="-폼태그-form">🔸 폼태그 form</h3>
<ul>
  <li>사용자의 정보를 입력받아서 특정 페이지(action)로 정보를 전달하는(submit) 태그</li>
  <li>전달 방식에서는 <code class="language-plaintext highlighter-rouge">Get</code>방식과 <code class="language-plaintext highlighter-rouge">Post</code>방식이 있다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>회원정보 가입하기<span class="nt">&lt;/legend&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"itwill.jsp"</span> <span class="na">name=</span><span class="s">"fr2"</span> <span class="na">method=</span><span class="s">"get"</span> <span class="na">onsubmit=</span><span class="s">"return fun8();"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label&gt;</span>아이디 : <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">value=</span><span class="s">""</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
        비밀번호 : <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"pw"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span> 
        주민번호 : <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"ju1"</span> <span class="na">onkeyup=</span><span class="s">"check1();"</span> <span class="na">maxlength=</span><span class="s">"6"</span><span class="nt">&gt;</span> - <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"ju2"</span> <span class="na">maxlength=</span><span class="s">"7"</span> <span class="na">onkeyup=</span><span class="s">"check2();"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;br&gt;</span> 메세지 :
        <span class="nt">&lt;textarea</span> <span class="na">rows=</span><span class="s">"5"</span> <span class="na">cols=</span><span class="s">"10"</span> <span class="na">name=</span><span class="s">"msg"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
        <span class="nt">&lt;br&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"회원 가입하기"</span> <span class="na">onsubmit=</span><span class="s">"return fun8();"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"속성 확인 버튼"</span> <span class="na">onclick=</span><span class="s">"fun5()"</span><span class="nt">&gt;</span> 
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"속성 변경 버튼"</span> <span class="na">onclick=</span><span class="s">"fun6()"</span><span class="nt">&gt;</span> 
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"데이터 확인 버튼"</span> <span class="na">onclick=</span><span class="s">"fun7()"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/fieldset&gt;</span>
</code></pre></div></div>

<ul>
  <li>위와 같이 사용 가능하다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JavaScript" /><category term="JSP" /><category term="JavaScript" /><summary type="html"><![CDATA[자바스크립트란? 웹 페이지에 방문했을 때 사용자의 동작(이벤트)에 따른 처리를 하는 언어 인터프리터 언어로 작성된 코드를 위에서 아래로 순차적으로 실행한다. 컴파일 언어와 다른 점은 일단 실행을 하고 에러가 발생하기 전 까지의 코드만 실행한다. 객체 기반 언어이다. 오픈소스 언어 다양한 라이브러리(API) 사용 가능 Jquery 주로 사용 - Ajax, Json HTML5(웹표준) API 기반의 언어]]></summary></entry><entry><title type="html">JSP 스크립트 요소</title><link href="http://localhost:4000/jsp/JSP-script-elements/" rel="alternate" type="text/html" title="JSP 스크립트 요소" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-script-elements</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-script-elements/"><![CDATA[<h1 id="-jsp-스크립트-요소">👀 JSP 스크립트 요소</h1>
<h2 id="1-선언문">1. 선언문</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%!</span>
    <span class="c1">// 멤버변수와 메서드 선언</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>멤버변수와 메서드를 선언하기 위한 영역</li>
  <li>클래스에서 멤버변수와 메서드를 선언한 것과 동일한 결과로 같은 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지 어느 위치에서든 참조가 가능하다.</li>
</ul>

<h2 id="2-스크립틀릿scriptlet">2. 스크립틀릿(Scriptlet)</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span> <span class="n">문장1</span><span class="o">;</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%</span>
    <span class="n">문장2</span><span class="o">;</span> <span class="n">문장3</span><span class="o">;</span> <span class="n">문장4</span><span class="o">;</span> <span class="o">...</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 코드를 작성하는 영역</li>
  <li>서블릿 코드의 작성법이 다소 어려워서 이것을 보완하기 위해 만들어진 방식</li>
  <li>스크립틀릿 영역에서 선언되는 변수들은 지역변수로 인식된다.</li>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 파일이 실행되면 웹 컨테이너에 의해 <code class="language-plaintext highlighter-rouge">JSP</code> 파일이 파싱되어 서블릿 클래스로 변환된 자바 소스 파일과 클래스 자바 파일이 서버에 저장된다.</li>
</ul>

<h2 id="3-표현식expression">3. 표현식(Expression)</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%=</span><span class="n">변수</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%=</span><span class="n">리턴값이</span> <span class="n">있는</span> <span class="n">메소드</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%=</span><span class="n">수식</span><span class="o">(</span><span class="n">변수</span> <span class="n">또는</span> <span class="n">리턴값이</span> <span class="n">있는</span> <span class="n">메소드를</span> <span class="n">포함할</span> <span class="n">수</span> <span class="n">있음</span><span class="o">)</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>선언문, 스크립틀릿에 생성한 변수, 메소드의 리턴값을 스크립틀릿 태그 외부에서 출력하기 위해 사용</li>
  <li>하나의 표현식 태그 내의 구문 전체가 <code class="language-plaintext highlighter-rouge">print()</code> 메소드의 괄호 안에 통채로 들어가기 때문에 표현식 태그 내부에서는 <code class="language-plaintext highlighter-rouge">세미콜론(;)</code>을 사용해서는 안된다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP 스크립트 요소 1. 선언문]]></summary></entry><entry><title type="html">JSP 지시어(Directive)</title><link href="http://localhost:4000/jsp/JSP-directive/" rel="alternate" type="text/html" title="JSP 지시어(Directive)" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-directive</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-directive/"><![CDATA[<h1 id="-jsp-지시어란directive">👀 JSP 지시어란?(Directive)</h1>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span><span class="err">@</span> <span class="o">...</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 파일 내에서 <code class="language-plaintext highlighter-rouge">JSP</code>를 실행할 컨테이너에서 해당 페이지를 어떻게 처리할 것인가에 대한 설정 정보들을 지정해주는 데 사용</li>
  <li><code class="language-plaintext highlighter-rouge">page</code> 지시어, <code class="language-plaintext highlighter-rouge">include</code> 지시어, <code class="language-plaintext highlighter-rouge">taglib</code> 지시어 3가지로 나누어진다.</li>
</ul>

<h2 id="1-page-지시어">1. page 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span>속성1="값1" 속성2="값2" 속성3="값3"... <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 대한 속성을 지정하는 지시어</li>
  <li>속성에는 스크립트 언어, import할 패키지/클래스, 세션 사용 여부, 에러 페이지 등 12개의 설정 정보를 지정해 사용할 수 있다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>사용법</th>
      <th>기본값</th>
      <th>설명</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>language</td>
      <td>language=”java”</td>
      <td>java</td>
      <td>스크립트 요소에서 사용할 언어 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>extends</td>
      <td>extends=”클래스명”</td>
      <td>없음</td>
      <td>상속받을 클래스를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>import</td>
      <td>import=”패키지.클래스명”</td>
      <td>없음</td>
      <td>import할 패키지.클래스 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>session</td>
      <td>session=”true”</td>
      <td>true</td>
      <td>HttpSession 사용 여부를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>buffer</td>
      <td>buffer=”16kb”</td>
      <td>8kb</td>
      <td>JSP 페이지의 출력 버퍼 크기를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>autoFlush</td>
      <td>autoFlush=”true”</td>
      <td>true</td>
      <td>출력 버퍼가 다 찼을 경우 처리 방법을 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>isThreadSafe</td>
      <td>isThreadSafe=”true”</td>
      <td>true</td>
      <td>다중 스레드의 동시 실행 여부를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>info</td>
      <td>info=”페이지 설명”</td>
      <td>없음</td>
      <td>페이지 설명</td>
      <td> </td>
    </tr>
    <tr>
      <td>errorPage</td>
      <td>errorPage=”에러 페이지.jsp”</td>
      <td>없음</td>
      <td>에러 페이지로 사용할 페이지를 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>contentType</td>
      <td>contentType=”text/html”</td>
      <td>text/html;charset=ISO-8859-1</td>
      <td>JSP 페이지가 생성할 문서의 타입을 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>isErrorPage</td>
      <td>isErrorPage=”false”</td>
      <td>false</td>
      <td>현재 페이지를 에러 페이지로 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>pageEncoding</td>
      <td>pageEncoding=”euc-kr”</td>
      <td>ISO-8859-1</td>
      <td>현재 페이지의 문자 인코딩 타입 설정</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>각각의 속성을 하나의 <code class="language-plaintext highlighter-rouge">page 지시어</code>에 한 번에 지정할 수도 있으며 여러 개의 <code class="language-plaintext highlighter-rouge">page 지시어</code>에 나누어 지정할 수도 있다.</li>
  <li>하지만 <code class="language-plaintext highlighter-rouge">import</code> 속성을 제외한 나머지 속성은 하나의 페이지에서 오직 한 번씩만 지정할 수 있다.<br /><br /></li>
</ul>

<h2 id="2-include-지시어">2. include 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ include </span><span class="na">file=</span><span class="s">"header.jsp"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>특정한 <code class="language-plaintext highlighter-rouge">JSP</code> 파일 또는 <code class="language-plaintext highlighter-rouge">HTML</code> 파일을 해당 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 삽입할 수 있도록 하는 기능을 제공한다.</li>
  <li><code class="language-plaintext highlighter-rouge">include</code>되는 <code class="language-plaintext highlighter-rouge">JSP</code> 코드 자체가 해당 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 복사되어 더해지므로 서블릿 컴파일 과정은 <code class="language-plaintext highlighter-rouge">include</code> 되는 페이지의 수가 아무리 많아도 단 한 번만 이루어지게 된다.</li>
  <li>사용되는 공통 변수값들을 추가할 때 주로 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">include</code> 지시어는 중첩 사용이 가능하기 때문에 <code class="language-plaintext highlighter-rouge">include</code>되는 파일 안에서 또 다른 파일을 <code class="language-plaintext highlighter-rouge">include</code>하여도 문제없이 동작한다.<br /><br /></li>
</ul>

<h2 id="3-taglib-지시어">3. taglib 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ taglib </span><span class="na">url=</span><span class="s">"http://taglib.com/sampleURI"</span><span class="na"> prefix=</span><span class="s">"samplePrefix"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSTL(JSP Standard Tag Library)이나 커스텀 태그 등 태그 라이브러리를 </code>JSP`에서 사용할 때 접두사를 지정하기 위해 사용된다.</li>
  <li><code class="language-plaintext highlighter-rouge">uri</code> 속성과 <code class="language-plaintext highlighter-rouge">prefix</code> 속성으로 이루어진다.</li>
</ul>

<h3 id="-uri-속성">🔸 uri 속성</h3>
<ul>
  <li>태그 라이브러리에서 정의한 태그와 속성 저보를 저장한 <code class="language-plaintext highlighter-rouge">TLD(Tag Library Descriptor)</code> 파일이 존재하는 위치 지정</li>
</ul>

<h3 id="-prefix-속성">🔸 prefix 속성</h3>
<ul>
  <li>사용할 커스텀 태그의 네임 스페이스(Name Space)를 지정</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP 지시어란?(Directive)]]></summary></entry><entry><title type="html">JSP 사용</title><link href="http://localhost:4000/jsp/use-JSP/" rel="alternate" type="text/html" title="JSP 사용" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/use-JSP</id><content type="html" xml:base="http://localhost:4000/jsp/use-JSP/"><![CDATA[<h1 id="-jsp-사용">👀 JSP 사용</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">HTML</code> 태그와 <code class="language-plaintext highlighter-rouge">Java</code> 코드를 함께 사용한다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>Insert title here<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;</span><span class="err">%</span>
      <span class="err">//</span> <span class="na">스크립틀릿</span>
  <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HTML</code> <code class="language-plaintext highlighter-rouge">body</code> 태그 안에서 스크립틀릿을 쓴 다음에 스크립틀릿의 범위 내에 코드를 작성한다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>자바코드로 테이블 생성<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">"1"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>번호<span class="nt">&lt;/td&gt;&lt;td&gt;</span>이름<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;</span><span class="err">%</span>
        <span class="na">for</span> <span class="err">(</span><span class="na">int</span> <span class="na">i = </span><span class="s">1;</span> <span class="err">6</span> <span class="nt">&gt;</span> i; i++)
        {
            %&gt;
            <span class="nt">&lt;tr&gt;</span>
                <span class="nt">&lt;td&gt;&lt;</span><span class="err">%=</span><span class="na">i</span> <span class="err">%</span><span class="nt">&gt;&lt;/td&gt;&lt;td&gt;</span>학생<span class="nt">&lt;</span><span class="err">%=</span><span class="na">i</span> <span class="err">%</span><span class="nt">&gt;&lt;/td&gt;</span>
            <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;</span><span class="err">%</span>
        <span class="err">}</span>
    <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<ul>
  <li>위와 같이 자바 코드 사이에 <code class="language-plaintext highlighter-rouge">스크립틀릿</code>이 끝나는 표시(<code class="language-plaintext highlighter-rouge">%&gt;</code>)를 하고 <code class="language-plaintext highlighter-rouge">HTML</code> 태그를 쓴 다음에 <code class="language-plaintext highlighter-rouge">&lt;%= %&gt;</code>를 이용해 자바 코드의 지역 변수를 출력하는 것이 가능하다.(신기…)</li>
</ul>

<h2 id="-jsp-주석">🔸 JSP 주석</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;%-- --%&gt;</span> (웹페이지 개발자 도구창에서 나타나지 않기 때문에 보안상 이것을 쓰는 것이 더 좋다)
// 자바 스타일도 사용 가능
</code></pre></div></div>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP 사용 HTML 태그와 Java 코드를 함께 사용한다.]]></summary></entry><entry><title type="html">DB 구동 및 접속</title><link href="http://localhost:4000/database/DB-start-conn/" rel="alternate" type="text/html" title="DB 구동 및 접속" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/database/DB-start-conn</id><content type="html" xml:base="http://localhost:4000/database/DB-start-conn/"><![CDATA[<h1 id="-db-구동-및-접속">🎬 DB 구동 및 접속<br /></h1>

<h2 id="1-linux-부팅-및-터미널-실행">1. Linux 부팅 및 터미널 실행</h2>
<ul>
  <li>Windows에서 가상 PC를 실행한 뒤 Linux 부팅 후 로그인한다.</li>
  <li>Linux 부팅이 완료되면 <strong>마우스 우클릭 - 터미널 열기</strong></li>
</ul>

<h2 id="2-listener-시작">2. Listener 시작</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsnrctl start
</code></pre></div></div>
<ul>
  <li>Listener를 시작한다.</li>
  <li>Listener는 네트워크를 이용하여 클라이언트에서 오라클 서버로 연결하기 위한 오라클 네트워크 관리자이다.</li>
  <li>리스너를 시작하지 않아도 DB 구동엔 문제가 없지만 네트워크를 통한 연결은 모두 리스너가 담당하기 때문에 리스너를 시작하지 않으면 DB에 접속하고자 하는 클라이언트들이 접속할 수 없다.</li>
  <li>따라서 터미널이 실행되면 가장 먼저 리스너를 시작한 후 다음 프로세스를 진행한다.<br /><br /></li>
</ul>

<h2 id="3-sqlplus-실행">3. SqlPlus 실행</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlplus /nolog
</code></pre></div></div>

<h2 id="4-database-접속">4. Database 접속</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conn 아이디/비밀번호 as sysdba(권한)
</code></pre></div></div>
<h3 id="-db-user">🔸 DB User</h3>
<ul>
  <li>sysdba : dba + DB 생성 + DB 시작/종료 권한</li>
  <li>system : dba 권한</li>
  <li>hr : Object(테이블, 뷰, 시퀀스 등) 생성 및 운영 권한<br /><br /></li>
</ul>

<h2 id="5-database-시작">5. Database 시작</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; startup
</code></pre></div></div>

<h2 id="6-hr-사용자로-db-login">6. HR 사용자로 DB Login</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; conn 아이디/비밀번호
</code></pre></div></div>

<h2 id="7-사용자-확인">7. 사용자 확인</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; show user
</code></pre></div></div>
<ul>
  <li>HR 사용자로 최종 로그인 되었는지 확인한다.</li>
</ul>

<h3 id="-user-비밀번호-변경-방법">🔸 User 비밀번호 변경 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; alter user 아이디
     identified by 새 비밀번호;
</code></pre></div></div>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><summary type="html"><![CDATA[🎬 DB 구동 및 접속]]></summary></entry><entry><title type="html">HTTP 프로토콜(HyperText Transfer Protocol)</title><link href="http://localhost:4000/jsp/JSP-http-protocol/" rel="alternate" type="text/html" title="HTTP 프로토콜(HyperText Transfer Protocol)" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-http-protocol</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-http-protocol/"><![CDATA[<h1 id="-http-프로토콜이란">🎬 HTTP 프로토콜이란?</h1>
<ul>
  <li>실제 사용자와 연결된 최상위 계층의 프로토콜로 가장 대표적인 웹브라우저의 통신에 관한 프로토콜<br /><br /></li>
</ul>

<h2 id="-프로토콜protocol">🔸 프로토콜(Protocol)</h2>
<ul>
  <li>네트워크상에서 데이터를 주고 받는 규칙</li>
  <li>컴퓨터 상호간의 대화에 필요한 통신 규약<br /><br /><br /></li>
</ul>

<h1 id="1-http-프로토콜의-구조">1. HTTP 프로토콜의 구조</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">요청(Request)</code>과 <code class="language-plaintext highlighter-rouge">응답(Response)</code> 형태로 이루어졌다.</li>
  <li>사용자가 웹 페이지의 링크를 클릭하면 브라우저는 <code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜의 요청 형태로 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지를 작성하여 웹 서버에 전송한다.</li>
  <li>웹 서버에서는 지금 받은 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지가 <code class="language-plaintext highlighter-rouge">요청(Request)</code> 메시지임을 판단하고 그 데이터를 분석해서 <code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜의 <code class="language-plaintext highlighter-rouge">응답(Response)</code> 형태로 메시지를 작성하여 브라우저로 보내게 되면 브라우저는 메시지를 받아서 사용자의 화면에 표시하게 된다.<br /><br />
<img src="../../assets/images/httpMsgSturcture.png" alt="httpMsgSturcture" /><br /><br /></li>
  <li>각 <code class="language-plaintext highlighter-rouge">HTTP</code> 메시지는 지금 작성 된 메시지가 요청인지, 응답인지와 요청 URL 등 기본적인 정보가 담겨있는 시작 라인과 수행 날짜, 서버 정보, 브라우저 버전 등 부가적인 정보를 담는 헤더 그리고 요청이나 응답에 필요한 내용을 담고 있는 본문(Body)으로 구성된다.<br /><br /><br /></li>
</ul>

<h1 id="2-http-요청request-메시지">2. HTTP 요청(Request) 메시지</h1>
<ul>
  <li>기본적으로 <code class="language-plaintext highlighter-rouge">HTTP 메소드(Method)</code>와 접근할 주소(URL) 정보 그리고 서버에 전달할 데이터인 <code class="language-plaintext highlighter-rouge">폼 파라미터</code>로 구성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">HTTP 메소드(Method)</code>는 클라이언트가 웹 서버가 해야 할 행동을 정해주는 정보로 <code class="language-plaintext highlighter-rouge">GET 메소드</code>와 <code class="language-plaintext highlighter-rouge">POST 메소드</code>가 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">GET 메소드</code>를 사용하는 요청 메시지를 <code class="language-plaintext highlighter-rouge">GET 방식의 요청</code>, <code class="language-plaintext highlighter-rouge">POST 메소드</code>를 사용하는 요청 메시지를 <code class="language-plaintext highlighter-rouge">POST 방식의 요청</code>이라고 한다.<br /><br /></li>
</ul>

<h2 id="-get-방식">🔸 GET 방식</h2>
<ul>
  <li>전송할 파라미터 값들을 시작 라인의 URL 정보에 붙여서 같이 전송한다.</li>
  <li>파라미터의 길이는 256바이트를 넘을 수 없다.</li>
  <li>본문(Body)이 필요없기 때문에 전송 속도가 <code class="language-plaintext highlighter-rouge">POST</code> 방식에 비해 빠르다.</li>
  <li>전송해야 할 데이터가 적을 때 유용하다.</li>
  <li>파라미터가 URL뒤에 붙어서 전송되므로 사용자가 브라우저의 주소 창에서 전송되는 파라미터를 실제로 확인할 수 있다.<br /><br /></li>
</ul>

<h2 id="-post-방식">🔸 POST 방식</h2>
<ul>
  <li>전송할 파라미터 값들을 요청 메시지 본문(Body)에 담아서 전송한다.</li>
  <li>따라서 전송할 수 있는 데이터의 양에 제한이 없으며 주소창에서 전송되는 파라미터 확인이 불가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">GET</code> 방식에 비해 보안상 더 유용하다.<br /><br /></li>
</ul>

<p><img src="../../assets/images/getPostRequest.jpg" alt="getPostRequest" /><br /><br /><br /></p>

<h1 id="3-http-응답response-메시지">3. HTTP 응답(Response) 메시지</h1>
<ul>
  <li>요쳥에 대한 서버의 처리 성공 여부를 표시하는 상태 코드(HTTP 404, 500 등) 번호와 웹 서버가 응답해주는 콘텐츠의 타입 정보(텍스트/HTML, 이미지 등), 콘텐츠의 내용으로 구성된다.</li>
  <li>실제적으로 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스가 요청을 처리해 생성하는 페이지는 웹 서버에서 응답 메시지의 형태로 작성되어 사용자의 브라우저에 전송된다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><category term="HTTP" /><summary type="html"><![CDATA[🎬 HTTP 프로토콜이란? 실제 사용자와 연결된 최상위 계층의 프로토콜로 가장 대표적인 웹브라우저의 통신에 관한 프로토콜]]></summary></entry><entry><title type="html">서블릿의 동작 원리</title><link href="http://localhost:4000/jsp/JSP-servlet-process/" rel="alternate" type="text/html" title="서블릿의 동작 원리" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-servlet-process</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-servlet-process/"><![CDATA[<h1 id="1-사용자의-url-요청">1. 사용자의 URL 요청</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">웹 서버</code>가 <code class="language-plaintext highlighter-rouge">배포 서술자</code>를 통해 지금 받은 요청이 <code class="language-plaintext highlighter-rouge">서블릿</code> 요청이라는 것을 알게 되면 <code class="language-plaintext highlighter-rouge">서블릿</code>을 담당하는 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>로 그 요청을 전달한다.
    <h2 id="-배포-서술자deployment-descriptor">🔸 배포 서술자(Deployment Descriptor)</h2>
  </li>
  <li>사전에 웹 서버측에 <code class="language-plaintext highlighter-rouge">URL</code>과 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스를 미리 매핑시켜놓은 것<br /><br /></li>
</ul>

<h1 id="2-request-response-객체-생성">2. request, response 객체 생성</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">웹 컨테이너</code>는 받은 요청을 처리하기 위해 <code class="language-plaintext highlighter-rouge">HTTP</code> 요청을 처리하기 위한 <code class="language-plaintext highlighter-rouge">request</code> 객체와 <code class="language-plaintext highlighter-rouge">HTTP</code> 응답을 위한 <code class="language-plaintext highlighter-rouge">response</code> 객체를 생성한다.<br /><br /></li>
</ul>

<h1 id="3-서블릿-인스턴스와-스레드-생성">3. 서블릿 인스턴스와 스레드 생성</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">request</code>, <code class="language-plaintext highlighter-rouge">response</code> 객체가 생성된 뒤 사용자의 URL 요청이 어떤 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스를 필요로 하는지 <code class="language-plaintext highlighter-rouge">배포 서술자</code>를 통해 알아낸다.</li>
  <li>그 클래스가 한 번도 실행된 적이 없거나 현재 메모리에 <code class="language-plaintext highlighter-rouge">인스턴스(프로세스)</code>가 없으면 새로 생성한 뒤 <code class="language-plaintext highlighter-rouge">스레드</code>를 하나 생성하고 이미 <code class="language-plaintext highlighter-rouge">인스턴스</code>가 존재한다면 기존의 <code class="language-plaintext highlighter-rouge">인스턴스</code>에 <code class="language-plaintext highlighter-rouge">스레드</code>만 하나 새로 생성한다.</li>
  <li>각 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스는 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>당 하나만 존재한다.<br /><br /></li>
</ul>

<h1 id="4-service-메소드-호출과-서블릿-클래스-실행">4. service() 메소드 호출과 서블릿 클래스 실행</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">스레드</code>가 생성되면 각 <code class="language-plaintext highlighter-rouge">스레드</code>에서 <code class="language-plaintext highlighter-rouge">service()</code> 메소드가 호출된다.</li>
  <li><code class="language-plaintext highlighter-rouge">service()</code> 메소드가 호출되면 <code class="language-plaintext highlighter-rouge">HTTP</code> 요청 방식이 <code class="language-plaintext highlighter-rouge">GET</code> 방식이면 <code class="language-plaintext highlighter-rouge">doGet()</code> 메소드가, <code class="language-plaintext highlighter-rouge">POST</code> 방식이면 <code class="language-plaintext highlighter-rouge">doPost()</code> 메소드가 <code class="language-plaintext highlighter-rouge">request</code>, <code class="language-plaintext highlighter-rouge">response</code> 객체를 인자로 자동으로 호출된다.</li>
  <li>개발자가 실제로 동적인 웹 페이지 생성을 할 수 있는 코드를 만들어야 하는 부분이 <code class="language-plaintext highlighter-rouge">doGet()</code>과 <code class="language-plaintext highlighter-rouge">doPost()</code> 메소드 부분이다.<br /><br /></li>
</ul>

<h1 id="5-응답과-스레드의-소멸">5. 응답과 스레드의 소멸</h1>
<ul>
  <li>사용자의 요청에 따른 동적인 웹 페이지를 생성한 결과물이 담긴 <code class="language-plaintext highlighter-rouge">response</code> 객체를 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>가 <code class="language-plaintext highlighter-rouge">HTTP</code> 응답 형태로 바꾸어 <code class="language-plaintext highlighter-rouge">웹 서버</code>로 전송한다.</li>
  <li>사용이 끝난 <code class="language-plaintext highlighter-rouge">request</code>와 <code class="language-plaintext highlighter-rouge">response</code> 객체를 소멸시키고 <code class="language-plaintext highlighter-rouge">스레드</code>를 종료한다.</li>
  <li>웹 서버는 전송 받은 HTTP 응답 메시지를 사용자의 브라우저로 전송하게 되고 사용자는 브라우저를 통해 동적으로 생성된 페이지를 받아보게 된다.<br /><br />
<img src="../../assets/images/servletRequestStep.jpg" alt="servletRequestStep" /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><category term="HTTP" /><category term="Servlet" /><summary type="html"><![CDATA[1. 사용자의 URL 요청 웹 서버가 배포 서술자를 통해 지금 받은 요청이 서블릿 요청이라는 것을 알게 되면 서블릿을 담당하는 웹 컨테이너로 그 요청을 전달한다. 🔸 배포 서술자(Deployment Descriptor) 사전에 웹 서버측에 URL과 서블릿 클래스를 미리 매핑시켜놓은 것]]></summary></entry><entry><title type="html">웹페이지 기초</title><link href="http://localhost:4000/jsp/JSP-web-beginning/" rel="alternate" type="text/html" title="웹페이지 기초" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-web-beginning</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-web-beginning/"><![CDATA[<h1 id="-웹페이지에는-정적데이터와-동적데이터가-있다">🔸 웹페이지에는 정적데이터와 동적데이터가 있다.</h1>

<ul>
  <li>네이버 홈페이지에 접속하면 보이는 이미지 데이터들은 <code class="language-plaintext highlighter-rouge">정적데이터</code></li>
  <li>
    <p>HTML, CSS, JavaScript, … =&gt; WEB 서버에서 처리<br /><br /></p>
  </li>
  <li>신문 기사, 날씨, 코스피 지수 등 변하는 값들은 <code class="language-plaintext highlighter-rouge">동적데이터</code></li>
  <li>DB에 저장되어 있는 데이터 =&gt; <code class="language-plaintext highlighter-rouge">WAS(Web Application Server - web에 application이 추가된 것)</code>서버에서 처리
    <ul>
      <li>예) 톰캣이라는 <code class="language-plaintext highlighter-rouge">서버</code>에서 <code class="language-plaintext highlighter-rouge">자바 애플리케이션</code>이 실행되고 있는 것<br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="-웹페이지-동작">🔸 웹페이지 동작</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">[클라이언트/사용자]</code>가 naver에 요청 ➡️ <code class="language-plaintext highlighter-rouge">[naver - WEB서버]</code>가 판단해서 요청한 데이터가 <code class="language-plaintext highlighter-rouge">정적데이터</code>만 있다면 바로 실행하게 만듦 ➡️ <code class="language-plaintext highlighter-rouge">[클라이언트/사용자]</code>에게 naver가 응답(<code class="language-plaintext highlighter-rouge">정적데이터</code>)</li>
  <li>
    <p>👉 이 결과로 사용자는 naver 페이지를 볼 수 있게 된다.<br /><br /></p>
  </li>
  <li>하지만 <code class="language-plaintext highlighter-rouge">동적데이터</code>도 있다면…</li>
  <li>naver가 <code class="language-plaintext highlighter-rouge">[naver서버 - WAS서버]</code>에 <code class="language-plaintext highlighter-rouge">동적데이터</code>를 요청한다.</li>
  <li>
    <p>그러면 <code class="language-plaintext highlighter-rouge">[Database서버]</code>에 데이터를 요청해서 사용자에게 보여준다.<br /><br />
<img src="../../assets/images/webProcess.png" alt="webProcess" /><br /><br /></p>
  </li>
  <li>+) .com, .co.kr 과 같은 도메인은 비싸다.</li>
  <li>.ar 같은 도메인들은 무료</li>
</ul>

<h1 id="-dns">🔸 DNS</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">도메인 네임서버</code></li>
  <li>IP주소를 도메인 주소로 바꾼 것</li>
  <li>숫자로 된 IP주소는 외우기 힘드니까 좀 더 읽기 쉬운 문자형 주소로 바꾸는 것</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><summary type="html"><![CDATA[🔸 웹페이지에는 정적데이터와 동적데이터가 있다.]]></summary></entry><entry><title type="html">웹 컨테이너</title><link href="http://localhost:4000/jsp/JSP-web-container/" rel="alternate" type="text/html" title="웹 컨테이너" /><published>2022-01-31T00:00:00+09:00</published><updated>2022-01-31T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-web-container</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-web-container/"><![CDATA[<h1 id="-웹-컨테이너란">🎬 웹 컨테이너란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code>와 <code class="language-plaintext highlighter-rouge">서블릿</code>을 사용한 웹 서버는 크게 URL 주소의 해석을 담당하는 <code class="language-plaintext highlighter-rouge">HTTP</code> 서버와 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스 또는 <code class="language-plaintext highlighter-rouge">JSP</code> 파일의 실행 요청을 처리해주는 <code class="language-plaintext highlighter-rouge">웹 컨테이너(Web Container)</code>로 구성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">HTTP</code> 서버는 단순히 어떤 주소(URL) 요청이 들어왔을 경우 그 주소에 미리 매핑되어 있는 콘텐츠(<code class="language-plaintext highlighter-rouge">HTML</code> 파일이나 이미지 등)를 사용자의 브라우저에 응답 형태로 전송하는 역할을 한다.</li>
  <li>이 때 요청된 URL이 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스 또는 <code class="language-plaintext highlighter-rouge">JSP</code> 파일일 경우 <code class="language-plaintext highlighter-rouge">HTTP</code> 서버는 이를 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>에서 처리하도록 <code class="language-plaintext highlighter-rouge">클라이언트</code>의 요청을 넘겨준다.</li>
  <li><code class="language-plaintext highlighter-rouge">웹 컨테이너</code>에서는 요청된 URL에 맞는(미리 설정된) <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스 또는 <code class="language-plaintext highlighter-rouge">JSP</code> 파일을 실행하여 결과를 <code class="language-plaintext highlighter-rouge">HTTP</code> 서버에 넘겨주게 되고 이는 응답 메시지의 형태로 사용자의 브라우저에 전송된다.
    <h4 id="-즉-웹-컨테이너란-웹-서버-내부에서-서블릿-클래스-또는-jsp-파일을-실행하기-위한-실행-환경을-제공하는-역할을-한다">👉 즉 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>란 웹 서버 내부에서 <code class="language-plaintext highlighter-rouge">서블릿</code> 클래스 또는 <code class="language-plaintext highlighter-rouge">JSP</code> 파일을 실행하기 위한 실행 환경을 제공하는 역할을 한다.</h4>
  </li>
  <li><code class="language-plaintext highlighter-rouge">서블릿</code> 클래스에 대한 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>를 <code class="language-plaintext highlighter-rouge">서블릿 컨테이너</code></li>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 파일에 대한 <code class="language-plaintext highlighter-rouge">웹 컨테이너</code>를 <code class="language-plaintext highlighter-rouge">JSP 컨테이너</code><br /><br /></li>
  <li>대표적으로 아파치 톰캣, 웹로직, Resin 등이 있다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="WEB" /><category term="JSP" /><category term="HTTP" /><summary type="html"><![CDATA[🎬 웹 컨테이너란? JSP와 서블릿을 사용한 웹 서버는 크게 URL 주소의 해석을 담당하는 HTTP 서버와 서블릿 클래스 또는 JSP 파일의 실행 요청을 처리해주는 웹 컨테이너(Web Container)로 구성된다. HTTP 서버는 단순히 어떤 주소(URL) 요청이 들어왔을 경우 그 주소에 미리 매핑되어 있는 콘텐츠(HTML 파일이나 이미지 등)를 사용자의 브라우저에 응답 형태로 전송하는 역할을 한다. 이 때 요청된 URL이 서블릿 클래스 또는 JSP 파일일 경우 HTTP 서버는 이를 웹 컨테이너에서 처리하도록 클라이언트의 요청을 넘겨준다. 웹 컨테이너에서는 요청된 URL에 맞는(미리 설정된) 서블릿 클래스 또는 JSP 파일을 실행하여 결과를 HTTP 서버에 넘겨주게 되고 이는 응답 메시지의 형태로 사용자의 브라우저에 전송된다. 👉 즉 웹 컨테이너란 웹 서버 내부에서 서블릿 클래스 또는 JSP 파일을 실행하기 위한 실행 환경을 제공하는 역할을 한다. 서블릿 클래스에 대한 웹 컨테이너를 서블릿 컨테이너 JSP 파일에 대한 웹 컨테이너를 JSP 컨테이너 대표적으로 아파치 톰캣, 웹로직, Resin 등이 있다.]]></summary></entry></feed>