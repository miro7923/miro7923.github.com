<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-01T17:58:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">DB) 데이터베이스 시스템</title><link href="http://localhost:4000/database/db-03-database-system/" rel="alternate" type="text/html" title="DB) 데이터베이스 시스템" /><published>2022-03-01T00:00:00+09:00</published><updated>2022-03-01T00:00:00+09:00</updated><id>http://localhost:4000/database/db-03-database-system</id><content type="html" xml:base="http://localhost:4000/database/db-03-database-system/"><![CDATA[<h1 id="-데이터베이스-시스템dbs--database-system이란">👀 데이터베이스 시스템(DBS : Database System)이란?</h1>
<ul>
  <li>데이터베이스에 데이터를 저장하고 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템</li>
  <li>즉 데이터베이스 관리 시스템 전체를 아우르는 용어이다.<br /><br /><br /></li>
</ul>

<h1 id="데이터베이스의-구조">데이터베이스의 구조</h1>
<h2 id="스키마schema">스키마(schema)</h2>
<ul>
  <li>데이터베이스에 저장되는 데이터 구조와 제약조건, 데이터 타입 등을 정의한 것</li>
  <li>전체적인 뼈대라 할 수 있다.</li>
</ul>

<h2 id="인스턴스instance">인스턴스(instance)</h2>
<ul>
  <li>스키마에 따라 데이터베이스에 실제로 저장된 값</li>
  <li>그래서 스키마는 변하지 않지만 인스턴스는 시간이 흐름에 따라 바뀔 수 있다.</li>
</ul>

<h2 id="3단계-데이터베이스-구조">3단계 데이터베이스 구조</h2>
<ul>
  <li>미국 표준화 기관인 ANSI/SPARC에서 제안</li>
  <li>데이터베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터베이스를 관점에 따라 세 단계로 나눈 것</li>
  <li>각 단계별로 다른 추상화(abstraction)를 제공한다.
    <ul>
      <li>내부 단계에서 외부 단계로 갈수록 추상화 레벨이 높아진다.</li>
    </ul>
  </li>
</ul>

<h3 id="3단계-데이터베이스-구조--외부-단계">3단계 데이터베이스 구조 : 외부 단계</h3>
<ul>
  <li>데이터베이스를 개별 사용자 관점에서 이해하고 표현하는 단계</li>
  <li>데이터베이스 하나에 외부 스키마가 여러 개 존재할 수 있다.</li>
  <li>아파트로 치자면 201호에 사는 사람처럼 각 세대에 사는 사람이라 할 수 있다. 아파트의 개별 세대원들은 본인이 사는 호수에만 관심이 있을 것이다.</li>
</ul>

<h4 id="-외부-스키마external-schema">🔸 외부 스키마(external schema)</h4>
<ul>
  <li>외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것</li>
  <li>각 사용자가 생각하는 데이터베이스의 모습. 즉 논리적 구조로 사용자마다 다름</li>
  <li>서브 스키마(sub schema)라고도 한다.</li>
</ul>

<h3 id="3단계-데이터베이스-구조--개념-단계">3단계 데이터베이스 구조 : 개념 단계</h3>
<ul>
  <li>데이터베이스를 조직 전체의 관점에서 이해하고 표현하는 단계</li>
  <li>데이터데이스 하나에 개념 스키마가 하나만 존재함</li>
  <li>아파트의 관리자라고 할 수 있다. 여러 세대가 사는 아파트에서 관리하는 사무소는 하나이고 관리 사무소는 아파트라는 조직 전체를 관리한다.</li>
</ul>

<h4 id="-개념-스키마conceptual-schema">🔸 개념 스키마(conceptual schema)</h4>
<ul>
  <li>개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것</li>
  <li>조직 전체의 관점에서 생각하는 데이터베이스의 모습</li>
  <li>전체 데이터베이스에 어떤 데이터가 저장되는지, 데이터들 간에는 어떤 관계가 존재하고 어떤 제약조건이 존재하는지에 대한 정의뿐만 아니라, 데이터에 대한 보안 정책이나 접근 권한에 대한 정의도 포함</li>
</ul>

<h3 id="3단계-데이터베이스-구조--내부-단계">3단계 데이터베이스 구조 : 내부 단계</h3>
<ul>
  <li>데이터베이스를 저장 장치의 관점에서 이해하고 표현하는 단계</li>
  <li>데이터베이스 하나에 내부 스키마가 하나만 존재함</li>
  <li>아파트의 건설사 관점이라고 할 수 있다. 아파트의 구조를 설계하고 그에 맞춰 짓는 동안 하나의 건설사에서 관리한다.</li>
</ul>

<h4 id="-내부-스키마internal-schema">🔸 내부 스키마(internal schema)</h4>
<ul>
  <li>전체 데이터베이스가 저장 장치에 실제로 저장되는 방법을 정의한 것</li>
  <li>레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적 저장 구조를 정의</li>
</ul>

<h2 id="3단계-데이터베이스-구조의-사상-또는-매핑">3단계 데이터베이스 구조의 사상 또는 매핑</h2>
<h3 id="스키마-사이의-대응-관계">스키마 사이의 대응 관계</h3>
<ul>
  <li>외부/개념 사상 : 외부 스키마와 개념 스키마의 대응 관계
    <ul>
      <li>응용 인터페이스(application interface)라고도 함</li>
    </ul>
  </li>
  <li>개념/내부 사상 : 개념 스키마와 내부 스키마의 대응 관계
    <ul>
      <li>저장 인터페이스(storage interface)라고도 함</li>
    </ul>
  </li>
  <li>미리 정의된 사상 정보를 이용하여 사용자가 원하는 데이터에 접근한다.</li>
  <li>데이터베이스를 3단계 구조로 나누고 단계별로 스키마를 유지하며 스키마 사이의 대응 관계를 정의하는 궁극적인 목적은 <code class="language-plaintext highlighter-rouge">데이터 독립성의 실현</code>이다.</li>
</ul>

<h2 id="데이터-독립성data-independency">데이터 독립성(data independency)</h2>
<ul>
  <li>하위 스키마를 변경하더라도 상위 스키마가 영향을 받지 않는 특성</li>
</ul>

<h3 id="-논리적-데이터-독립성">🔸 논리적 데이터 독립성</h3>
<ul>
  <li>개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않음</li>
  <li>개념 스키마가 변경되면 관련된 외부/개념 사상만 정확하게 수정해주면 됨</li>
</ul>

<h3 id="-물리적-데이터-독립성">🔸 물리적 데이터 독립성</h3>
<ul>
  <li>내부 스키마가 변경되어도 개념 스키마는 영향을 받지 않음</li>
  <li>내부 스키마가 변경되면 관련된 개념/내부 사상만 정확하게 수정해주면 됨</li>
</ul>

<h2 id="데이터-사전data-dictionary">데이터 사전(data dictionary)</h2>
<ul>
  <li>시스템 카탈로그(system catalog)라고도 한다.</li>
  <li>데이터베이스에 저장되는 데이터에 관한 정보, 즉 메타 데이터를 유지하는 시스템 데이터베이스
    <ul>
      <li>메타 데이터(meta data) : 데이터에 대한 데이터</li>
    </ul>
  </li>
  <li>스키마, 사상 정보, 다양한 제약조건 등을 저장</li>
  <li>데이터베이스 관리 시스템이 스스로 생성하고 유지함</li>
  <li>일반 사용자도 접근이 가능하지만 저장된 내용을 검색만 할 수 있음</li>
</ul>

<h2 id="데이터-디렉토리data-directory">데이터 디렉토리(data directory)</h2>
<ul>
  <li>데이터 사전에 있는 데이터에 실제로 접근하는 데 필요한 위치 정보를 저장하는 시스템 데이터베이스</li>
  <li>일반 사용자의 접근은 허용되지 않음</li>
</ul>

<h2 id="사용자-데이터베이스user-database">사용자 데이터베이스(user database)</h2>
<ul>
  <li>사용자가 실제로 이용하는 데이터가 저장되어 있는 일반 데이터베이스<br /><br /><br /></li>
</ul>

<h1 id="데이터베이스-사용자">데이터베이스 사용자</h1>
<ul>
  <li>데이터를 이용하기 위해 접근하는 모든 사람</li>
  <li>이용 목적에 따라 데이터베이스 관리자, 최종 사용자, 응용 프로그래머로 나눌 수 있다.</li>
</ul>

<h2 id="데이터베이스-관리자dba--database-administrator">데이터베이스 관리자(DBA : Database Administrator)</h2>
<ul>
  <li>데이터베이스 시스템을 운영, 관리하는 사람</li>
  <li>주로 데이터 정의어와 데이터 제어어를 사용</li>
  <li>주요 업무
    <ul>
      <li>데이터베이스 구성 요소 선정</li>
      <li>데이터베이스 스키마 정의</li>
      <li>물리적 저장 구조와 접근 방법 결정</li>
      <li>무결성 유지를 위한 제약조건 정의</li>
      <li>보안 및 접근 권한 정책 결정</li>
      <li>백업 및 회복 기법 정의</li>
      <li>시스템 데이터베이스 관리</li>
      <li>시스템 성능 감시 및 성능 분석</li>
      <li>데이터베이스 재구성</li>
    </ul>
  </li>
</ul>

<h2 id="최종-사용자end-user">최종 사용자(end user)</h2>
<ul>
  <li>데이터베이스에 접근하여 데이터를 조작(삽입, 삭제, 수정, 검색)하는 사람</li>
  <li>주로 데이터 조작어 사용</li>
  <li>캐주얼 사용자와 초보 사용자로 구분</li>
</ul>

<h2 id="응용-프로그래머application-programmer">응용 프로그래머(application programmer)</h2>
<ul>
  <li>데이터 언어를 삽입하여 응용 프로그램을 작성하는 사람</li>
  <li>주로 데이터 조작어 사용<br /><br /><br /></li>
</ul>

<h1 id="데이터-언어">데이터 언어</h1>
<ul>
  <li>사용자와 데이터베이스 관리 시스템 간의 통신 수단</li>
  <li>사용 목적에 따라 데이터 정의어(DDL), 데이터 조작어(DML), 데이터 제어어(DCL)로 구분</li>
</ul>

<h2 id="데이터-정의어ddl--data-definition-language">데이터 정의어(DDL : Data Definition Language)</h2>
<ul>
  <li>스키마를 정의하거나 수정 또는 삭제하기 위해 사용</li>
</ul>

<h2 id="데이터-조작어dml--data-manipulation-language">데이터 조작어(DML : Data Manipulation Language)</h2>
<ul>
  <li>데이터의 삽입, 삭제, 수정, 검색 등의 처리를 요구하기 위해 사용</li>
  <li>절차적 데이터 조작어와 비절차적 데이터 조작어로 구분됨</li>
  <li>절차적 데이터 조작어(procedural DML)
    <ul>
      <li>사용자가 어떤(what) 데이터를 원하고 그 데이터를 얻기 위해 어떻게(how) 처리해야 하는지 설명</li>
      <li>즉 데이터의 처리 절차를 설명해야 한다.</li>
    </ul>
  </li>
  <li>비절차적 데이터 조작어(nonprocedural DML)
    <ul>
      <li>사용자가 결과적으로 어떤(what) 데이터를 원하는지만 설명</li>
      <li>데이터를 얻기 위한 절차를 설명할 필요가 없다.</li>
      <li>선언적 언어(declarative language)라고도 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="데이터-제어어dcl--data-control-language">데이터 제어어(DCL : Data Control Language)</h2>
<ul>
  <li>내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용</li>
  <li>사용 목적
    <ul>
      <li>무결성 : 정확하고 유효한 데이터만 유지</li>
      <li>보안 : 허가받지 않은 사용자의 데이터 접근 차단, 허가된 사용자에 권한 부여</li>
      <li>회복 : 장애가 발생해도 데이터 일관성 유지</li>
      <li>동시성 제어 : 동시 공유 지원<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="데이터베이스-관리-시스템의-구성">데이터베이스 관리 시스템의 구성</h1>
<ul>
  <li>데이터베이스 관리와 사용자의 데이터 처리 요구를 수행한다.</li>
</ul>

<h2 id="주요-구성-요소">주요 구성 요소</h2>
<ul>
  <li>질의 처리기(query processor)
    <ul>
      <li>사용자의 데이터 처리 요구를 해석하여 처리</li>
      <li>DDL 컴파일러, DML 프리 컴파일러, DML 컴파일러, 런타임 데이터베이스 처리기, 트랜잭션 관리자 등을 포함</li>
    </ul>
  </li>
  <li>저장 데이터 관리자(stored data manager)
    <ul>
      <li>디스크에 저장된 사용자 데이터베이스와 데이터 사전을 관리하고, 여기에 실제로 접근하는 역할 담당<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1163794">데이터베이스의 원리와 응용 - 한양대학교 KOCW 공개 강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><summary type="html"><![CDATA[👀 데이터베이스 시스템(DBS : Database System)이란? 데이터베이스에 데이터를 저장하고 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템 즉 데이터베이스 관리 시스템 전체를 아우르는 용어이다.]]></summary></entry><entry><title type="html">Java) BOJ 15649. N과 M (1)</title><link href="http://localhost:4000/boj/boj15649-java/" rel="alternate" type="text/html" title="Java) BOJ 15649. N과 M (1)" /><published>2022-03-01T00:00:00+09:00</published><updated>2022-03-01T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj15649-java</id><content type="html" xml:base="http://localhost:4000/boj/boj15649-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/15649">https://www.acmicpc.net/problem/15649</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 1 초</li>
  <li>메모리 제한 : 512 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>
  </li>
  <li>
    <p>1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</li>
  <li>수열은 사전 순으로 증가하는 순서로 출력해야 한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>순열을 구하는 문제같아서 순열을 구하는 알고리즘으로 풀었다.</li>
  <li>참고 블로그 : <a href="https://bcp0109.tistory.com/14">https://bcp0109.tistory.com/14</a><br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 340 ms</li>
  <li>메모리 : 31232 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/d619e7a5516b7a220809f727d374c2b3.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No15649" /><category term="BackTracking" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/15649 제한 시간 제한 : 1 초 메모리 제한 : 512 MB]]></summary></entry><entry><title type="html">DB) 데이터 모델링</title><link href="http://localhost:4000/database/db-04-data-modeling/" rel="alternate" type="text/html" title="DB) 데이터 모델링" /><published>2022-03-01T00:00:00+09:00</published><updated>2022-03-01T00:00:00+09:00</updated><id>http://localhost:4000/database/db-04-data-modeling</id><content type="html" xml:base="http://localhost:4000/database/db-04-data-modeling/"><![CDATA[<h1 id="-데이터베이스-설계">👀 데이터베이스 설계</h1>
<ul>
  <li>사용자의 다양한 요구 사항을 고려하여 데이터베이스를 생성하는 과정</li>
  <li>E-R 모델과 릴레이션 변환 규칙을 이용한 설계 과정은 5단계로 이루어져 있다.</li>
</ul>

<h2 id="1단계--요구-사항-분석">1단계 : 요구 사항 분석</h2>
<ul>
  <li>데이터베이스의 용도 파악</li>
  <li>관련된 현실 세계가 어떻게 구성되어 있는지 파악한다.</li>
  <li>결과물 : 요구 사항 명세서</li>
</ul>

<h2 id="2단계--개념적-설계">2단계 : 개념적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>에 독립적인 개념적 구조 설계</li>
  <li>현실세계에 있는 정보를 알아보기 쉽게 표시한다.</li>
  <li>결과물 : 개념적 스키마(E-R 다이어그램)</li>
</ul>

<h2 id="3단계--논리적-설계">3단계 : 논리적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>에 적합한 논리적 구조 설계</li>
  <li>결과물 : 논리적 스키마(릴레이션 스키마)</li>
</ul>

<h2 id="4단계--물리적-설계">4단계 : 물리적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>로 구현 가능한 물리적 구조 설계</li>
  <li>결과물 : 물리적 스키마</li>
</ul>

<h2 id="5단계--구현">5단계 : 구현</h2>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQL</code> 문을 작성한 후 이를 <code class="language-plaintext highlighter-rouge">DBMS</code>에서 실행하여 데이터베이스 생성<br /><br /></p>
  </li>
  <li>
    <p>1 ~ 3단계가 가장 핵심이 되는 단계들이며 각 단계의 설계 과정 중에 오류가 발견되어 변경이 필요하면 이전 단계로 되돌아가 설계 내용을 변경할 수 있다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="데이터-모델링data-modeling">데이터 모델링(data modeling)</h1>
<ul>
  <li>현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환 과정</li>
  <li>데이터베이스 설계의 핵심 과정</li>
  <li>모든 데이터는 특징을 추출하는 <code class="language-plaintext highlighter-rouge">추상화(abstraction)</code> 과정을 거쳐서 데이터베이스로 옮겨진다.</li>
</ul>

<h2 id="개념적-데이터-모델링conceptual-modeling">개념적 데이터 모델링(conceptual modeling)</h2>
<ul>
  <li>현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업</li>
</ul>

<h2 id="논리적-데이터-모델링logical-modeling">논리적 데이터 모델링(logical modeling)</h2>
<ul>
  <li>개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업</li>
</ul>

<h2 id="데이터-모델data-model">데이터 모델(data model)</h2>
<ul>
  <li>데이터 모델링의 결과물을 표현하는 도구</li>
</ul>

<h3 id="개념적-데이터-모델">개념적 데이터 모델</h3>
<ul>
  <li>사람의 머리로 이해할 수 있도록 현실 세계를 개념적 모델링하여 데이터베이스의 개념적 구조로 표현하는 도구</li>
  <li>예) 개체-관계 모델</li>
</ul>

<h3 id="논리적-데이터-모델">논리적 데이터 모델</h3>
<ul>
  <li>개념적 구조를 논리적 모델링하여 데이터베이스의 논리적 구조로 표현하는 도구</li>
  <li>예) 관계 데이터 모델<br /><br /><br /></li>
</ul>

<h1 id="개체-관계-모델e-r-model-entity-relationship-model">개체-관계 모델(E-R model: Entity-Relationship model)</h1>
<ul>
  <li>피터 첸(Peter Chen)이 제안한 개념적 데이터 모델</li>
  <li>개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현</li>
  <li>핵심 요소 : 개체, 속성, 관계</li>
</ul>

<h2 id="개체-관계-다이어그램e-r-diagram">개체-관계 다이어그램(E-R diagram)</h2>
<ul>
  <li>E-R 다이어그램이라고도 하며 개체 - 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것</li>
</ul>

<h2 id="개체entity">개체(entity)</h2>
<ul>
  <li>현실 세계에서 조직을 운영하는 데 꼭 필요한 사람이나 사물과 같이 구별되는 모든 것</li>
  <li>저장할 가치가 있는 중요 데이터를 가지고 있는 사람이나 사물, 개념, 사건 등</li>
  <li>다른 개체와 구별되는 이름을 가지고 있고, 각 개체만의 고유한 특성이나 상태, 즉 속성을 하나 이상 가지고 있음</li>
  <li>예) 서점에 필요한 개체 : 고객, 책</li>
  <li>예) 학교에 필요한 개체 : 학과, 과목</li>
  <li>파일 구조의 레코드(record)와 대응됨</li>
  <li>E-R 다이어그램에서 <code class="language-plaintext highlighter-rouge">사각형</code>으로 표현하고 사각형 안에 이름을 표기한다.</li>
</ul>

<h2 id="속성attribute">속성(attribute)</h2>
<ul>
  <li>개체나 관계가 가지고 있는 고유의 특성</li>
  <li>의미 있는 데이터의 가장 작은 논리적 단위</li>
  <li>파일 구조의 필드(field)와 대응됨</li>
  <li>E-R 다이어그램에서 타원으로 표현하고 타원 안에 이름을 표기</li>
</ul>

<h2 id="개체-타입entity-type">개체 타입(entity type)</h2>
<ul>
  <li>개체를 고유의 이름과 속성들로 정의한 것</li>
  <li>파일 구조의 레코드 타입(record type)에 대응됨</li>
</ul>

<h2 id="개체-인스턴스entity-instance">개체 인스턴스(entity instance)</h2>
<ul>
  <li>개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체</li>
  <li>개체 어커런스(entity occurrence)라고도 함</li>
  <li>파일 구조의 레코드 인스턴스(record instance)에 대응됨</li>
</ul>

<h2 id="개체-집합entity-set">개체 집합(entity set)</h2>
<ul>
  <li>특정 개체 타입에 대한 기체 인스턴스들을 모아놓은 것</li>
</ul>

<h2 id="속성의-분류">속성의 분류</h2>
<h3 id="속성-값의-개수에-따른-분류">속성 값의 개수에 따른 분류</h3>
<h4 id="-단일-값-속성single-valued-attribute">🔸 단일 값 속성(single-valued attribute)</h4>
<ul>
  <li>값을 하나만 가질 수 있는 속성</li>
  <li>예) 고객 개체의 이름, 적립금 속성</li>
</ul>

<h4 id="-다중-값-속성multi-valued-attribute">🔸 다중 값 속성(multi-valued attribute)</h4>
<ul>
  <li>값을 여러 개 가질 수 있는 속성</li>
  <li>예) 고객 개체의 연락처 속성</li>
  <li>예) 책 개체의 저자 속성</li>
  <li>E-R 다이어그램에서 이중 타원으로 표현</li>
</ul>

<h3 id="의미의-분해-가능성에-따른-분류">의미의 분해 가능성에 따른 분류</h3>
<h4 id="-단순-속성simple-attribute">🔸 단순 속성(simple attribute)</h4>
<ul>
  <li>의미를 더는 분해할 수 없는 속성</li>
  <li>예) 고객 개체의 적립금 속성</li>
  <li>예) 책 개체의 이름, ISBN, 가격 속성</li>
</ul>

<h4 id="-복합-속성composite-attribute">🔸 복합 속성(composite attribute)</h4>
<ul>
  <li>의미를 분해할 수 있는 속성</li>
  <li>예) 고객 개체의 주소 속성
    <ul>
      <li>시, 도, 구, 동, 우편번호 등으로 의미를 세분화해서 쪼갤 수 있다.</li>
    </ul>
  </li>
  <li>예) 고객 개체의 생년월일 속성
    <ul>
      <li>연, 월, 일로 의미를 세분화할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="유도-속성derived-attribute">유도 속성(derived attribute)</h3>
<ul>
  <li>기존의 다른 속성의 값에서 유도되어 결정되는 속성</li>
  <li>값이 별도로 저장되지 않음</li>
  <li>예) 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">가격 - 할인율 = 책 가격</code>이 되기 때문에 책 개체의 가격은 유도 속성이라 할 수 있다.</li>
    </ul>
  </li>
  <li>예) 고객 개체의 출생연도 속성으로 계산되는 나이 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">출생연도를 이용해서 고객의 나이를 계산</code>할 수 있기 때문에 고객 개체의 나이 속성은 유도 속성이라 할 수 있다.</li>
    </ul>
  </li>
  <li>E-R 다이어그램에서 점선 타원으로 표현된다.</li>
</ul>

<h3 id="널-속성null-attribute">널 속성(null attribute)</h3>
<ul>
  <li>널 값이 허용되는 속성</li>
</ul>

<h3 id="널null-값">널(null) 값</h3>
<ul>
  <li>아직 결정되지 않았거나 모르는 값 또는 존재하지 않는 값</li>
  <li>공백이나 0과는 의미가 다른데, 공백이나 0도 공백과 0이라는 값이 있는 것이다. 그래서 <code class="language-plaintext highlighter-rouge">공백, 0 != null</code></li>
  <li>예) 등급 속성이 널 값이라는 의미는 등급이 아직 결정되지 않았음을 의미</li>
</ul>

<h3 id="키-속성key-attribute">키 속성(key attribute)</h3>
<ul>
  <li>각 개체 인스턴스를 식별하는 데 사용되는 속성</li>
  <li>모든 개체 인스턴스의 키 속성 값이 다름</li>
  <li>둘 이상의 속성들로 구성되기도 함</li>
  <li>예) 고객 개체의 고객아이디 속성</li>
  <li>E-R 다이어그램에서 밑줄로 표현한다.</li>
</ul>

<h2 id="관계relationship">관계(relationship)</h2>
<ul>
  <li>개체와 개체가 맺고 있는 의미 있는 연관성</li>
  <li>개체 집합들 사이의 대응 관계, 즉 매핑(mapping)을 의미</li>
  <li>예) 고객 개체와 책 개체 간의 구매 관계 (“고객은 책을 구매한다”)</li>
  <li>E-R 다이어그램에서 마름모로 표현한다.</li>
</ul>

<h3 id="관계의-유형--관계에-참여하는-개체-타입의-수에-따라">관계의 유형 : 관계에 참여하는 개체 타입의 수에 따라</h3>
<ul>
  <li>이항 관계 : 개체 타입 두 개가 맺는 관계</li>
  <li>삼항 관계 : 개체 타입 세 개가 맺는 관계</li>
  <li>순환 관계 : 개체 타입 하나가 자기 자신과 맺는 관계</li>
</ul>

<h3 id="관계의-유형--매핑-카디널리티-기준">관계의 유형 : 매핑 카디널리티 기준</h3>
<h4 id="일대일1--1-관계">일대일(1 : 1) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있음</li>
  <li>예) 일처일부제에서의 혼인관계</li>
</ul>

<h4 id="일대다1--n-관계">일대다(1 : n) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있지만, 개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있음</li>
  <li>예) 하나의 부서에 여러 사원이 소속되어 있는 관계</li>
</ul>

<h4 id="다대다n--m-관계">다대다(n : m) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있음</li>
  <li>고객은 책을 여러 권 살 수 있고 책 또한 여러 고객들에 의해서 구매될 수 있는 관계</li>
</ul>

<h4 id="매핑-카디널리티mapping-cardinality">매핑 카디널리티(mapping cardinality)</h4>
<ul>
  <li>관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수</li>
</ul>

<h3 id="관계의-참여-특성">관계의 참여 특성</h3>
<h4 id="필수적-참여전체-참여">필수적 참여(전체 참여)</h4>
<ul>
  <li>모든 개체 인스턴스가 관계에 반드시 참여해야 하는 것을 의미</li>
  <li>예) 모든 고객은 책을 반드시 구매해야 한다면 고객 개체가 책 개체와의 구매 관계에 필수적으로 참여하는 것</li>
  <li>E-R 다이어그램에서 이중선으로 표현</li>
</ul>

<h4 id="선택적-참여부분-참여">선택적 참여(부분 참여)</h4>
<ul>
  <li>개체 인스턴스 중 일부만 관계에 참여해도 되는 것을 의미</li>
  <li>예) 고객이 서점에 있는 모든 책을 사야 하는 것은 아니기 때문에 이런 경우엔 책 개체가 고객 개체와의 구매 관계에 선택적으로 참여한다고 할 수 있다.</li>
</ul>

<h3 id="관계의-종속성">관계의 종속성</h3>
<ul>
  <li>약한 개체(weak entity) : 다른 개체의 존재 여부에 의존적인 개체</li>
  <li>오너 개체(owner entity) : 다른 개체의 존재 여부를 결정하는 개체</li>
  <li><code class="language-plaintext highlighter-rouge">오너 개체</code>와 <code class="language-plaintext highlighter-rouge">약한 개체</code>는 일반적으로 <code class="language-plaintext highlighter-rouge">일대다</code>의 관계를 가지고, <code class="language-plaintext highlighter-rouge">약한 개체</code>는 <code class="language-plaintext highlighter-rouge">오너 개체</code>와의 관계에 <code class="language-plaintext highlighter-rouge">필수적으로 참여</code>하는 특징이 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">약한 개체</code>는 <code class="language-plaintext highlighter-rouge">오너 개체</code>의 <code class="language-plaintext highlighter-rouge">키를 포함</code>하여 키를 구성하는 특징이 있다.</li>
  <li>예) 직원 개체와 부양가족 개체 사이의 부양 관계
    <ul>
      <li>직원 개체는 부양가족을 꼭 가지지 않아도 되지만 부양가족은 직원 개체가 꼭 있어야 한다. 그래서 직원 개체는 오너 개체, 부양가족 개체는 약한 개체라 할 수 있다.</li>
    </ul>
  </li>
  <li>E-R 다이어그램에서 약한 개체는 이중 사각형으로 표한하고 약한 개체가 오너 개체와 맺는 관계는 이중 마름모로 표현<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1163794">데이터베이스의 원리와 응용 - 한양대학교 KOCW 공개 강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Database" /><category term="DB" /><summary type="html"><![CDATA[👀 데이터베이스 설계 사용자의 다양한 요구 사항을 고려하여 데이터베이스를 생성하는 과정 E-R 모델과 릴레이션 변환 규칙을 이용한 설계 과정은 5단계로 이루어져 있다.]]></summary></entry><entry><title type="html">OS) CPU Scheduling</title><link href="http://localhost:4000/operating%20system/OS-05-Cpu-scheduling/" rel="alternate" type="text/html" title="OS) CPU Scheduling" /><published>2022-02-28T00:00:00+09:00</published><updated>2022-02-28T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/OS-05-Cpu-scheduling</id><content type="html" xml:base="http://localhost:4000/operating%20system/OS-05-Cpu-scheduling/"><![CDATA[<h1 id="-cpu-burst-time">👀 CPU-Burst time</h1>
<ul>
  <li>프로세스의 실행은 <code class="language-plaintext highlighter-rouge">CPU</code>를 얻어서 작업을 수행하는 것과 <code class="language-plaintext highlighter-rouge">I/O</code> 작업을 수행하는 것으로 나눌 수 있다.</li>
  <li>이 때 <code class="language-plaintext highlighter-rouge">CPU</code>만 쓰면서 <code class="language-plaintext highlighter-rouge">Instruction</code>을 실행하는 단계는 <code class="language-plaintext highlighter-rouge">CPU burst</code>라 하고 <code class="language-plaintext highlighter-rouge">I/O</code>만 실행하는 단계는 <code class="language-plaintext highlighter-rouge">I/O burst</code>라 한다.</li>
  <li>현재 프로세스가 <code class="language-plaintext highlighter-rouge">CPU</code>를 사용중이라면 다른 프로세스는 사용이 끝날 때까지 기다려야 하겠지만 <code class="language-plaintext highlighter-rouge">I/O</code> 작업중이라면 다른 프로세스가 <code class="language-plaintext highlighter-rouge">CPU</code>를 쓸 수 있다.</li>
  <li>프로세스의 종류는 여러 가지가 있기 때문에 시스템 자원을 효율적으로 쓸 수 있도록 <code class="language-plaintext highlighter-rouge">CPU 스케줄링</code>이 필요하다.<br /><br /><br /></li>
</ul>

<h1 id="프로세스의-특성-분류">프로세스의 특성 분류</h1>
<h2 id="io-bound-process">I/O-bound process</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CPU</code>를 잡고 계산하는 시간보다 <code class="language-plaintext highlighter-rouge">I/O</code>에 많은 시간이 필요한 job (CPU burst가 아주 짧다)</li>
  <li>주로 사람과 Interactive하는 job</li>
</ul>

<h2 id="cpu-bound-process">CPU-bound process</h2>
<ul>
  <li>계산 위주의 job (CPU burst가 아주 길다)<br /><br /><br /></li>
</ul>

<h1 id="cpu-scheduler">CPU Scheduler</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Ready</code> 상태의 프로세스 중에서 이번에 CPU를 줄 프로세스를 고른다.</li>
</ul>

<h2 id="dispatcher">Dispatcher</h2>
<ul>
  <li>CPU의 제어권을 CPU Scheduler에 의해 선택된 프로세스에게 넘긴다.</li>
  <li>이 과정을 context switch(문맥 교환)라 한다.</li>
</ul>

<h2 id="cpu-스케줄링이-필요한-경우">CPU 스케줄링이 필요한 경우</h2>
<ul>
  <li>Running -&gt; Blocked (예: I/O 요청하는 시스템 콜)</li>
  <li>Running -&gt; Ready (예: 할당시간 만료로 timer interrupt)</li>
  <li>Blocked -&gt; Ready (얘: I/O 완료 후 인터럽트)</li>
  <li>
    <p>Terminate<br /><br /></p>
  </li>
  <li>스케줄링에는 강제로 빼앗지 않고 자진 반납하는 <code class="language-plaintext highlighter-rouge">non-preemptive</code>와 강제로 빼앗는 <code class="language-plaintext highlighter-rouge">preemptive</code>가 있다.</li>
  <li>현대 대부분의 프로세서는 <code class="language-plaintext highlighter-rouge">preemptive</code>를 사용한다.<br /><br /><br /></li>
</ul>

<h1 id="스케줄링-성능-척도">스케줄링 성능 척도</h1>
<ul>
  <li>CPU utilization(이용률) : <code class="language-plaintext highlighter-rouge">CPU</code>가 얼마나 쉼 없이 일하는지</li>
  <li>Throughput(처리량) : 단위 시간동안 처리하는 작업의 양이 얼마나 많은지</li>
  <li>Turnaround time(소요시간, 반환시간) : 프로세스가 CPU를 얻어서 작업을 시작하고 끝날 때까지 걸린 총 시간(대기시간 포함)</li>
  <li>Waiting time(대기 시간) : Ready queue에서 CPU를 얻을 때까지 기다린 시간. 작업 시간은 제외하고 순수하게 기다린 시간만 본다.</li>
  <li>Response tiem(응답 시간) : (time-sharing 시스템에서) 처음으로 CPU를 얻어서 작업을 시작하기까지 걸린 시간<br /><br /><br /></li>
</ul>

<h1 id="스케줄링-알고리즘">스케줄링 알고리즘</h1>
<h2 id="fcfs-first-come-first-serve">FCFS (First-Come First-Serve)</h2>
<ul>
  <li>선착순 방식으로 먼저 온 순서대로 CPU를 얻어서 작업을 시작하고 나중에 온 프로세스들은 이전 작업이 끝날 때까지 기다린다.</li>
  <li>오래 걸리는 작업이 먼저 와서 계속 수행되고 시간이 짧은 작업들이 뒤에서 기다리고 있는 경우에는 효율적이지 않다. 이런 경우엔 평균 대기 시간이 길어짐</li>
  <li>짧은 작업이 먼저 와서 처리된 후 오래 걸리는 작업을 처리하게 되면 평균 대기 시간이 짧아지지만 늘 이렇게 프로세스가 도착하지는 않을 것이니까 일반적으로는 효율적이지 않은 방식이라고 할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">Convoy effect</code> : 수행 시간이 긴 작업이 먼저 와서 처리되는 동안 짧은 작업들은 수행되지 못하고 기다리고 있는 현상</li>
</ul>

<h2 id="sjf-shortest-job-first">SJF (Shortest-Job-First)</h2>
<ul>
  <li>도착하는 프로세스마다 CPU burst time을 예측해서 CPU burst time이 가장 짧은 프로세스를 제일 먼저 스케줄한다. 그래서 평균 대기시간이 가장 짧다.</li>
  <li>두 가지 방식이 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Non-preemptive</code> : 일단 CPU를 잡으면 다음 작업이 지금 수행 중인 작업보다 실행 시간이 더 짧아도 지금 작업이 완료되기 전 까지는 CPU를 넘겨주지 않는다.</li>
      <li><code class="language-plaintext highlighter-rouge">Preemptive</code> : 현재 수행 중인 프로세스 다음에 온 프로세스의 수행 시간이 더 짧으면 CPU를 뺏어서 시간이 더 짧은 프로세스에게 넘긴다. 근데 이러다보면 수행 시간이 긴 프로세스는 평생 CPU를 얻지 못 할 수도 있어서(<code class="language-plaintext highlighter-rouge">starvation</code> 기아 현상) 아주 좋은 방법은 아니다.</li>
    </ul>
  </li>
</ul>

<h3 id="다음-cpu-burst-time-예측-방법">다음 CPU Burst time 예측 방법</h3>
<ul>
  <li>완벽하게 계산하기 보다는 과거 데이터로부터 추정(estimate)하는 방식을 사용한다.</li>
  <li>n번째 프로세스의 실제 CPU 사용 시간과 n번째 프로세스의 CPU 사용 시간을 예측했던 값들을 일정 비율씩 곱해서 더해주는 방식으로 n + 1번째 프로세스의 CPU burst time을 예측한다.</li>
</ul>

<h2 id="priority-scheduling">Priority Scheduling</h2>
<ul>
  <li>우선순위 스케줄링이라 하며 프로세스에게 부여된 우선순위가 높은 순서대로 CPU를 할당한다.</li>
  <li>이것 또한 나중에 도착했지만 우선순위가 더 높은 프로세스에 대해 <code class="language-plaintext highlighter-rouge">Preemptive</code>와 <code class="language-plaintext highlighter-rouge">Non-preemptive</code> 방식으로 나뉜다.</li>
  <li>우선순위 스케줄링의 문제점 또한 우선순위가 낮은 프로세스는 평생 CPU를 얻지 못하는 <code class="language-plaintext highlighter-rouge">Starvation</code> 현상이 생길 수 있다는 것이다.</li>
  <li>그래서 <code class="language-plaintext highlighter-rouge">Aging</code> 기법을 통해 우선순위가 낮아도 오래 기다렸으면 우선순위를 높여주는 방식을 쓴다.</li>
</ul>

<h2 id="round-robin-rr">Round Robin (RR)</h2>
<ul>
  <li>대부분의 운영체제에서 사용하는 방식으로 각 프로세스는 동일한 크기의 <code class="language-plaintext highlighter-rouge">CPU 할당 시간(time quantum)</code>을 가지고 할당된 시간이 끝나면 <code class="language-plaintext highlighter-rouge">CPU</code>를 다음 프로세스에게 넘겨주고 <code class="language-plaintext highlighter-rouge">Ready queue</code>의 맨 뒤에 가서 다시 줄을 서는 방식이다.</li>
  <li>그래서 모든 프로세스는 <code class="language-plaintext highlighter-rouge">Ready queue</code>의 크기만큼 기다리게 되는데 수행 시간이 짧은 프로세스는 그만큼 빨리 <code class="language-plaintext highlighter-rouge">CPU</code>를 쓰고 <code class="language-plaintext highlighter-rouge">Ready queue</code>에서 빠져나가기 때문에 각 프로세스의 대기 시간은 본인의 <code class="language-plaintext highlighter-rouge">CPU</code> 사용 시간에 비례하게 된다.</li>
  <li>할당 시간이 너무 크면 <code class="language-plaintext highlighter-rouge">FCFS</code>와 다를 바가 없고 너무 작으면 <code class="language-plaintext highlighter-rouge">context switch</code>가 자주 일어나 오버헤드가 커지기 때문에 적절한 중간값을 찾는 것이 좋다.</li>
</ul>

<h2 id="multilevel-queue">Multilevel Queue</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Ready queue</code>를 작업의 종류에 따라 여러 개로 분할해서 각 큐마다 다른 스케줄링 알고리즘을 적용한다.</li>
  <li>예를 들어 <code class="language-plaintext highlighter-rouge">interactive</code>한 작업들이 담긴 큐라면 <code class="language-plaintext highlighter-rouge">RR</code> 스케줄링을 적용하고 <code class="language-plaintext highlighter-rouge">CPU burst</code> 작업들이 담긴 큐라면 <code class="language-plaintext highlighter-rouge">FCFS</code> 스케줄링을 적용하는 것이다.</li>
  <li>이 때 <code class="language-plaintext highlighter-rouge">Starvation</code>을 방지하기 위해서 각 큐에 <code class="language-plaintext highlighter-rouge">CPU time</code>을 적절한 비율로 할당한다.
    <ul>
      <li>예) <code class="language-plaintext highlighter-rouge">RR</code> 스케줄링 큐에는 80%를 할당하고 <code class="language-plaintext highlighter-rouge">FCFS</code> 스케줄링 큐에는 20% 할당</li>
    </ul>
  </li>
</ul>

<h2 id="multilevel-feedback-queue">Multilevel Feedback Queue</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Multilevel Queue</code>에서는 한 번 큐가 결정되면 다른 큐로 이동할 수 없어서 나중에 프로세스의 <code class="language-plaintext highlighter-rouge">burst time</code>이 바뀌게 되어도 계속 맞지 않는 큐에 있어야 할 수 있다.</li>
  <li>이것을 보완한 것이 <code class="language-plaintext highlighter-rouge">Multilevel Feedback Queue</code>인데 프로세스가 다른 큐로 이동이 가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">Aging</code>을 이런 방식으로 구현할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">Multilevel Feedback Queue scheduler</code>를 정의하는 파라미터들
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Queue</code>에 있는 작업의 수 : 작업의 수가 적은 큐에 먼저 할당</li>
      <li>각 큐의 스케줄링 알고리즘</li>
      <li>프로세스를 상위 큐로 보내는 기준 (예: <code class="language-plaintext highlighter-rouge">CPU</code> 사용시간이 짧을 수록)</li>
      <li>프로세스를 하위 큐로 보내는 기준 (예: <code class="language-plaintext highlighter-rouge">CPU</code> 사용시간이 길수록)</li>
      <li>프로세스가 <code class="language-plaintext highlighter-rouge">CPU</code> 서비스를 받으려 할 때 들어갈 큐를 결정하는 기준</li>
    </ul>
  </li>
</ul>

<h2 id="multiple-processor-schduling">Multiple-Processor Schduling</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CPU</code>가 여러 개인 경우 스케줄링이 더욱 복잡해진다.</li>
  <li><code class="language-plaintext highlighter-rouge">Homogeneous processor</code>(동종)인 경우
    <ul>
      <li>큐에 한 줄로 세워서 각 프로세서가 알아서 꺼내가게 할 수 있다.</li>
      <li>반드시 특정 프로세서에서 수행되어야 하는 프로세스가 있는 경우에는 더 복잡해짐</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Load sharing</code>
    <ul>
      <li>일부 프로세서에 job이 몰리지 않도록 부하를 적절히 공유하는 메커니즘 필요</li>
      <li>별개의 큐를 두는 방법 vs. 공동 큐를 사용하는 방법</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Symmetric Multiprocessing (SMP)</code>
    <ul>
      <li>각 프로세서가 각자 알아서 스케줄링 결정</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Asymmetric multiprocessing</code>
    <ul>
      <li>하나의 프로세서가 시스템 데이터의 접근과 공유를 책임지고 나머지 프로세서는 거기에 따름</li>
    </ul>
  </li>
</ul>

<h2 id="real-time-scheduling">Real-Time Scheduling</h2>
<ul>
  <li>데드 라인이 있는 작업들에 적용되는 스케줄링</li>
  <li><code class="language-plaintext highlighter-rouge">Hard real-time systems</code> : 반드시 정해진 시간 안에 끝내도록 스케줄링</li>
  <li><code class="language-plaintext highlighter-rouge">Soft real-time computing</code> : 데드 라인을 조금 어겨도 괜찮기 때문에 <code class="language-plaintext highlighter-rouge">Soft real-time task</code>는 일반 프로세스에 비해 높은 우선순위를 갖게 한다.</li>
</ul>

<h2 id="thread-scheduling">Thread Scheduling</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Local Scheduling</code> : <code class="language-plaintext highlighter-rouge">User level thread</code>일 경우 사용자 수준의 스레드 라이브러리에 의해 어떤 스레드를 스케줄 할 지 결정</li>
  <li><code class="language-plaintext highlighter-rouge">Global Scheduling</code> : <code class="language-plaintext highlighter-rouge">Kernal level thread</code>인 경우 일반 프로세스와 마찬가지로 커널의 단기 스케줄러가 어떤 스레드를 스케줄 할 지 결정</li>
</ul>

<h2 id="스케줄링-알고리즘-평가">스케줄링 알고리즘 평가</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Queueing models</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">확률 분포</code>로 주어지는 <code class="language-plaintext highlighter-rouge">arrival rate</code>와 <code class="language-plaintext highlighter-rouge">service rate</code> 등을 통해 각종 <code class="language-plaintext highlighter-rouge">performance index</code> 값을 계산하는데 요즘은 잘 안 쓴다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Implementation (구현) &amp; Measurement (성능 측정)</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">실제 시스템</code>에 알고리즘을 <code class="language-plaintext highlighter-rouge">구현</code>하여 실제 작업(<code class="language-plaintext highlighter-rouge">workload</code>)에 대해서 성능을 <code class="language-plaintext highlighter-rouge">측정</code> 비교하는 방식으로 많이 쓰는 방식</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Simulation (모의 실험)</code>
    <ul>
      <li>알고리즘을 <code class="language-plaintext highlighter-rouge">모의 프로그램</code>으로 작성 후 <code class="language-plaintext highlighter-rouge">trace</code>를 입력으로 하여 결과 비교<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">운영체제 - 이화여자대학교 KOCW 공개강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Operating System" /><category term="CS" /><category term="OS" /><category term="CpuScheduling" /><summary type="html"><![CDATA[👀 CPU-Burst time 프로세스의 실행은 CPU를 얻어서 작업을 수행하는 것과 I/O 작업을 수행하는 것으로 나눌 수 있다. 이 때 CPU만 쓰면서 Instruction을 실행하는 단계는 CPU burst라 하고 I/O만 실행하는 단계는 I/O burst라 한다. 현재 프로세스가 CPU를 사용중이라면 다른 프로세스는 사용이 끝날 때까지 기다려야 하겠지만 I/O 작업중이라면 다른 프로세스가 CPU를 쓸 수 있다. 프로세스의 종류는 여러 가지가 있기 때문에 시스템 자원을 효율적으로 쓸 수 있도록 CPU 스케줄링이 필요하다.]]></summary></entry><entry><title type="html">컴퓨터 네트워크) 데이터 통신</title><link href="http://localhost:4000/computer%20network/computer-network-02/" rel="alternate" type="text/html" title="컴퓨터 네트워크) 데이터 통신" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/computer%20network/computer-network-02</id><content type="html" xml:base="http://localhost:4000/computer%20network/computer-network-02/"><![CDATA[<h1 id="전송-모드">전송 모드</h1>
<h2 id="병렬-전송parallel-transfer">병렬 전송(Parallel Transfer)</h2>
<ul>
  <li>여러 전송라인을 통해 여러 비트들을 동시에 전송</li>
  <li>두 장치들간의 거리가 짧은 경우에 일반적으로 사용
    <ul>
      <li>예) PC에서 프린터로 전송하는 것</li>
      <li>예) 컴퓨터와 주변 장치들간의 연결</li>
    </ul>
  </li>
  <li>긴 거리를 병렬 전송으로 전송하면 비용이 많이 들어서 효율적이지 않다.</li>
</ul>

<h2 id="직렬-전송serial-transfer">직렬 전송(Serial Transfer)</h2>
<ul>
  <li>하나의 전송라인을 사용하여 하나씩 모든 비트를 보낸다.</li>
  <li>긴 거리를 전송할 때 병렬 전송에 비해 적은 비용이 들고 신뢰성 증가</li>
  <li>하지만 비트를 하나씩 보내는 만큼 병렬 전송에 비해 느리다.</li>
</ul>

<h2 id="비동기식-전송">비동기식 전송</h2>
<ul>
  <li>한 번에 한 문자씩 보내거나 받는 방식</li>
  <li>문자는 7~8 비트로 구성되며, 문자의 앞에 시작비트(Start bit)를, 끝에는 정지비트(Stop bit)를 첨가해서 보냄</li>
  <li>송신측과 수신측 사이에 동기를 맞추기 위한 클럭 신호를 사용하지 않음</li>
  <li>시작비트는 수신측에 문자에 해당하는 비트가 따라올 것이라는 것을 알려주는 역할</li>
  <li>문자 비트들을 모두 수신하면 정지비트가 뒤따른다.</li>
  <li>키보드와 프린터 같이 느린 장치들을 위해 사용되며 높은 오버헤드를 가진다.</li>
</ul>

<h2 id="동기식-전송">동기식 전송</h2>
<ul>
  <li>정해진 수 만큼의 문자들을 하나의 그룹(프레임)으로 만들어서 일시에 전송하는 방법</li>
  <li>일반적으로 비동기식 전송에 비해서 더 빠르다.</li>
  <li>송신측과 수신측이 하나의 기준 클럭으로 동기신호를 맞추어 동작</li>
  <li>동기화를 위한 클럭라인이 필요하다.</li>
  <li>일반적으로 많이 사용하는 방식</li>
</ul>

<h3 id="바이트기반-전송byte-oriented-transmission">바이트기반 전송(Byte-Oriented Transmission)</h3>
<ul>
  <li>각 프레임을 바이트(문자)의 연속으로 간주하는 방식</li>
  <li>STX(Start of Text), ETX(End of Text), DLE(Data-Link Escape)로 프레임의 시작과 끝을 구분</li>
  <li>예) BISYNC, PPP, DDCMP 등</li>
</ul>

<h3 id="비트기반-전송bit-oriented-transmission">비트기반 전송(Bit-Oriented Transmission)</h3>
<ul>
  <li>일반적으로 많이 사용하는 방식</li>
  <li>각 프레임을 비트의 연속으로 간주하는 방식</li>
  <li>프레임의 시작과 끝을 알리기 위해 플래그(Flag)라고 하는 특수한 비트 패턴, “01111110”을 사용</li>
  <li>예) 인터넷에서의 이더넷(Ethernet)과 HDLC(High-level Data Link Control) 등<br /><br /></li>
</ul>

<h2 id="비트-스터핑bit-stuffing">비트 스터핑(Bit Stuffing)</h2>
<ul>
  <li>비트기반 전송에서 프레임의 시작과 끝이 아닌 데이터 필드에 프레임의 시작과 끝을 알리는 플래그가 포함될 수 있다. 그러면 전송이 아직 끝나지 않았는데 수신측에서는 전송이 끝난 것으로 간주하고 데이터 받기를 중단할 것이다.</li>
  <li>그래서 이걸 해결하기 위해 사용하는 기법이 비트 스터핑 기법이다.</li>
</ul>

<h3 id="비트-스터핑-방법">비트 스터핑 방법</h3>
<ul>
  <li>송신측 : 보낼 프레임의 데이터 필드에서 연속된 5개의 1을 발견하면 다섯 번째 1 뒤에 0을 추가함. 이렇게 하면 시작과 끝 부분 외에는 1이 연속해서 6개 위치하는 경우가 없어진다.</li>
  <li>수신측 : 연속되는 5개의 1이 수신되고 나서 0이 수신되면 이 0은 비트 스터핑 된 것이라 간주하고 제거함<br /><br /><br /></li>
</ul>

<h2 id="단방향-반이중-전이중">단방향, 반이중, 전이중</h2>
<h3 id="단방향simplex">단방향(Simplex)</h3>
<ul>
  <li>한 방향으로만 신호 전송이 가능한 형태</li>
  <li>예) 공항 모니터, 프린터, TV 방송</li>
</ul>

<h3 id="반이중half-duplex">반이중(Half duplex)</h3>
<ul>
  <li>양쪽 방향에서 보내고 받을 수 있지만 교대로 전송만 가능</li>
  <li>예) 무전기</li>
</ul>

<h3 id="전이중full-duplex">전이중(Full duplex)</h3>
<ul>
  <li>양쪽 호스트가 동시에 데이터전송 가능</li>
  <li>예) 인터넷<br /><br /><br /></li>
</ul>

<h1 id="교환-기술">교환 기술</h1>
<ul>
  <li>N개의 통신 장비를 각각 직접 연결하면 필요한 연결선의 갯수가 너무 많아진다.</li>
  <li>이것에 대한 해결방안으로 각각의 장비들은 통신망에 연결한 뒤 통신망을 이용해 서로 데이터를 주고 받는데 이걸 좀 더 효과적으로 운영하기 위해 교환 기술(Switching Technology)을 사용한다.</li>
</ul>

<h2 id="회선-교환circuit-switching">회선 교환(Circuit Switching)</h2>
<ul>
  <li>공중 전화 망에서 사용</li>
  <li>데이터 전송 과정 : 회선 설정 - 데이터 전송 - 회선 해제</li>
  <li>단점 : 회선을 설정하고 해제할 때까지 채널의 대역폭을 독점하기 때문에 다른 회선을 동시에 사용할 수 없다.</li>
  <li>장점 : 단점의 이유로 신뢰성 있는 데이터 전송이 가능하며 일정한 데이터 전송률로 데이터를 전송한다.</li>
  <li>회선 설정(call setup) 시간이 필요하며 링크 및 스위칭 장비가 성능에 영향을 미친다.<br /><br /><br /></li>
</ul>

<h1 id="오류-검출과-교정기법">오류 검출과 교정기법</h1>
<h2 id="해밍코드오류-교정-코드">해밍코드(오류 교정 코드)</h2>
<ul>
  <li>N 비트의 데이터에 k개의 패리티 비트를 더하여 (n+k)비트의 코드워드(Codeword)를 생성</li>
  <li>일종의 비트마스킹 기법으로 오류를 검출할 수 있다.</li>
  <li>N개의 비트를 사용해서 오류가 생긴 비트를 검출할 것이기 때문에 N 비트 데이터와 k개의 패리티 비트를 사용한다고 할 때 <code class="language-plaintext highlighter-rouge">2^k &gt;= n + k + 1</code> 라는 수식이 성립해야 한다.(1을 더해주는 이유는 오류가 생기지 않는 경우도 표현하기 위해서)</li>
  <li>수신측은 <code class="language-plaintext highlighter-rouge">XOR</code> 연산을 통해 syndrome을 계산해서 syndrome을 10진수로 바꾼 값이 오류발생 위치(syndrome의 모든 비트가 0이면 오류가 없음)<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/cview.do?cid=5959f58996c6bd25">데이터 통신과 컴퓨터 네트워크 - 동서대학교 KOCW 공개강의</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Computer Network" /><category term="CS" /><category term="Network" /><summary type="html"><![CDATA[전송 모드 병렬 전송(Parallel Transfer) 여러 전송라인을 통해 여러 비트들을 동시에 전송 두 장치들간의 거리가 짧은 경우에 일반적으로 사용 예) PC에서 프린터로 전송하는 것 예) 컴퓨터와 주변 장치들간의 연결 긴 거리를 병렬 전송으로 전송하면 비용이 많이 들어서 효율적이지 않다.]]></summary></entry><entry><title type="html">Java) BOJ 18870. 좌표 압축</title><link href="http://localhost:4000/boj/boj18870-java/" rel="alternate" type="text/html" title="Java) BOJ 18870. 좌표 압축" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj18870-java</id><content type="html" xml:base="http://localhost:4000/boj/boj18870-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/18870">https://www.acmicpc.net/problem/18870</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 512 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>수직선 위에 N개의 좌표 X1, X2, …, XN이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.</p>
  </li>
  <li>
    <p>Xi를 좌표 압축한 결과 X’i의 값은 Xi &gt; Xj를 만족하는 서로 다른 좌표의 개수와 같아야 한다.</p>
  </li>
  <li>
    <p>X1, X2, …, XN에 좌표 압축을 적용한 결과 X’1, X’2, …, X’N를 출력해보자.<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 N이 주어진다.</li>
  <li>둘째 줄에는 공백 한 칸으로 구분된 X1, X2, …, XN이 주어진다.</li>
  <li>1 ≤ N ≤ 1,000,000</li>
  <li>-109 ≤ Xi ≤ 109<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄에 X’1, X’2, …, X’N을 공백 한 칸으로 구분해서 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>입력받은 수 배열에서 i번째 수보다 작은 수의 갯수를 세어서 i번째에 출력하면 되는데 i번째 수보다 작은 수가 몇 개인지 알려면 오름차순으로 정렬을 해 봐야 한다.</li>
  <li>오름차순으로 정렬을 해 보면 i번째 수의 앞에 있는 수들은 다 작은 수들이니까 배열을 순회하면서 그 수가 몇 개인지 세면 i번째 수를 압축한 수가 된다.</li>
  <li>
    <p>정답 출력 형식을 보면 입력된 숫자의 순서대로 압축한 수를 출력해야 하는데 입력 배열을 정렬해 버리면 순서가 흐트러져서 정답 형식으로 출력할 수 없다. 그래서 입력 배열과 같은 임시 배열을 만들어 정렬한다.<br /></p>
  </li>
  <li>그런데 최대 백만개가 입력으로 주어지는데 2중 for문을 통해 하나씩 비교하는 <code class="language-plaintext highlighter-rouge">O(n^2)</code> 알고리즘을 사용하면 시간초과를 받을 것이기 때문에 정렬 알고리즘은 <code class="language-plaintext highlighter-rouge">O(n log n)</code> 시간복잡도를 가지는 것을 쓰는 것이 좋다.</li>
  <li>그리고 입력으로 중복된 수가 들어오는데 예제의 답을 보면 중복된 수는 카운트하지 않는다.</li>
  <li>즉 1, 1, 2 일 때 2보다 작은 수인 1이 2개 있는데 이럴 경우 답은 0, 0, 1이 되어야 한다. 2보다 작은 수는 1개가 되어야 한다.</li>
  <li>
    <p>그래서 오름차순으로 정렬하고 난 후 중복되는 숫자들은 제거해 주어야 한다. 중복 숫자를 제거하지 않으면 i번째 수보다 작은 수를 셀 때 오차가 생길 것이다.<br /></p>
  </li>
  <li>중복된 숫자들을 제거하고 나면 &lt;i번째 숫자, i번째 숫자보다 작은 숫자의 갯수&gt; pair를 저장하는 map을 만들어서 각 원소를 삽입해준다.</li>
  <li>
    <p>그 다음 마지막으로 입력 원본 배열을 순회하면서 map에서 i번째 원소를 key로 가지는 value를 찾아 출력하면 된다.<br /></p>
  </li>
  <li>시간제한이 2초인데 2788ms로 통과된 거 보면 자바는 느려서 시간을 좀 더 주는 것 같다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 2788 ms</li>
  <li>메모리 : 254876 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/1cd7a372bd0ad6186aadcb222ca3afc6.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No18870" /><category term="Sorting" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/18870 제한 시간 제한 : 2 초 메모리 제한 : 512 MB]]></summary></entry><entry><title type="html">Java) BOJ 1181. 단어 정렬</title><link href="http://localhost:4000/boj/boj1181-java/" rel="alternate" type="text/html" title="Java) BOJ 1181. 단어 정렬" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj1181-java</id><content type="html" xml:base="http://localhost:4000/boj/boj1181-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/1181">https://www.acmicpc.net/problem/1181</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.</li>
</ul>

<ol>
  <li>길이가 짧은 것부터</li>
  <li>길이가 같으면 사전 순으로<br /><br /></li>
</ol>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 주어지는 문자열의 길이는 50을 넘지 않는다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>조건에 따라 정렬하여 단어들을 출력한다. 단, 같은 단어가 여러 번 입력된 경우에는 한 번씩만 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>Collections.sort와 Comparator 람다식을 이용해 구현했다.</li>
  <li>마지막에 정렬한 값을 출력할 때엔 equals를 통한 value 비교를 해서 중복값은 걸러지도록 했다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 392 ms</li>
  <li>메모리 : 23208 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/55e1fca4233f64a9249c59ee80aeb16f.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No1181" /><category term="Sorting" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/1181 제한 시간 제한 : 2 초 메모리 제한 : 256 MB]]></summary></entry><entry><title type="html">Java) BOJ 11651. 좌표 정렬하기2</title><link href="http://localhost:4000/boj/boj11651-java/" rel="alternate" type="text/html" title="Java) BOJ 11651. 좌표 정렬하기2" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj11651-java</id><content type="html" xml:base="http://localhost:4000/boj/boj11651-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/11651">https://www.acmicpc.net/problem/11651</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 1 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>2차원 평면 위의 점 N개가 주어진다. 좌표를 y좌표가 증가하는 순으로, y좌표가 같으면 x좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.<br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>11650번에서 썼던 Comparator 함수에서 기준값을 x에서 y로만 바꿔주었다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 860 ms</li>
  <li>메모리 : 49896 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/bafcfe58127991148c9f70bab678805d.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No11651" /><category term="Sorting" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/11651 제한 시간 제한 : 1 초 메모리 제한 : 256 MB]]></summary></entry><entry><title type="html">Java) BOJ 11650. 좌표 정렬하기</title><link href="http://localhost:4000/boj/boj11650-java/" rel="alternate" type="text/html" title="Java) BOJ 11650. 좌표 정렬하기" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj11650-java</id><content type="html" xml:base="http://localhost:4000/boj/boj11650-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/11650">https://www.acmicpc.net/problem/11650</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 1 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>2차원 평면 위의 점 N개가 주어진다. 좌표를 x좌표가 증가하는 순으로, x좌표가 같으면 y좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.<br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>처음엔 <code class="language-plaintext highlighter-rouge">Pair</code> 클래스에서 <code class="language-plaintext highlighter-rouge">Comparable</code>을 구현해서 썼는데 리턴값을 잘못 설정했는지 계속 7%에서 틀렸다 ㅠ.ㅠ</li>
  <li>그래서 구글링해서 Comparator 람다식으로 바꾸고 통과함<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 800 ms</li>
  <li>메모리 : 51232 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/49b9efbb416fe3905a7e48e17b4d3990.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No11650" /><category term="Sorting" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/11650 제한 시간 제한 : 1 초 메모리 제한 : 256 MB]]></summary></entry><entry><title type="html">Java) BOJ 10814. 나이순 정렬</title><link href="http://localhost:4000/boj/boj10814-java/" rel="alternate" type="text/html" title="Java) BOJ 10814. 나이순 정렬" /><published>2022-02-27T00:00:00+09:00</published><updated>2022-02-27T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj10814-java</id><content type="html" xml:base="http://localhost:4000/boj/boj10814-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/10814">https://www.acmicpc.net/problem/10814</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.</li>
</ul>

<ol>
  <li>길이가 짧은 것부터</li>
  <li>길이가 같으면 사전 순으로<br /><br /></li>
</ol>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 주어지는 문자열의 길이는 50을 넘지 않는다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>조건에 따라 정렬하여 단어들을 출력한다. 단, 같은 단어가 여러 번 입력된 경우에는 한 번씩만 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>Collections.sort와 Comparator 람다식을 이용해 구현했다.</li>
  <li>마지막에 정렬한 값을 출력할 때엔 equals를 통한 value 비교를 해서 중복값은 걸러지도록 했다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 392 ms</li>
  <li>메모리 : 23208 KB<br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/978be8ad9674667c38e12894cd1c7144.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No10814" /><category term="Sorting" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/10814 제한 시간 제한 : 2 초 메모리 제한 : 256 MB]]></summary></entry></feed>