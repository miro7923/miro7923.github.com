<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-05T20:27:19+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부 기록하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 13 - 대분류별 상품목록페이지에서 소분류별 상품 출력하는 기능 구현</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-13/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 13 - 대분류별 상품목록페이지에서 소분류별 상품 출력하는 기능 구현" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-13</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-13/"><![CDATA[<ul>
  <li>작성일 : 2022.05.05</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>

<p align="center"><img src="../../assets/images/unomas_dcate1.png" width="900" /></p>

<ul>
  <li>상품목록페이지에서 소분류를 클릭하면 선택한 소분류별로 모아볼 수 있는 기능을 구현했다.</li>
</ul>

<h2 id="prodpagingjava">ProdPaging.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdPaging</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">prod_category</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>상품목록페이지에서 상품을 출력할 때 DB에서 한 페이지에 보여줄 만큼만 가져와서 출력할 것인데 그럴려면 DB에서 조회시 지정해줘야 할 파라미터값이 많다. <code class="language-plaintext highlighter-rouge">SqlSession</code>의 <code class="language-plaintext highlighter-rouge">selectList()</code>와 같은 메서드를 사용할 때 전달 인자값은 하나만 지정할 수 있기 때문에 둘 이상을 보내려면 <code class="language-plaintext highlighter-rouge">Map</code>을 사용하거나 <code class="language-plaintext highlighter-rouge">VO</code> 객체를 만들어 전달해야 하는데 페이징 처리용 정보는 여러 메서드에서 사용되기 때문에 <code class="language-plaintext highlighter-rouge">VO</code> 객체를 만들었다.</li>
</ul>

<h2 id="productmapperxml">productMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 소분류별로 상품 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getDcateProducts"</span> <span class="na">resultType=</span><span class="s">"ProductVO"</span><span class="nt">&gt;</span>
        SELECT * 
        FROM products 
        WHERE prod_category = #{prod_category}
        LIMIT #{startRow}, #{pageSize}
    <span class="nt">&lt;/select&gt;</span>
    
    <span class="c">&lt;!-- 소분류별 상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getDcateCnt"</span> <span class="na">resultType=</span><span class="s">"Integer"</span><span class="nt">&gt;</span>
        SELECT count(*) 
        FROM products 
        WHERE prod_category = #{prod_category}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>소분류는 소분류를 저장한 테이블에서 <code class="language-plaintext highlighter-rouge">1 - 고구마, 감자, 당근 / 2 - 양파, 대파, 마늘, 배추</code>와 같은 형태로 인덱스 번호를 가지고 저장되어 있다. 그리고 모든 상품은 자기가 속한 소분류의 인덱스 번호를 외래키로 가지고 있다. 그래서 사용자가 화면에 보여지는 소분류에 인덱스 번호를 매핑해 놓고 클릭하면 해당 번호로 상품들을 가져오도록 한다.</li>
  <li>이때 <code class="language-plaintext highlighter-rouge">LIMIT</code> 범위 안의 상품들만 가져오도록 한다.(상품의 개수가 몇 백개, 몇 만개 이상으로 많아졌는데 한 페이지에 그걸 다 출력하기 위해 가져온다면… 페이지는 응답이 없을 것이다…)</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>
	
	<span class="c1">// 소분류별로 분류해서 가져오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 소분류별 상품 개수</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getDcateProducts"</span><span class="o">,</span> <span class="n">pp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getDcateCnt"</span><span class="o">,</span> <span class="n">prod_category</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DAO</code>를 통해 DB에서 상품 정보를 불러온다.</li>
</ul>

<h2 id="productdaotestjava">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">소분류별상품출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ProdPaging</span> <span class="n">pp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPaging</span><span class="o">();</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setStartRow</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setPageSize</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setProd_category</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="mi">2</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 코드에 넣기 전 테스트를 진행했다. 결과가 잘 나왔기 때문에 다음 단계로 넘어간다.</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
	
	<span class="c1">// 소분류별로 분류해서 가져오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 소분류별 상품 개수</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="n">prod_category</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스도 연결해 준다. 서비스 레이어에서는 DB단과 컨트롤러단을 연결해 주는 역할을 하기 때문에 DB단 테스트가 잘 되었으면 여기서도 별 문제가 없어야 한다. 그런데 DB단에서는 잘 되는데 서비스단에 자꾸 테스트에 실패하는 것이었다. 같은 쿼리문 그대로 쓰는 건데 무슨 일…?</li>
  <li>일단 STS를 껐다 켜 봤는데 갑자기 잘 되었다. 그냥 이클립스 버그였나보다…</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> 
			<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> 
			<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"dcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">dcate_num</span><span class="o">,</span> 
			<span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 페이징 처리에 필요한 정보를 담은 객체 </span>
        <span class="nc">ProdPaging</span> <span class="n">pp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPaging</span><span class="o">();</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setCateStart</span><span class="o">(</span><span class="n">cateStart</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setCateEnd</span><span class="o">(</span><span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="c1">// 페이징 처리 작업</span>
        <span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
		
        <span class="kt">int</span> <span class="n">curPage</span> <span class="o">=</span> <span class="n">pageNum</span><span class="o">;</span>
		
        <span class="c1">// 현재 페이지정보를 이용해서 시작 행 정보 계산</span>
        <span class="kt">int</span> <span class="n">startRow</span> <span class="o">=</span> <span class="o">(</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageSize</span><span class="o">;</span>
		
        <span class="c1">// 하단 페이징 처리 //////</span>
        <span class="c1">// 현재 분류별 전체 상품 개수 얻기</span>
        <span class="c1">// dcate_num(소분류) 번호가 0이라면 전체를 불러오는 것이고</span>
        <span class="c1">// 1이상이라면 각각의 소분류만 불러오는 것이다.</span>
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dcate_num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="n">dcate_num</span><span class="o">);</span>
        <span class="o">}</span>
		
        <span class="c1">// 페이지 전체 블록 개수 계산</span>
        <span class="kt">int</span> <span class="n">pageCnt</span> <span class="o">=</span> <span class="n">postCnt</span> <span class="o">/</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="o">((</span><span class="n">postCnt</span> <span class="o">%</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
		
        <span class="c1">// 한 번에 보여줄 페이지 블록 개수</span>
        <span class="kt">int</span> <span class="n">pageBlockCnt</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
		
        <span class="c1">// 시작 페이지 번호 구하기</span>
        <span class="kt">int</span> <span class="n">startBlock</span> <span class="o">=</span> <span class="o">((</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">pageBlockCnt</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageBlockCnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 끝 페이지 블록 번호 구하기</span>
        <span class="kt">int</span> <span class="n">endBlock</span> <span class="o">=</span> <span class="n">startBlock</span> <span class="o">+</span> <span class="n">pageBlockCnt</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">endBlock</span> <span class="o">&gt;</span> <span class="n">pageCnt</span><span class="o">)</span>
            <span class="n">endBlock</span> <span class="o">=</span> <span class="n">pageCnt</span><span class="o">;</span>
		
        <span class="n">pp</span><span class="o">.</span><span class="na">setStartRow</span><span class="o">(</span><span class="n">startRow</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setPageSize</span><span class="o">(</span><span class="n">pageSize</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setProd_category</span><span class="o">(</span><span class="n">dcate_num</span><span class="o">);</span>
		
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
		
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="n">productList</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="c1">// 소분류 번호가 0이면 전체 목록을 가져오고 아니라면 해당 소분류에 맞는 상품들을 가져온다.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dcate_num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">productList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductPage</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">productList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
		
        <span class="c1">// 글 목록 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">productList</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcate_num"</span><span class="o">,</span> <span class="n">dcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
		
        <span class="c1">// 페이지 처리 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageCnt"</span><span class="o">,</span> <span class="n">pageCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageBlockCnt"</span><span class="o">,</span> <span class="n">pageBlockCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startBlock"</span><span class="o">,</span> <span class="n">startBlock</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"endBlock"</span><span class="o">,</span> <span class="n">endBlock</span><span class="o">);</span>
		
        <span class="n">model</span><span class="o">.</span><span class="na">addAllAttributes</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 컨트롤러로 와서 아까 작업했던 것들을 연결시켜 준다.</li>
  <li>파라미터로 받은 페이지 정보를 이용해서 현재 페이지에 표시되어야 할 상품 목록을 구해 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한다.</li>
  <li>대분류와 소분류별로 출력할 때 필요한 파라미터값들도 함께 저장해 뷰 페이지에서 다음 목록을 보여주어야 할 때 사용할 수 있도록 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">/product/product_list?cateStart=4&amp;cateEnd=6&amp;topcate_num=2&amp;pageNum=1&amp;dcate_num=0</code></li>
  <li>상품목록페이지에서 대소분류별 출력과 페이징 처리에 필요한 정보들을 <code class="language-plaintext highlighter-rouge">GET</code> 방식으로 파라미터를 넘겨주도록 했다. 그래서 새로운 페이지 호출이 있으면 이 파라미터들을 가지고 컨트롤러로 이동해 DB에서 목록을 불러온 다음 뷰 페이지로 이동하는 것이다.<br /><br /><br /></li>
</ul>

<h1 id="구현하며-했던-고민">구현하며 했던 고민</h1>
<ul>
  <li>이 부분을 구현하면서 상품목록페이지 내에서 소분류를 클릭하면 비동기 방식으로 목록을 가져와서 보여줄 것인지 지금 구현한 방식처럼 동기식으로 목록을 가져올 것인지 좀 고민을 하며 마켓컬리, 쿠팡과 같은 사이트들을 참고했다.</li>
  <li>마켓컬리는 비동기 방식, 쿠팡은 동기 방식이었는데 처음엔 마켓컬리처럼 비동기 방식으로 소분류를 보여주고 싶었지만 그러려면 지금 내가 알고 있는 기술 중에서는 <code class="language-plaintext highlighter-rouge">ajax</code>를 써야 했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"block"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="na"> begin=</span><span class="s">"</span><span class="si">${</span><span class="n">startBlock</span> <span class="si">}</span><span class="s">"</span><span class="na"> end=</span><span class="s">"</span><span class="si">${</span><span class="n">endBlock</span> <span class="si">}</span><span class="s">"</span><span class="na"> step=</span><span class="s">"1"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span&gt;</span>
    <span class="c">&lt;!----&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/product/product_list?cateStart=${cateStart }&amp;cateEnd=${cateEnd }&amp;topcate_num=${topcate_num }&amp;pageNum=${it.index}&amp;dcate_num=${dcate_num}"</span> 
                <span class="na">class=</span><span class="s">"pagingBtn"</span> <span class="na">id=</span><span class="s">"page${it.index }"</span> <span class="na">style=</span><span class="s">"color: black;"</span>
                <span class="na">onclick=</span><span class="s">"changePageNum(${it.index }, ${endBlock });"</span><span class="nt">&gt;</span>${it.index } <span class="c">&lt;!----&gt;</span><span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/span&gt;</span> 
<span class="nt">&lt;/c:forEach&gt;</span>
</code></pre></div></div>

<ul>
  <li>하지만 <code class="language-plaintext highlighter-rouge">ajax</code>로 가져오게 되면 상품 목록을 자바스크립트로 화면에 뿌려줘야 했는데 기존에 상품목록 출력 부분을 구현한 방식은 위와 같이 컨트롤러에서 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한 정보들을 <code class="language-plaintext highlighter-rouge">JSTL</code>로 읽어와 출력하는 방식이었다. 그래서 <code class="language-plaintext highlighter-rouge">ajax</code>로 하려면 상품목록 출력 방식을 다 새로 작성해야 했다. 이렇게 할 시간은 없기 때문에 비동기 방식은 포기하고 쿠팡을 참고해 동기 방식으로 소분류별로 모아서 보여주는 방식을 택했다.</li>
  <li>이번 프로젝트 설계 시에는 상품 목록 페이지에서 카테고리별로 어떻게 보여줄 것이고, 또 정렬 기준별로는 파라미터를 어떻게 받아와서 어떤 통신 방식으로 보여줄 지 상세한 설계를 하지 않고 시작했기 때문에 나중에는 기존에 짜여진 틀 내에서만 구현이 가능한, 한마디로 구현 가능한 선택지가 줄어들게 되는 부분들이 있었다. 설계를 열심히 하고 시작했다고 생각했는데 아직 배울 것이 많이 남았다는 생각이 든다. 다음엔 더 철저하게 설계하고 시작하자!<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-15</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.05 작성자 : 황유진]]></summary></entry><entry><title type="html">Python) BOJ 14502. 연구소</title><link href="http://localhost:4000/boj/boj14502-py/" rel="alternate" type="text/html" title="Python) BOJ 14502. 연구소" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj14502-py</id><content type="html" xml:base="http://localhost:4000/boj/boj14502-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/14502">https://www.acmicpc.net/problem/14502</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 512 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.</p>
  </li>
  <li>
    <p>연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다.</p>
  </li>
  <li>
    <p>일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.</p>
  </li>
  <li>
    <p>벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.</p>
  </li>
  <li>
    <p>연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>
    <p>첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)</p>
  </li>
  <li>
    <p>둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.</p>
  </li>
  <li>
    <p>빈 칸의 개수는 3개 이상이다.<br /><br /></p>
  </li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>‘이것이 취업을 위한 코딩테스트다 with 파이썬’을 참고해서 <code class="language-plaintext highlighter-rouge">DFS</code>로 임의의 위치에 벽을 3개 세웠을 때 안전영역 넓이의 최대값을 구하는 방식으로 풀었다.</li>
  <li>이 문제를 풀기 위한 키포인트는 벽을 3개 세웠을 때의 경우의 수를 모두 탐색하는 것이다. 벽의 위치에 따라 안전영역의 넓이가 달라질텐데, 그 때마다 안전영역의 넓이를 계산해 최대값을 찾아야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">DFS</code>로 완전탐색을 실시한다.<br /><br /></li>
</ul>

<h1 id="전체-코드">전체 코드</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">tmp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">virus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">virus</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">getScore</span><span class="p">():</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">score</span>

<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">result</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="c1"># 울타리가 3개 설치된 경우 임시배열에 복사
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

        <span class="c1"># 각 바이러스 위치에서 바이러스 전파
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                    <span class="n">virus</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="n">result</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">getScore</span><span class="p">())</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">cnt</span> <span class="o">-=</span> <span class="mi">1</span>

<span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="코드-분석">코드 분석</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># tmp: 벽 설치 후 바이러스가 퍼진 것을 시뮬레이션 할 배열 
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="c1"># 상하좌우 방향 
</span><span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="c1"># 결과값 
</span><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<ul>
  <li>문제 풀이에 필요한 입력을 받는 부분이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">virus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">virus</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DFS</code>로 바이러스를 퍼뜨리는 메서드이다.</li>
  <li>상하좌우 주변에 바이러스를 퍼뜨릴 수 있으면 퍼뜨린 후 자기자신을 재귀호출한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getScore</span><span class="p">():</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">score</span>
</code></pre></div></div>

<ul>
  <li>안전영역의 넓이를 구하는 메서드이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">result</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="c1"># 울타리가 3개 설치된 경우 임시배열에 복사
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

        <span class="c1"># 각 바이러스 위치에서 바이러스 전파
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                    <span class="n">virus</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="c1"># 안전영역의 최대값 구하기 
</span>        <span class="n">result</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">getScore</span><span class="p">())</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># 울타리가 설치 가능하면 설치한 후 재귀호출한다.
</span>                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="c1"># 울타리를 3개 모두 설치한 경우의 안전영역을 계산하고 나왔으면
</span>                <span class="c1"># 다음 탐색을 위해 현재위치의 울타리를 없앤다.
</span>                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">cnt</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div></div>

<ul>
  <li>울타리를 3개 설치해 보고 각 경우마다 바이러스를 퍼뜨려본다. 그 다음 안전영역의 넓이를 구해서 최대값으로 갱신한다.</li>
  <li>재귀함수이기 때문에 무한루프에 빠지지 않도록 조건을 걸어주어야 한다. 벽(cnt)의 개수가 3개가 되면 문제의 조건대로 벽을 모두 세운 것이기 때문에 이 상태에서 바이러스를 퍼뜨려 본 다음에 안전영역의 넓이를 구한다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 3584 ms</li>
  <li>메모리 : 142352 KB<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No14502" /><category term="DFS" /><category term="Graph" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/14502 제한 시간 제한 : 2 초 메모리 제한 : 512 MB]]></summary></entry><entry><title type="html">Python) BOJ 18352. 특정 거리의 도시 찾기</title><link href="http://localhost:4000/boj/boj18352-py/" rel="alternate" type="text/html" title="Python) BOJ 18352. 특정 거리의 도시 찾기" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj18352-py</id><content type="html" xml:base="http://localhost:4000/boj/boj18352-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/18352">https://www.acmicpc.net/problem/18352</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>어떤 나라에는 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재한다. 모든 도로의 거리는 1이다.</p>
  </li>
  <li>
    <p>이 때 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 K인 모든 도시들의 번호를 출력하는 프로그램을 작성하시오. 또한 출발 도시 X에서 출발 도시 X로 가는 최단 거리는 항상 0이라고 가정한다.</p>
  </li>
  <li>
    <p>예를 들어 N=4, K=2, X=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.</p>
  </li>
</ul>

<p align="center"><img src="https://upload.acmicpc.net/a5e311d7-7ce4-4638-88a5-3665fb4459e5/-/preview/" width="400" /></p>

<ul>
  <li>이 때 1번 도시에서 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 2인 도시는 4번 도시 뿐이다.  2번과 3번 도시의 경우, 최단 거리가 1이기 때문에 출력하지 않는다.<br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 도시의 개수 N, 도로의 개수 M, 거리 정보 K, 출발 도시의 번호 X가 주어진다. (2 ≤ N ≤ 300,000, 1 ≤ M ≤ 1,000,000, 1 ≤ K ≤ 300,000, 1 ≤ X ≤ N) 둘째 줄부터 M개의 줄에 걸쳐서 두 개의 자연수 A, B가 공백을 기준으로 구분되어 주어진다. 이는 A번 도시에서 B번 도시로 이동하는 단방향 도로가 존재한다는 의미다. (1 ≤ A, B ≤ N) 단, A와 B는 서로 다른 자연수이다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>
    <p>X로부터 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 K인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.</p>
  </li>
  <li>
    <p>이 때 도달할 수 있는 도시 중에서, 최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력한다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>다익스트라 알고리즘을 이용해 출발점에서 각 도시까지의 최단거리를 구한 뒤 최단거리가 k와 같은 도시를 차례대로 출력했다.<br /><br /></li>
</ul>

<h1 id="전체-코드">전체 코드</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">heapq</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>
<span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

<span class="c1"># 최단거리를 저장할 테이블
# 처음에는 모든 도시의 거리를 무한대로 초기화한다.
</span><span class="n">distance</span> <span class="o">=</span> <span class="p">[</span><span class="n">INF</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">))</span>
    <span class="n">distance</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">dist</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">now</span><span class="p">]:</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>

<span class="n">dijkstra</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
        <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">ans</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="코드-분석">코드 분석</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">heapq</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">))</span> <span class="c1"># (거리, 정점)
</span>    <span class="n">distance</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<ul>
  <li>우선순위 큐를 사용해 현위치에서 최단거리가 가장 짧은 노드를 찾을 것이라서 <code class="language-plaintext highlighter-rouge">heapq</code>를 임포트한다.</li>
  <li>우선순위 큐에는 거리를 기준으로 오름차순 정렬을 할 수 있게 거리가 맨 앞으로 오는 튜플을 만들어 저장한다.</li>
  <li>시작점과의 거리는 0으로 저장한 후 최단거리를 기록하는 테이블의 시작점 인덱스에도 0을 기록해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">dist</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>

        <span class="c1"># 이미 처리된 정점이면 pass
</span>        <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="c1"># 현재 정점과 연결된 정점들을 탐색한다.
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">now</span><span class="p">]:</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>큐의 원소를 하나씩 꺼내서 최단거리를 계산하는 작업을 시작한다.</li>
  <li>만약 최단거리 테이블에 저장된 현재 노드까지의 거리가 방금 큐에서 꺼낸 거리보다 짧으면 이미 최단거리를 찾은 것이니까 더 확인해 볼 필요가 없다.</li>
  <li>그렇지 않고 최단거리를 갱신해주어야 할 필요가 있는 정점이라면 현재 정점과 연결된 정점까지의 거리를 탐색한다.</li>
  <li>이 문제에서 모든 정점간의 거리는 1이니까 현재 정점에서 다음 정점까지의 거리를 구하려면 시작점에서 현재 정점까지의 거리 <code class="language-plaintext highlighter-rouge">dist</code>에 1을 더해주면 된다.</li>
  <li>만약 새로 구한 거리가 최단거리 테이블에 있는 값보다 적으면 갱신한 후 우선순위 큐에 삽입한다.</li>
  <li>이 과정을 큐가 빌 때까지 반복한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dijkstra</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
        <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>다익스트라 메서드를 호출해서 <code class="language-plaintext highlighter-rouge">x</code>에서부터 모든 도시까지의 최단거리를 구한다.</li>
  <li>우선순위 큐 <code class="language-plaintext highlighter-rouge">ans</code>를 만들어 최단거리가 <code class="language-plaintext highlighter-rouge">k</code>와 같은 정점 목록을 저장한다.</li>
  <li>문제에서 도시 번호가 작은 순서대로 출력하라고 했기 때문에 최소힙으로 만들었다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="ow">not</span> <span class="n">ans</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>만약 <code class="language-plaintext highlighter-rouge">ans</code>가 비어 있으면 최단거리가 <code class="language-plaintext highlighter-rouge">k</code>인 도시가 존재하지 않는 것이니까 <code class="language-plaintext highlighter-rouge">-1</code>을 리턴한다.</li>
  <li>그렇지 않으면 <code class="language-plaintext highlighter-rouge">ans</code>를 순회하면서 한 줄에 하나씩 출력하면 된다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 2784 ms</li>
  <li>메모리 : 107284 KB<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No18352" /><category term="Dijkstra" /><category term="Graph" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/18352 제한 시간 제한 : 2 초 메모리 제한 : 256 MB]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-09</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/"><![CDATA[<ul>
  <li>작성일 : 2022.05.03</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>상품 목록페이지를 카테고리별로 상품을 분류해 보여줄 수 있도록 만들었다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 상품 상위 카테고리 이름 가져오기</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>먼저 <code class="language-plaintext highlighter-rouge">DAO</code> 객체를 만드는데 결합도를 낮추기 위해 인터페이스를 만든 다음에 이를 구현하는 클래스를 만들었다.</li>
</ul>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getTopCateName"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 만든 인터페이스를 구현하는 클래스에서 세부 동작을 구현한다.</li>
  <li><code class="language-plaintext highlighter-rouge">SqlSession</code> 생성 테스트는 저번 포스트에서 진행한 결과 성공적이었기 때문에 이를 이용해 DB에 접근하는 동작을 구현한다.</li>
  <li>먼저 상품 목록 페이지의 상단에 출력할 대분류 이름을 테이블에서 가져온다.</li>
</ul>

<h2 id="productmapperxml">ProductMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 상품 상위 카테고리 이름 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getTopCateName"</span> <span class="na">resultType=</span><span class="s">"String"</span><span class="nt">&gt;</span>
        SELECT topcate_name 
        FROM top_category  
        WHERE topcate_num = #{topcate_num}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>매퍼로 이동해서 <code class="language-plaintext highlighter-rouge">SQL</code> 쿼리문을 작성한다.</li>
</ul>

<h2 id="productdaotestjava---실제-구현-전에-dao가-제대로-동작하는-지-테스트">ProductDAOTest.java - 실제 구현 전에 DAO가 제대로 동작하는 지 테스트!</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DAO생성테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"dao : "</span> <span class="o">+</span> <span class="n">dao</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상위카테고리출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트 클래스를 생성해서 아까 만든 <code class="language-plaintext highlighter-rouge">DAO</code>의 동작여부를 테스트한다.</li>
  <li>결과는 성공적!</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="c1">// 상위 카테고리 이름 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>컨트롤러와 DBMS의 결합도를 낮춰줄 서비스 계층을 만든다. 이것 또한 인터페이스를 만든 다음 구현하는 클래스를 만든다.</li>
</ul>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 <code class="language-plaintext highlighter-rouge">DAO</code>에서 만들었던 메서드를 호출해 결과값을 리턴한다.</li>
</ul>

<h2 id="productservicetestjava">ProductServiceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상품상위카테고리이름</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스 또한 테스트를 진행했다. 동작 잘 됨!</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<ul>
  <li>DB에 접근하는 동작의 테스트가 끝났으니까 이제 컨트롤러에서 뷰 페이지로 연결시켜 준다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>


<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 해당 카테고리의 상품 전체 목록 </span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductList</span><span class="o">());</span>
        
        <span class="c1">// 대분류 이름</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        
        <span class="c1">// 소분류 이름 리스트</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>DB에서 가져온 정보를 뷰 페이지에 출력하기 위해 컨트롤러에서 이동 전에 <code class="language-plaintext highlighter-rouge">Model</code> 객체에 저장한다.</li>
  <li>해당 카테고리의 전체 상품을 가져오는 메서드와 소분류 이름 리스트를 가져오는 메서드도 만들었는데 위에서 작성한 것과 같은 과정을 거쳐 만들었기 때문에 생략했다. (글이 너무 길어져서…)</li>
  <li><code class="language-plaintext highlighter-rouge">topcate_num</code> 파라미터값으로 대분류를 불러온 다음 그에 해당하는 소분류와 상품들을 출력할 것이다.</li>
</ul>

<h2 id="productlistjsp">ProductList.jsp</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"categoryBox"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>${topcate }<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"categoryList"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category0"</span> 
            <span class="na">onclick=</span><span class="s">"changeSort(0, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> 전체보기<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"cate"</span><span class="na"> items=</span><span class="s">"</span><span class="si">${</span><span class="n">dcateList</span> <span class="si">}</span><span class="s">"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category${it.index + 1 }"</span>
                <span class="na">onclick=</span><span class="s">"changeSort(${it.index + 1 }, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> ${cate }<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        <span class="nt">&lt;/c:forEach&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>뷰 페이지에서는 <code class="language-plaintext highlighter-rouge">EL</code> 표현식을 사용해 출력한다.</li>
</ul>

<p align="center"><img src="../../assets/images/unomas_prodListAddDb.png" /></p>

<ul>
  <li>그러면 이제 손으로 일일이 타이핑하지 않아도 DB 정보에 맞춰 출력된다! 뿌-듯 😄</li>
  <li>이제 다음에 해야할 것은 헤더에 있는 메뉴에서 상품 목록 페이지를 호출했을 때 각 대분류별로 보여지게 하는 것과 상품 하나를 클릭하면 상세 페이지로 연결되는 것을 구현하는 것이다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-17</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.03 작성자 : 황유진]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 10 - 상품목록 페이징 처리</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-10/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 10 - 상품목록 페이징 처리" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-10</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-10/"><![CDATA[<ul>
  <li>작성일 : 2022.05.03</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>

<p align="center"><img src="../../assets/images/unomas_prodListPaging1.png" width="900" /></p>

<ul>
  <li>상품목록페이지에서 한 페이지에 일정 개수의 상품들을 보여주고, 더 많은 상품은 다음 페이지에서 보여줄 수 있게 하는 페이징처리를 구현했다.</li>
</ul>

<h2 id="productmapperxml">productMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 대분류별 상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getProdCnt"</span> <span class="na">resultType=</span><span class="s">"Integer"</span><span class="nt">&gt;</span>
        SELECT count(*) 
        FROM products AS p 
        JOIN detail_category AS d ON p.prod_category = d.dcate_num 
        JOIN top_category AS t ON d.dcate_num = t.topcate_num 
        WHERE p.prod_category BETWEEN #{cateStart} AND #{cateEnd}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>대분류별 상품 개수를 가져오는 쿼리문이다.</li>
  <li>하나의 대분류에는 여러 개의 소분류가 있고 이들은 각자의 테이블에서 관리된다. 소분류는 대분류의 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호를 참조한다. 그리고 각 상품은 소분류 테이블의 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호를 참조한다. 그래서 각 대분류별로 소분류의 인덱스 범위를 지정해 준 다음에 그걸 기준으로 상품 테이블에서 해당 상품들을 찾아오도록 했다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 대분류별 상품 개수 가져오기</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;();</span>
		
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getProdCnt"</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>먼저 대분류별 전체 상품의 개수를 구해온다.</li>
</ul>

<h2 id="productdaotestjava">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">대분류별상품개수가져오기</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 코드에 넣기 전 테스트를 진행했다. 결과가 잘 나왔기 때문에 다음 단계로 넘어간다.</li>
</ul>

<h2 id="productmapperxml-1">productMapper.xml</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">mapper</span> <span class="n">namespace</span><span class="o">=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">&gt;</span>
    <span class="o">&lt;!--</span> <span class="n">상위</span> <span class="n">카테고리별</span> <span class="n">한</span> <span class="n">페이지에</span> <span class="n">표시할</span> <span class="n">만큼만</span> <span class="n">가져오기</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="n">select</span> <span class="n">id</span><span class="o">=</span><span class="s">"getListOnPage"</span> <span class="n">resultType</span><span class="o">=</span><span class="s">"ProductVO"</span><span class="o">&gt;</span>
        <span class="no">SELECT</span> <span class="o">*</span> 
        <span class="no">FROM</span> <span class="n">products</span> <span class="no">AS</span> <span class="n">p</span> 
        <span class="no">JOIN</span> <span class="n">detail_category</span> <span class="no">AS</span> <span class="n">d</span> <span class="no">ON</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_category</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="na">dcate_num</span> 
        <span class="no">JOIN</span> <span class="n">top_category</span> <span class="no">AS</span> <span class="n">t</span> <span class="no">ON</span> <span class="n">d</span><span class="o">.</span><span class="na">dcate_num</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">topcate_num</span> 
        <span class="no">WHERE</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_category</span> <span class="no">BETWEEN</span> <span class="err">#</span><span class="o">{</span><span class="n">cateStart</span><span class="o">}</span> <span class="no">AND</span> <span class="err">#</span><span class="o">{</span><span class="n">cateEnd</span><span class="o">}</span> 
        <span class="no">ORDER</span> <span class="no">BY</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_regdate</span> <span class="n">desc</span> <span class="no">LIMIT</span> <span class="err">#</span><span class="o">{</span><span class="n">startRow</span><span class="o">},</span> <span class="err">#</span><span class="o">{</span><span class="n">pageSize</span><span class="o">}</span>
    <span class="o">&lt;/</span><span class="n">select</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">mapper</span><span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>다음으로는 한 페이지에 표시할 만큼만 상품 목록을 가져온다.</li>
  <li>지정된 소분류 인덱스 범위 내에서 페이지 하나에 표시할 개수만큼만 가져오는 쿼리문을 작성했다.</li>
</ul>

<h2 id="productdaojava-1">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 상위 카테고리별 한 페이지에 표시할 만큼만 상품 목록 불러오기</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava-1">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;();</span>
		
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startRow"</span><span class="o">,</span> <span class="n">startRow</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageSize"</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getListOnPage"</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>쿼리문이 다소 복잡했으므로 이것 또한 잘 되는지 테스트를 진행했다.</li>
</ul>

<h2 id="productdaotestjava-1">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">페이지개수만큼가져오기테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span> <span class="o">+</span> <span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="../../assets/images/unomas_prodListPaging2.png" width="800" /></p>

<ul>
  <li>의도 했던대로 잘 가져오니까 다음 단계로 진행한다.</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="c1">// 상위 카테고리별 한 페이지에 표시할 만큼만 상품 목록 불러오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 대분류별 상품 개수 가져오기</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="n">startRow</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스도 연결해 준다. 혹시나 해서 이 부분도 테스트를 진행해 봤는데 잘 된다.</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"product/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> 
            <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> 
            <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 페이징 처리 작업</span>
        <span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
		
        <span class="kt">int</span> <span class="n">curPage</span> <span class="o">=</span> <span class="n">pageNum</span><span class="o">;</span>
		
        <span class="c1">// 현재 페이지정보를 이용해서 시작 행 정보 계산</span>
        <span class="kt">int</span> <span class="n">startRow</span> <span class="o">=</span> <span class="o">(</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 하단 페이징 처리 //////</span>
        <span class="c1">// 현재 대분류의 전체 상품 개수 얻기</span>
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="c1">// 페이지 전체 블록 개수 계산</span>
        <span class="kt">int</span> <span class="n">pageCnt</span> <span class="o">=</span> <span class="n">postCnt</span> <span class="o">/</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="o">((</span><span class="n">postCnt</span> <span class="o">%</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
		
        <span class="c1">// 한 번에 보여줄 페이지 블록 개수</span>
        <span class="kt">int</span> <span class="n">pageBlockCnt</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
		
        <span class="c1">// 시작 페이지 번호 구하기</span>
        <span class="kt">int</span> <span class="n">startBlock</span> <span class="o">=</span> <span class="o">((</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">pageBlockCnt</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageBlockCnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 끝 페이지 블록 번호 구하기</span>
        <span class="kt">int</span> <span class="n">endBlock</span> <span class="o">=</span> <span class="n">startBlock</span> <span class="o">+</span> <span class="n">pageBlockCnt</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">endBlock</span> <span class="o">&gt;</span> <span class="n">pageCnt</span><span class="o">)</span>
            <span class="n">endBlock</span> <span class="o">=</span> <span class="n">pageCnt</span><span class="o">;</span>
		
		
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
		
        <span class="c1">// 글 목록 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="n">startRow</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
    
        <span class="c1">// 페이징 처리 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageCnt"</span><span class="o">,</span> <span class="n">pageCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageBlockCnt"</span><span class="o">,</span> <span class="n">pageBlockCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startBlock"</span><span class="o">,</span> <span class="n">startBlock</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"endBlock"</span><span class="o">,</span> <span class="n">endBlock</span><span class="o">);</span>
		
        <span class="n">model</span><span class="o">.</span><span class="na">addAllAttributes</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 컨트롤러로 와서 아까 작업했던 것들을 연결시켜 준다.</li>
  <li>파라미터로 받은 페이지 정보를 이용해서 현재 페이지에 표시되어야 할 상품 목록을 구해 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한다.</li>
  <li>
    <p>뷰 페이지에서 페이지 번호를 눌렀을 때 이동해서 새로운 상품 목록을 보여줄 수 있도록 페이징 처리 정보도 저장해서 넘겨준다.</p>
  </li>
  <li>뷰 페이지를 실행해서 동작시켜보면 한 페이지당 9개씩 보여주고 9개가 넘어가면 새로운 페이지를 생성한다. 다음 페이지로 넘어가면 앞 페이지에서 출력했던 상품들을 제외한 나머지를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-17</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.03 작성자 : 황유진]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 8 - (TDD) Junit4를 사용한 DB 연결 테스트 코드 작성</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-08/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 8 - (TDD) Junit4를 사용한 DB 연결 테스트 코드 작성" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-08</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-08/"><![CDATA[<ul>
  <li>작성일 : 2022.05.02</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>본격적으로 백엔드 작업에 들어가기 앞서 도메인을 생성하고 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 만들어 DB와 연결이 잘 되는지 테스트를 진행했다.</li>
</ul>

<h2 id="pomxml">pom.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.bgee.log4jdbc-log4j2<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.16<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li>요즘 말 많은 <code class="language-plaintext highlighter-rouge">log4j</code>이지만 수업시간에 로그 출력용으로 사용을 해서 우리도 사용할 예정이다. <code class="language-plaintext highlighter-rouge">maven</code>으로 추가해 준다.</li>
</ul>

<h2 id="root-contextxml">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"driverClassName"</span> <span class="na">value=</span><span class="s">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"url"</span> <span class="na">value=</span><span class="s">"jdbc:log4jdbc:mysql://localhost:3306/unomasdb"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"MySQL계정아이디"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"비밀번호"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>
<ul>
  <li>DB 연결시 사용할 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성할 빈을 만든다.</li>
</ul>

<h2 id="datasourcetestjava">DataSourceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataSourceTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">DataSourceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">ds</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DataSource객체확인테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DataSource 객체: "</span> <span class="o">+</span> <span class="n">ds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">src/java/test</code> 경로에 프로젝트를 생성시 기본으로 생성된 패키지와 같은 이름으로 패키지를 만든 뒤 테스트를 진행할 클래스를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">Junit4</code>로 테스트를 진행할 것이라서 <code class="language-plaintext highlighter-rouge">@RunWith(SpringJUnit4ClassRunner.class)</code> 어노테이션을 꼭 달아준다. (안 달면 테스트코드 열심히 작성해도 도로묵~!) 그리고 <code class="language-plaintext highlighter-rouge">@ContextConfiguration</code>로 의존 정보를 읽어올 경로도 지정해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 빈을 만들었으니까 거기로 지정해주면 된다.(손으로 타이핑 할 필요 없이 <code class="language-plaintext highlighter-rouge">file:</code> 까지만 입력하고 컨트롤 엔터 누르면 자동완성된다.)</li>
  <li>
    <p>테스트 진행을 위한 세팅을 마쳤으면 클래스 내부에 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성하고 의존성을 주입해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 객체를 미리 생성해 놨으니까 여기에서는 그걸 가져다 쓰기만 하라는 뜻으로 <code class="language-plaintext highlighter-rouge">@Inject</code> 어노테이션을 붙인다. 만약 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에 해당하는 객체 정보가 없다면 <code class="language-plaintext highlighter-rouge">@Inject</code>를 붙여도 작동하지 않는다.</p>
  </li>
  <li>
    <p>이제 DB 작업을 위한 객체를 생성할 때 스프링 없이 훨씬 레거시 형태로 작업하던 때에 비하면 일일이 <code class="language-plaintext highlighter-rouge">new</code>를 할 필요가 없는 것이 가장 편리한 점이 아닐까! 코드가 훨씬 간결해졌다.</p>
  </li>
  <li>다음으로 테스트를 진행할 메서드를 만든다. 테스트용 메서드 이름은 밖에 보여질 것이 아니라서 보통 알아보기 쉽게 한글로 작성한다고 한다. 메서드 상단에 <code class="language-plaintext highlighter-rouge">@Test</code> 어노테이션을 꼭 붙여주어야 <code class="language-plaintext highlighter-rouge">Junit</code>으로 테스트 진행시 해당 메서드를 호출한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest1.png" width="500" /></p>
<ul>
  <li>여기까지 작성했다면 저장한 뒤 실행하는데 이때 <code class="language-plaintext highlighter-rouge">Junit Test</code> 옵션으로 실행해야 한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest2.png" width="500" /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체에 의존 주입이 잘 되었다면 테스트가 성공했다는 메시지를 볼 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest3.png" width="500" /></p>
<ul>
  <li>만약 실패 메시지가 뜬다면 로그를 잘 읽어보고 원일을 찾아 해결하면 된다.(온통 영어라 좀 긴장되긴 하지만 Caused by~로 시작하는 구문을 읽어보고 본인이 썼던 코드의 흐름을 생각해보면 찾을 수 있다)</li>
</ul>

<h2 id="다시-pomxml">다시 pom.xml</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체가 잘 생성되는 것을 확인했으니까 이제 얘를 사용해서 DB와도 잘 연결되는지 확인해 볼 것이다.</li>
  <li>그 전에 <code class="language-plaintext highlighter-rouge">MyBatis</code>를 사용할 것이라서 <code class="language-plaintext highlighter-rouge">maven</code> 추가를 해 준다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
		
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h2 id="mybatis-configxml">mybatis-config.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>
  
<span class="nt">&lt;configuration&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>의 환경설정 파일도 추가한다.</li>
  <li>DB 매핑 과정에서 축약어로 등록하고 싶은게 있으면 여기서 등록하면 된다.</li>
</ul>

<h2 id="mapper">mapper</h2>

<p align="center"><img src="../../assets/images/junitTest4.png" width="200" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>가 DB와 연결할 때 사용할 쿼리문을 연결시켜줄 파일이 필요하다.</li>
  <li>위의 형태로 폴더와 <code class="language-plaintext highlighter-rouge">xml</code> 파일을 생성한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>일단 파일의 틀만 만들어 놓는다.</li>
</ul>

<h2 id="root-contextxml-1">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSessionFactory"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"configLocation"</span> <span class="na">value=</span><span class="s">"classpath:/mybatis-config.xml"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"mapperLocations"</span> <span class="na">value=</span><span class="s">"classpath:mappers/**/*Mapper.xml"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
	
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSession"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="na">destroy-method=</span><span class="s">"clearCache"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">"sqlSessionFactory"</span> <span class="na">ref=</span><span class="s">"sqlSessionFactory"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
</code></pre></div></div>

<ul>
  <li>빈 생성</li>
  <li>아까 만들었던 <code class="language-plaintext highlighter-rouge">Datasource</code>를 참고해서 생성하도록 한다.</li>
</ul>

<h2 id="mybatistestjava">MyBatisTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">MyBatisTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSessionFactory</span> <span class="n">sqlFactory</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">객체확인</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ sqlSessionFactory: "</span> <span class="o">+</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DB연결</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ session: "</span> <span class="o">+</span> <span class="n">session</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트를 진행할 클래스를 만들어 테스트 코드 작성 후 실행하면 내가 코드를 잘 썼는지 아닌지 알 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest5.png" width="500" /></p>

<ul>
  <li>
    <p>결과는.. 성공!</p>
  </li>
  <li>
    <p>여기까지 완료되었으면 DB 연결을 위한 기본적인 세팅은 다 되었고 앞으로 <code class="language-plaintext highlighter-rouge">VO</code>와 <code class="language-plaintext highlighter-rouge">DAO</code> 객체를 만들어서 데이터베이스 작업을 수행하면 된다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-18</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.02 작성자 : 황유진]]></summary></entry><entry><title type="html">Python) 프로그래머스. 양궁대회</title><link href="http://localhost:4000/programmers/programmers-archery-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. 양궁대회" /><published>2022-05-01T00:00:00+09:00</published><updated>2022-05-01T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-archery-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-archery-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92342">https://programmers.co.kr/learn/courses/30/lessons/92342</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>카카오배 양궁대회가 열렸습니다.</li>
  <li>라이언은 저번 카카오배 양궁대회 우승자이고 이번 대회에도 결승전까지 올라왔습니다. 결승전 상대는 어피치입니다.</li>
  <li>
    <p>카카오배 양궁대회 운영위원회는 한 선수의 연속 우승보다는 다양한 선수들이 양궁대회에서 우승하기를 원합니다. 따라서, 양궁대회 운영위원회는 결승전 규칙을 전 대회 우승자인 라이언에게 불리하게 다음과 같이 정했습니다.</p>
  </li>
  <li>어피치가 화살 n발을 다 쏜 후에 라이언이 화살 n발을 쏩니다.</li>
  <li>점수를 계산합니다.</li>
  <li>
    <p>과녁판은 아래 사진처럼 생겼으며 가장 작은 원의 과녁 점수는 10점이고 가장 큰 원의 바깥쪽은 과녁 점수가 0점입니다.</p>
  </li>
  <li>
    <p>만약, k(k는 1~10사이의 자연수)점을 어피치가 a발을 맞혔고 라이언이 b발을 맞혔을 경우 더 많은 화살을 k점에 맞힌 선수가 k 점을 가져갑니다. 단, a = b일 경우는 어피치가 k점을 가져갑니다. k점을 여러 발 맞혀도 k점 보다 많은 점수를 가져가는 게 아니고 k점만 가져가는 것을 유의하세요. 또한 a = b = 0 인 경우, 즉, 라이언과 어피치 모두 k점에 단 하나의 화살도 맞히지 못한 경우는 어느 누구도 k점을 가져가지 않습니다.</p>
  </li>
  <li>예를 들어, 어피치가 10점을 2발 맞혔고 라이언도 10점을 2발 맞혔을 경우 어피치가 10점을 가져갑니다.</li>
  <li>다른 예로, 어피치가 10점을 0발 맞혔고 라이언이 10점을 2발 맞혔을 경우 라이언이 10점을 가져갑니다.</li>
  <li>모든 과녁 점수에 대하여 각 선수의 최종 점수를 계산합니다.</li>
  <li>최종 점수가 더 높은 선수를 우승자로 결정합니다. 단, 최종 점수가 같을 경우 어피치를 우승자로 결정합니다.</li>
  <li>현재 상황은 어피치가 화살 n발을 다 쏜 후이고 라이언이 화살을 쏠 차례입니다.</li>
  <li>
    <p>라이언은 어피치를 가장 큰 점수 차이로 이기기 위해서 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 구하려고 합니다.</p>
  </li>
  <li>화살의 개수를 담은 자연수 n, 어피치가 맞힌 과녁 점수의 개수를 10점부터 0점까지 순서대로 담은 정수 배열 info가 매개변수로 주어집니다. 이때, 라이언이 가장 큰 점수 차이로 우승하기 위해 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 10점부터 0점까지 순서대로 정수 배열에 담아 return 하도록 solution 함수를 완성해 주세요. 만약, 라이언이 우승할 수 없는 경우(무조건 지거나 비기는 경우)는 [-1]을 return 해주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>1 ≤ n ≤ 10</li>
  <li>info의 길이 = 11
    <ul>
      <li>0 ≤ info의 원소 ≤ n</li>
      <li>info의 원소 총합 = n</li>
      <li>info의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)</li>
    </ul>
  </li>
  <li>라이언이 우승할 방법이 있는 경우, return 할 정수 배열의 길이는 11입니다.
    <ul>
      <li>0 ≤ return할 정수 배열의 원소 ≤ n</li>
      <li>return할 정수 배열의 원소 총합 = n (꼭 n발을 다 쏴야 합니다.)</li>
      <li>return할 정수 배열의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)</li>
      <li>라이언이 가장 큰 점수 차이로 우승할 수 있는 방법이 여러 가지 일 경우, 가장 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.
        <ul>
          <li>가장 낮은 점수를 맞힌 개수가 같을 경우 계속해서 그다음으로 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.</li>
          <li>예를 들어, [2,3,1,0,0,0,0,1,3,0,0]과 [2,1,0,2,0,0,0,2,3,0,0]를 비교하면 [2,1,0,2,0,0,0,2,3,0,0]를 return 해야 합니다.</li>
          <li>다른 예로, [0,0,2,3,4,1,0,0,0,0,0]과 [9,0,0,0,0,0,0,0,1,0,0]를 비교하면[9,0,0,0,0,0,0,0,1,0,0]를 return 해야 합니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>라이언이 우승할 방법이 없는 경우, return 할 정수 배열의 길이는 1입니다.
    <ul>
      <li>라이언이 어떻게 화살을 쏘든 라이언의 점수가 어피치의 점수보다 낮거나 같으면 [-1]을 return 해야 합니다.<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<h2 id="1차-시도">1차 시도</h2>
<ul>
  <li>완전탐색하면 되는 문제같아서 10점부터 차례대로 하나씩 라이언이 맞히지 못했다고 가정하고 경우의 수를 탐색했는데 모든 경우를 고려하는 코드가 아니었던 것인지 60점 조금 안 되는 점수를 받았다.(예제는 다 맞았음 ㅠㅠ)</li>
</ul>

<script src="https://gist.github.com/miro7923/322183682e7f75709a0acff026e6b8a1.js"></script>

<h2 id="2차-시도">2차 시도</h2>
<ul>
  <li>그래서 구글링을 하여 정답 코드를 참고해 풀었다.</li>
  <li><a href="https://velog.io/@hygge/Python-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C-2022-KAKAO-BLIND-RECRUITMENT-BFS">[Python] 프로그래머스 양궁대회 (BFS)</a><br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/db80617186ced5c788e567a2b15970f1.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="DFS" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92342]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 7 - 쇼핑몰 RDBMS 설계 및 생성</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-07/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 7 - 쇼핑몰 RDBMS 설계 및 생성" /><published>2022-05-01T00:00:00+09:00</published><updated>2022-05-01T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-07</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-07/"><![CDATA[<ul>
  <li>작성일 : 2022.05.01</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>프로젝트의 시작부터 부팀장인 <code class="language-plaintext highlighter-rouge">오성은</code>과 함께 설계해 오던 DB 테이블을 드디어 마무리 하고 생성했다.</li>
  <li>이번주부터 백엔드 작업에 들어갈 것이기 때문에 생성된 DB 테이블이 필요했다.</li>
</ul>

<h2 id="쇼핑몰-db-테이블-1n차-설계와-고난">쇼핑몰 DB 테이블 1~n차 설계와 고난</h2>
<ul>
  <li>
    <p>우리의 프로젝트가 3주차에 접어들며 그동안 3번의 회의가 있었다. 회의가 진행될 때마다 새롭게 추가되는 사항이 생겼기 때문에 매주 회의가 끝나면 설계했던 DB 테이블을 수정할 필요가 있었다. 정기 회의가 아니어도 꽤 큰 규모의 DB 테이블을 설계하는 것이 처음이었기 때문에 꽤 자주 수정했던 것 같다.</p>
  </li>
  <li>
    <p>설계 과정에서 어려웠던 점은 주문 테이블의 설계였다.</p>
    <ul>
      <li>왜냐하면 회원 한 명이 여러 개의 상품을 주문했을 때 그 상품정보들을 어떻게 저장해야 할 지 감이 오지 않았기 때문이다.</li>
      <li>일반적인 프로그래밍 언어를 사용해 상품 목록을 관리하면 배열을 만들어 담으면 되는데 DBMS는 그렇지가 않잖아…? 😟 테이블에서 배열 형태를 어떻게 구현하느냐가 최대 난제였다.</li>
      <li>이를 해결하기 위해 함께 DB를 설계하던 부팀장과 많은 의견을 주고 받았다.</li>
    </ul>
  </li>
</ul>

<h3 id="1차로-채택된-의견">1차로 채택된 의견</h3>
<ul>
  <li>테이블에서 <code class="language-plaintext highlighter-rouge">PK</code>로 사용할 인덱스 번호 컬럼(AI)과 주문코드를 저장할 컬럼을 만든다.</li>
  <li>주문이 생기면 한 주문에서 생성된 모든 상품 정보를 주문 테이블에 저장한다. 만약 회원이 딸기, 바나나, 포도 3가지 상품을 주문했다면 각 상품 정보를 담은 로우를 생성하는 것이다. 그리고 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호는 자동으로 1씩 증가되어 각 로우는 1,2,3이라는 인덱스값을 가지게 될 것이다.</li>
  <li>방금 생성된 주문은 하나의 주문이기 때문에 세 상품들은 같은 주문코드를 참고해야 한다. 각 로우의 주문코드 컬럼에는 같은 주문코드를 넣어준다.</li>
  <li>
    <p>DB에서 주문정보를 조회할 때엔 주문코드 필드값을 이용해 가져온다.</p>
  </li>
  <li>다소 복잡한 느낌이 있지만 이 정도면 논리적이라고 생각했다.</li>
</ul>

<h3 id="2차로-채택된-의견">2차로 채택된 의견</h3>
<ul>
  <li>최종 결정하기 전에 이것이 최선일지 경험자의 의견을 듣고 싶어서 학원에서 데이터베이스 수업을 담당하고 계신 강사님한테 여쭤봤다.</li>
  <li>강사님은 주문코드와 상품번호를 복합키로 사용해라는 의견을 주셨다. 주문코드는 주문내역을 조회할 때 다른 테이블에서 참조되어야 하기 때문에 <code class="language-plaintext highlighter-rouge">PK</code>로 설정되어야 하는데 이것 하나만 <code class="language-plaintext highlighter-rouge">PK</code>로 사용하게 되면 주문코드를 여러 로우에 중복해서 넣을 수 없으니까 상품번호도 함께 <code class="language-plaintext highlighter-rouge">PK</code>를 걸어서 복합키로 사용하라는 것이다. 그리고 주문내역을 조회할 때엔 <code class="language-plaintext highlighter-rouge">where</code>절에 주문코드를 기준으로 <code class="language-plaintext highlighter-rouge">select</code> 하는 것이다.</li>
  <li>오.. 우리가 생각했던 흐름과 비슷하면서도 역할이 비슷한 컬럼의 수를 줄일 수 있는 방법이었다. 그래서 주문코드와 상품번호를 복합키로 지정했다.</li>
  <li>테이블을 생성한 뒤 데이터를 삽입하고 조회해 보니까 의도대로 조회가 잘 된다…!</li>
</ul>

<h2 id="완성된-eer-다이어그램">완성된 EER 다이어그램</h2>

<p align="center"><img src="../../assets/images/unomas-db-table-eer-diagram.png" /></p>

<h2 id="테이블-관계">테이블 관계</h2>
<h3 id="회원-테이블">회원 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_userTable.png" width="700" /></p>

<ul>
  <li>회원의 정보를 저장할 <code class="language-plaintext highlighter-rouge">user</code> 테이블은 회원번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>한 명의 회원은 배송지 목록 테이블을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 주문을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 구매를 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 후기글을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 여러 개의 장바구니 번호를 가질 수 있다.</li>
  <li>한 명의 회원은 여러 개의 위시리스트 번호를 가질 수 있다.</li>
</ul>

<h3 id="상품-테이블">상품 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_prodTable.png" width="600" /></p>

<ul>
  <li>상품의 정보를 저장할 <code class="language-plaintext highlighter-rouge">products</code> 테이블은 상품번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>상품 테이블은 여러 주문에 참고될 수 있다.</li>
  <li>상품 테이블은 여러 후기에 참고될 수 있다.</li>
</ul>

<h3 id="상품-카테고리-테이블">상품 카테고리 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_prodCateTable.png" width="400" /></p>

<ul>
  <li>상품 카테고리 테이블은 대분류와 소분류를 저장할 테이블로 나누었다.</li>
  <li>상품 테이블에서는 이를 참조해 사용자 화면에 정렬하여 출력할 것이다.</li>
</ul>

<h3 id="주문-테이블과-결제-테이블">주문 테이블과 결제 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_orderTable.png" width="700" /></p>

<ul>
  <li>주문 정보를 저장할 테이블 <code class="language-plaintext highlighter-rouge">orders</code>는 주문번호와 상품번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>주문을 한 회원정보와 주문된 상품정보를 알아야 하기 때문에 회원번호와 상품번호를 <code class="language-plaintext highlighter-rouge">FK</code>로 가진다.</li>
  <li>주문 테이블은 배송지 주소 정보도 알아야 하기 때문에 회원 한 명의 배송지 정보를 저장할 테이블 <code class="language-plaintext highlighter-rouge">order_addr</code>의 <code class="language-plaintext highlighter-rouge">PK</code>를 <code class="language-plaintext highlighter-rouge">FK</code>로 가진다.</li>
  <li>결제 테이블인 <code class="language-plaintext highlighter-rouge">pay</code>는 위에서 생성된 주문의 결제 정보를 저장한다. 때문에 회원정보와 주문정보를 참조한다.</li>
</ul>

<h3 id="환불과-교환-테이블">환불과 교환 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_refundTable.png" width="700" /></p>

<ul>
  <li>둘 다 원 주문정보가 필요하기 때문에 주문 테이블을 참조한다.</li>
</ul>

<h3 id="배송-테이블">배송 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_deliveriesTable.png" width="700" /></p>

<ul>
  <li>배송에 필요한 회원정보, 주문정보, 배송지 정보를 참조한다.</li>
  <li>배송이 완료되면 해당 데이터는 배송 완료 테이블에도 등록된다.</li>
</ul>

<h3 id="장바구니와-위시리스트-테이블">장바구니와 위시리스트 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_cartTable.png" width="300" /></p>

<ul>
  <li>회원정보와 상품정보를 참조하여 회원 한 명의 장바구니 데이터를 저장한다.</li>
</ul>

<h3 id="리뷰-게시판">리뷰 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_reviewTable.png" width="700" /></p>

<ul>
  <li>상품 하나에 대한 후기 데이터를 저장할 테이블이다.</li>
  <li>회원과 상품 테이블을 참조한다.</li>
</ul>

<h3 id="상품-문의와-그에-대한-댓글-게시판">상품 문의와 그에 대한 댓글 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_prodInquTable.png" width="500" /></p>

<ul>
  <li>상품 하나에 대한 문의 데이터를 저장할 테이블이다.</li>
  <li>회원과 상품 테이블을 참조한다.</li>
  <li>상품 문의에 대해 관리자가 댓글로 답변을 달 것이라서 상품 문의 테이블을 참조하는 댓글 테이블 <code class="language-plaintext highlighter-rouge">prod_comments</code>도 만들었다.</li>
</ul>

<h3 id="관리자-테이블">관리자 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_adminTable.png" width="200" /></p>

<ul>
  <li>관리자의 계정정보를 저장할 테이블이다. 쇼핑몰의 규모가 커지면 관리자가 여러 명 생기게 될 것이라서 따로 만들었다.</li>
</ul>

<h3 id="공지사항-게시판">공지사항 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_boardNoticeTable.png" width="700" /></p>

<ul>
  <li>고객센터에 있는 공지사항 게시판에는 관리자만 글을 쓸 수 있기 때문에 관리자 테이블을 참조한다.</li>
</ul>

<h3 id="자주-묻는-질문-게시판">자주 묻는 질문 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_faqTable.png" width="400" /></p>

<ul>
  <li>자주 묻는 질문 또한 관리자만 작성할 수 있기 때문에 관리자 테이블을 참조한다.</li>
  <li>자주 묻는 질문은 카테고리별로 모아볼 수 있는 기능을 제공하기 위해 전용 카테고리 테이블 <code class="language-plaintext highlighter-rouge">qna_category</code>이 존재한다.</li>
</ul>

<h3 id="11-문의-게시판">1:1 문의 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_qnaTable.png" width="700" /></p>

<ul>
  <li>사용자가 남긴 1:1 문의 데이터를 저장하는 테이블이다.</li>
  <li>여기에도 관리자가 댓글을 답변하는 형태로 구현할 것이라서 전용 댓글 테이블 <code class="language-plaintext highlighter-rouge">qna_comments</code>가 존재한다.</li>
  <li>1:1 문의시 문의 카테고리별 담당자가 모아볼 수 있도록 카테고리 테이블을 참조한다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://litiblue.com/post/mysql-workbench-db/">MySQL Workbench 로 DB 설계하기</a></li>
  <li><a href="https://velog.io/@ash3767/DB-ERD-%EB%AA%A8%EB%8D%B8%EB%A7%81">DB ERD 모델링</a><br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-19</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.01 작성자 : 황유진]]></summary></entry><entry><title type="html">Python) 프로그래머스. 주차 요금 계산</title><link href="http://localhost:4000/programmers/programmers-parking-fee-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. 주차 요금 계산" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-parking-fee-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-parking-fee-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92341">https://programmers.co.kr/learn/courses/30/lessons/92341</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>주차장의 요금표와 차량이 들어오고(입차) 나간(출차) 기록이 주어졌을 때, 차량별로 주차 요금을 계산하려고 합니다.</p>
  </li>
  <li>어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주합니다.</li>
  <li>00:00부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산합니다.</li>
  <li>누적 주차 시간이 기본 시간이하라면, 기본 요금을 청구합니다.</li>
  <li>누적 주차 시간이 기본 시간을 초과하면, 기본 요금에 더해서, 초과한 시간에 대해서 단위 시간 마다 단위 요금을 청구합니다.
    <ul>
      <li>초과한 시간이 단위 시간으로 나누어 떨어지지 않으면, 올림합니다.</li>
      <li>⌈a⌉ : a보다 작지 않은 최소의 정수를 의미합니다. 즉, 올림을 의미합니다.</li>
    </ul>
  </li>
  <li>주차 요금을 나타내는 정수 배열 fees, 자동차의 입/출차 내역을 나타내는 문자열 배열 records가 매개변수로 주어집니다. 차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 return 하도록 solution 함수를 완성해주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>
    <p>fees의 길이 = 4</p>
  </li>
  <li>fees[0] = 기본 시간(분)
    <ul>
      <li>1 ≤ fees[0] ≤ 1,439</li>
      <li>fees[1] = 기본 요금(원)</li>
      <li>0 ≤ fees[1] ≤ 100,000</li>
      <li>fees[2] = 단위 시간(분)</li>
      <li>1 ≤ fees[2] ≤ 1,439</li>
      <li>fees[3] = 단위 요금(원)</li>
      <li>1 ≤ fees[3] ≤ 10,000</li>
    </ul>
  </li>
  <li>1 ≤ records의 길이 ≤ 1,000
    <ul>
      <li>records의 각 원소는 “시각 차량번호 내역” 형식의 문자열입니다.</li>
      <li>시각, 차량번호, 내역은 하나의 공백으로 구분되어 있습니다.</li>
      <li>시각은 차량이 입차되거나 출차된 시각을 나타내며, HH:MM 형식의 길이 5인 문자열입니다.</li>
      <li>HH:MM은 00:00부터 23:59까지 주어집니다.</li>
      <li>잘못된 시각(“25:22”, “09:65” 등)은 입력으로 주어지지 않습니다.</li>
      <li>차량번호는 자동차를 구분하기 위한, `0’~’9’로 구성된 길이 4인 문자열입니다.</li>
      <li>내역은 길이 2 또는 3인 문자열로, IN 또는 OUT입니다. IN은 입차를, OUT은 출차를 의미합니다.</li>
      <li>records의 원소들은 시각을 기준으로 오름차순으로 정렬되어 주어집니다.</li>
      <li>records는 하루 동안의 입/출차된 기록만 담고 있으며, 입차된 차량이 다음날 출차되는 경우는 입력으로 주어지지 않습니다.</li>
      <li>같은 시각에, 같은 차량번호의 내역이 2번 이상 나타내지 않습니다.</li>
      <li>마지막 시각(23:59)에 입차되는 경우는 입력으로 주어지지 않습니다.</li>
      <li>아래의 예를 포함하여, 잘못된 입력은 주어지지 않습니다.
        <ul>
          <li>주차장에 없는 차량이 출차되는 경우</li>
          <li>주차장에 이미 있는 차량(차량번호가 같은 차량)이 다시 입차되는 경우<br /><br /><br /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>간단하게 생각하고 접근했는데 파이썬 자료형에 익숙치 않고 예외 처리를 제대로 해주지 않아서 생각보다 시간이 걸렸다. 파이참 없었으면 못 풀었겠는걸…ㅎ</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">cars = {차량번호 : [누적시간, 입차시간]}</code> 딕셔너리를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">records</code> 배열을 순회하며 현재 시간을 분 단위로 환산한다.</li>
  <li>딕셔너리에 차량번호가 key로 없으면 새로 만든다. <code class="language-plaintext highlighter-rouge">value</code>는 <code class="language-plaintext highlighter-rouge">[0, 분으로 환산한 입차시간]</code><br />
 3-1. key가 있고 <code class="language-plaintext highlighter-rouge">IN</code>이라면 입차시간만 현재시간으로 바꿔준다.<br />
 3-2. key가 있고 <code class="language-plaintext highlighter-rouge">OUT</code>이라면 <code class="language-plaintext highlighter-rouge">2에서 구한 시간 - key에 저장된 입차시간</code>을 누적시간에 더해준다. 이때 출차했다는 표시로 입차시간을 -1로 바꾼다.</li>
  <li>차량번호 오름차순으로 저장할 최소힙을 만든다. <code class="language-plaintext highlighter-rouge">heap = [차량번호, 누적시간]</code> 차량번호 기준으로 정렬할 수 있게 차량번호를 앞에 위치시킨다.</li>
  <li><code class="language-plaintext highlighter-rouge">cars</code>를 순회하며 출차하지 않은 차가 있으면 마감시간인 <code class="language-plaintext highlighter-rouge">23:59</code>까지의 누적시간을 구해서 더해준다.<br />
 5-1. 모든 차량의 번호와 누적시간을 4에서 만든 최소힙에 저장한다.</li>
  <li>최소힙이 빌 때까지 하나씩 <code class="language-plaintext highlighter-rouge">pop</code> 해서 요금을 계산한 뒤 정답배열에 저장한다.<br /><br /></li>
</ol>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/e8665a951cb4ebb1c405b87b4590ada0.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="Math" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92341]]></summary></entry><entry><title type="html">MySQL Workbench에서 EER Diagram model &amp;amp; SQL Script import Guide</title><link href="http://localhost:4000/uno%20mas/db-import-guide/" rel="alternate" type="text/html" title="MySQL Workbench에서 EER Diagram model &amp;amp; SQL Script import Guide" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/db-import-guide</id><content type="html" xml:base="http://localhost:4000/uno%20mas/db-import-guide/"><![CDATA[<ul>
  <li><code class="language-plaintext highlighter-rouge">MySQL Workbench</code>에 내장되어 있는 <code class="language-plaintext highlighter-rouge">EER</code> 다이어그램 제작툴의 사용법과 <code class="language-plaintext highlighter-rouge">SQL</code> 스크립트를 불러와서 테이블 생성하는 법 가이드<br /><br /></li>
</ul>

<h1 id="eer-다이어그램-모델-불러오기">EER 다이어그램 모델 불러오기</h1>
<ol>
  <li><code class="language-plaintext highlighter-rouge">master</code> 브랜치를 <code class="language-plaintext highlighter-rouge">pull</code>한다.</li>
  <li><code class="language-plaintext highlighter-rouge">MySQL Workbench</code> 실행</li>
</ol>

<p align="center"><img src="../../assets/images/workbenchEer1.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>빨간 박스 선택</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer2.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">+</code> 눌러서 모델 추가함</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer3.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>이런 창이 나올 것임. 여기에서 <code class="language-plaintext highlighter-rouge">File</code> 메뉴 클릭</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer4.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Open Model</code> 클릭</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer5.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/Uno-Mas/unomasdb/unomasTable.mwb</code> 경로에 있는 파일 선택하고 <code class="language-plaintext highlighter-rouge">Open</code></li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer6.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>그럼 만들어진 다이어그램 모델 확인 가능!<br /><br /></li>
</ul>

<h1 id="다이어그램-세부사항-확인">다이어그램 세부사항 확인</h1>

<p align="center"><img src="../../assets/images/workbenchEer7.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>테이블 사이 관계선 위에 마우스오버하면 외래키로 연결된 컬럼을 표시해 준다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer8.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>테이블 이름이 있는 영역에 마우스오버하면 이 테이블과 관계를 맺고 있는 테이블들을 표시해준다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer9.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>테이블명을 더블클릭하면 세부사항을 확인할 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer10.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>각 테이블별로 설명도 써 놨으니까 참고하거나 본인이 더 필요하다고 생각되는 메모가 있으면 추가할 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer11.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>컬럼을 클릭하면 주석문 확인이 가능하다. 존재가 이해 안 되는 컬럼은 여기를 참고하고 본인이 필요하면 아래에 주석문 추가 가능</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer17.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>카테고리와 같은 일부 컬럼은 <code class="language-plaintext highlighter-rouge">Trigger</code>에 제약조건을 걸어놨음. 관련해서 작업하는 사람들은 참고<br /><br /></li>
</ul>

<h1 id="공유받은-sql-script로-테이블-생성하기">공유받은 SQL Script로 테이블 생성하기</h1>

<p align="center"><img src="../../assets/images/workbenchEer12.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>스키마 생성한 후 사진상 메뉴로 들어감</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer13.png" width="800" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/Uno-Mas/unomasdb/unomasDbTable.sql</code> 경로에 있는 파일 선택</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer14.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>전체실행 버튼 눌러서 실행하면 테이블 생성됨.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer15.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>하단 로그창에 성공적으로 생성됐다는 메시지 뜨면 다 생성된 것임. 안 보이면 테이블 목록 새로고침하면 보일 것임</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer16.png" width="200" /></p>
<p>￼</p>

<p><br /><br /><br /></p>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://litiblue.com/post/mysql-workbench-db/">MySQL Workbench 로 DB 설계하기</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="MySQLWorkbench" /><category term="Log" /><summary type="html"><![CDATA[MySQL Workbench에 내장되어 있는 EER 다이어그램 제작툴의 사용법과 SQL 스크립트를 불러와서 테이블 생성하는 법 가이드]]></summary></entry></feed>