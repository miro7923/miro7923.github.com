<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-03T16:31:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">MySQL 시작하기</title><link href="http://localhost:4000/mysql/mysql-beginning/" rel="alternate" type="text/html" title="MySQL 시작하기" /><published>2022-02-03T00:00:00+09:00</published><updated>2022-02-03T00:00:00+09:00</updated><id>http://localhost:4000/mysql/mysql-beginning</id><content type="html" xml:base="http://localhost:4000/mysql/mysql-beginning/"><![CDATA[<h1 id="-mysql-시작하기">👀 MySql 시작하기</h1>
<ul>
  <li>맥 기준으로 <code class="language-plaintext highlighter-rouge">MySql</code>을 설치하는 방법에는 2가지가 있는데</li>
  <li><code class="language-plaintext highlighter-rouge">homebrew</code>를 통해 설치하는 방법과</li>
  <li>
    <p>MySql 홈페이지에서 <code class="language-plaintext highlighter-rouge">dmg</code> 파일을 다운받아 설치하는 방법이 있다. <br /><br /></p>
  </li>
  <li>나는 여기서 <code class="language-plaintext highlighter-rouge">homebrew</code>를 통해 설치하는 방법을 택했다.</li>
  <li><code class="language-plaintext highlighter-rouge">homebrew</code>는 맥에서 쓸 수 있는 터미널 버전 앱스토어 같은 느낌으로 개발에 필요한 각종 소프트웨어들을 명령어 한 줄로 간편하게 설치할 수 있다.</li>
</ul>

<h2 id="mysql-설치">MySql 설치</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">homebrew</code>가 설치되어 있다는 전제하에 <code class="language-plaintext highlighter-rouge">homebrew</code> 터미널을 열어 명령어 입력을 통한 설치를 진행할 것인데, 먼저 홈 브루를 최신 버전으로 업데이트 시켜주고 시작하자.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew update
</code></pre></div>    </div>
  </li>
  <li>업데이트가 완료되면 아래 명령어를 입력하면 MySql이 설치된다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install mysql
</code></pre></div>    </div>
  </li>
  <li>설치가 완료된 후
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew list
</code></pre></div>    </div>
  </li>
  <li>를 입력하면 홈 브루를 통해 설치된 프로그램들이 나열되는데 그 중에 mysql이 있으면 설치가 잘 된 것임</li>
</ul>

<h2 id="mysql-실행">MySql 실행</h2>
<ul>
  <li>아까 설치할 때 썼던 터미널창에서 명령어 입력을 통해 <code class="language-plaintext highlighter-rouge">MySql</code>을 실행할 수 있는데 역시 2가지 방법이 있다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services start mysql 혹은
mysql.server start
</code></pre></div>    </div>
  </li>
  <li>둘 중 하나를 입력해서 <code class="language-plaintext highlighter-rouge">MySql</code>서버를 시작할 수 있다.</li>
  <li>네트워크 연결 허용하겠냐는 창이 뜨면 허용하겠다고 하면 된다.</li>
</ul>

<h2 id="mysql-초기-설정">MySql 초기 설정</h2>
<ul>
  <li>서버가 시작되었다고 바로 쓸 수 있는 것은 아니고 간단한 설정을 해 주어야 한다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql_secure_installation
</code></pre></div>    </div>
  </li>
  <li>
    <p>위 명령어를 입력하면 <code class="language-plaintext highlighter-rouge">MySql</code> 초기 세팅을 시작할 수 있다.<br /><br /></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>“Would you like to setup VALIDATE PASSWORD component? (Press y</td>
          <td>Y for Yes, any other key for No)”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>비밀번호를 복잡하게 설정하겠느냐는 것인데 아직 초보 단계니까 <code class="language-plaintext highlighter-rouge">No</code>를 입력해서 ‘1234’와 같은 쉬운 비밀번호를 설정한다. (<code class="language-plaintext highlighter-rouge">Yes</code>를 입력하면 복잡한 비밀번호 설정)</li>
  <li>
    <p>새 비밀번호를 입력하라는 메시지가 나오면 입력하고 엔터 누르면 된다.<br /><br /></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>“Remove anonymous users? (Press y</td>
          <td>Y for Yes. any other key for No)”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>사용자 설정을 묻는 것인데 <code class="language-plaintext highlighter-rouge">Yes</code>를 선택했다.</li>
  <li>Yes - 접속하는 경우 “mysql -uroot”처럼 -u 옵션 필요</li>
  <li>
    <p>No - 접속하는 경우 “mysql”처럼 -u 옵션 불필요<br /><br /></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>“Disallow root login remotely? (Press y</td>
          <td>Y for Yes, any other key for No)”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>다른 IP에서 root 아이디로 원격 접속이 가능한지 묻는 것인데 <code class="language-plaintext highlighter-rouge">Yes</code>는 불가능, <code class="language-plaintext highlighter-rouge">No</code>는 가능</li>
  <li>
    <p>나는 <code class="language-plaintext highlighter-rouge">Yes</code>로 선택했다.<br /><br /></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>“Remove test database and access to it? (Press y</td>
          <td>Y for Yes, any other key for No)”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>테스트 데이터베이스를 삭제할건지 말건지 묻는 것인데 나는 <code class="language-plaintext highlighter-rouge">Yes</code>로 선택했다.<br /><br /></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>“Reload privilege tables now? (Press y</td>
          <td>Y for Yes, any other key for No)”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>변경된 권한을 테이블에 적용하는 설정에 대한 질문인데 이 질문은 무조건 <code class="language-plaintext highlighter-rouge">Yes</code>로 선택하는 것이 좋다고 한다.<br /><br /></p>
  </li>
  <li>여기까지 하면 모든 초기 설정이 완료된다.</li>
</ul>

<h2 id="mysql-접속">MySql 접속</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -u root -p
</code></pre></div></div>
<ul>
  <li>위 명령어를 입력하면 root 아이디로 로그인할 수 있다.</li>
  <li>비밀번호 입력창이 나오면 비밀번호를 입력 후(보이지 않지만 그냥 치면 됨) 엔터를 누르면 로그인이 완료된다.</li>
  <li>정상적으로 로그인 되면 쉘이 <code class="language-plaintext highlighter-rouge">mysql&gt;</code>로 바뀐다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; status;
</code></pre></div></div>
<ul>
  <li>위 명령어를 입력하면 현재 설정을 확인할 수 있다.</li>
</ul>

<h2 id="mysql-종료">MySql 종료</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; exit
</code></pre></div></div>
<ul>
  <li>위 명령어를 입력하면 <code class="language-plaintext highlighter-rouge">Bye</code>라는 메시지와 함께 <code class="language-plaintext highlighter-rouge">mysql</code>에서 빠져나올 수 있다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services stop mysql 혹은
mysql.server stop
</code></pre></div></div>
<ul>
  <li>둘 중 하나를 입력하면 <code class="language-plaintext highlighter-rouge">MySql</code> 서버가 종료된다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="MySQL" /><category term="MySQL" /><category term="Database" /><category term="JSP" /><summary type="html"><![CDATA[👀 MySql 시작하기 맥 기준으로 MySql을 설치하는 방법에는 2가지가 있는데 homebrew를 통해 설치하는 방법과 MySql 홈페이지에서 dmg 파일을 다운받아 설치하는 방법이 있다.]]></summary></entry><entry><title type="html">운영체제</title><link href="http://localhost:4000/operating%20system/OS-01/" rel="alternate" type="text/html" title="운영체제" /><published>2022-02-02T00:00:00+09:00</published><updated>2022-02-02T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/OS-01</id><content type="html" xml:base="http://localhost:4000/operating%20system/OS-01/"><![CDATA[<h1 id="-운영체제란">👀 운영체제란?</h1>
<ul>
  <li>Operating System, OS</li>
  <li>
    <p>컴퓨터 하드웨어 바로 위에 설치되어 사용자 및 다른 모든 소프트웨어와 하드웨어를 연결하는 소프트웨어 계층<br /><br />
<img src="../../assets/images/os.png" alt="os" /><br /><br /></p>
  </li>
  <li>좁은 의미의 운영체제(커널)
    <ul>
      <li>운영체제의 핵심 부분으로 메모리에 상주하는 부분</li>
      <li>전공자 입장에서는 운영체제 하면 커널만을 이야기한다.</li>
    </ul>
  </li>
  <li>넓은 의미의 운영체제
    <ul>
      <li>커널 뿐 아니라 메모리에 상주하지 않는 각종 주변 시스템 유틸리티를 포함한 개념<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="-운영체제의-목적">🔸 운영체제의 목적<br /></h2>
<ol>
  <li>컴퓨터 시스템을 편라하게 사용할 수 있는 환경 제공</li>
  <li>컴퓨터 시스템의 <strong>자원을 효율적으로 관리</strong>
    <ul>
      <li>하드웨어 자원인 프로세서, 기억장치, 입출력 장치들의 관리와</li>
      <li>소프트웨어 자원인 프로세스, 파일, 메시지 등 모든 것을 관리한다.</li>
      <li>사용자간의 형평성 있는 자원 분배가 가능해야 하고 <strong>주어진 자원으로 최대한의 성능</strong>을 낼 수 있어야 한다.</li>
      <li>실행 중인 프로그램들은 CPU를 번갈아가며 차지하며 동작을 하게 되는데 이 때 운영체제는 한 프로그램이 CPU를 너무 오랫동안 쓰지 않고 짧은 시간동안 번갈아 쓰도록 할당해 주어야 한다.</li>
      <li>또한 실행 중인 프로그램들에게 메모리 공간을 적절히 분배해 주어야 한다.<br /><br /></li>
    </ul>
  </li>
</ol>

<h2 id="-운영체제의-분류">🔸 운영체제의 분류</h2>
<ul>
  <li>동시 작업 가능 여부</li>
  <li>사용자의 수</li>
  <li>처리 방식<br /><br /></li>
  <li>위 세 가지에 따라 분류할 수 있는데 현대 운영체제는 동시 작업이 가능하고 다중 사용자를 지원하며 시분할이 가능하다고 정리할 수 있다.</li>
</ul>

<h3 id="️-동시-작업-가능-여부">☑️ 동시 작업 가능 여부</h3>
<h4 id="단일-작업single-tasking">단일 작업(single tasking)</h4>
<ul>
  <li>한 번에 하나의 작업만을 처리한다.</li>
  <li>예) MS-DOS 프롬프트 상에서는 한 명령의 수행을 끝내기 전에 다른 명령을 수행시킬 수 없음</li>
  <li>과거에 MS-DOS에서 주로 사용되던 방식으로 현대 컴퓨터에선 쓰이지 않지만 엘리베이터처럼 기능이 단순하거나 특수 목적을 수행하는 기계에는 지금도 사용되고 있다.</li>
</ul>

<h4 id="다중-작업multi-tasking">다중 작업(multi tasking)</h4>
<ul>
  <li>동시에 두 개 이상의 작업 처리</li>
  <li>예) UNIX, MS Windows 등에서는 한 명령의 수행이 끝나기 전에 다른 명령이나 프로그램을 수행할 수 있음</li>
  <li>스마트폰을 포함한 현대의 대부분의 하드웨어에서 사용되는 운영체제이다.<br /><br /></li>
</ul>

<h3 id="️-사용자의-수">☑️ 사용자의 수</h3>
<h4 id="단일-사용자single-user">단일 사용자(single user)</h4>
<ul>
  <li>예) MS-DOS, MS Windows</li>
</ul>

<h4 id="다중-사용자multi-user">다중 사용자(multi user)</h4>
<ul>
  <li>예) UNIX, NT server</li>
  <li>사용자가 많아지면 파일에 대한 접근 권한이나 사용자간 자원 분배를 형평성 있게 해 줄 수 있어야 한다.<br /><br /></li>
</ul>

<h3 id="️-처리-방식">☑️ 처리 방식</h3>
<h4 id="일괄-처리batch-processing">일괄 처리(batch processing)</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Interactive</code> 하지 않은 방식</li>
  <li>작업 요청을 일정량 모아서 한꺼번에 처리</li>
  <li>작업이 완전 종료될 때까지 기다려야 함(하루 이상 걸림)</li>
  <li>에) 초기 Punch Card 처리 시스템</li>
</ul>

<h4 id="시분할time-sharing">시분할(time sharing)</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Interactive</code>한 방식</li>
  <li>현대에 주로 사용하는 운영체제로 일반적인 범용 컴퓨터에서 사용</li>
  <li>여러 작업을 수행할 때 컴퓨터 처리 능력을 일정한 시간 단위로 분할해서 사용</li>
  <li>일괄 처리 시스템에 비해 짧은 응답 시간을 가짐(UNIX)</li>
  <li>하지만 응답 시간이 항상 고정된 것은 아니며 사용자가 많아지면 느려질 수 있다.</li>
  <li>사람이 빠르다고 느끼면서 주어진 자원과 시간을 최대한 활용하는 것이 목적이다.</li>
</ul>

<h4 id="실시간realtime-os">실시간(Realtime OS)</h4>
<ul>
  <li>정해진 시간 안에 어떠한 일이 반드시 종료됨이 보장되어야 하는 실시간시스템을 위한 OS</li>
  <li>원자로/공장 제어, 미사일 제어, 반도체 장비, 로보트 제어 등 특수 목적을 가진 시스템에서 사용된다.</li>
</ul>

<h5 id="️-실시간-시스템의-개념-확장">▪️ 실시간 시스템의 개념 확장</h5>
<ul>
  <li>Hard realtime system(경성 실시간 시스템)
    <ul>
      <li>데드라인을 지키지 않으면 큰일나는 시스템</li>
      <li>예) 반도체, 미사일 등</li>
    </ul>
  </li>
  <li>Soft realtime system(연성 실시간 시스템)
    <ul>
      <li>데드라인을 좀 못 지켜도 괜찮은 시스템</li>
      <li>예) OTT<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="-비슷한-의미로-사용되지만-약간-다른-용어들">🔸 비슷한 의미로 사용되지만 약간 다른 용어들</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Multitasking</code> : 하나의 프로그램이 끝나기 전에 다른 프로그램 작업이 가능한 것</li>
  <li><code class="language-plaintext highlighter-rouge">Multiprogramming</code> : 여러 프로그램이 메모리에 올라가 있는 것을 강조</li>
  <li><code class="language-plaintext highlighter-rouge">Time sharing</code> : <code class="language-plaintext highlighter-rouge">CPU</code>의 시간을 분할하여 나누어 쓴다는 것을 강조</li>
  <li><code class="language-plaintext highlighter-rouge">Multiprocess</code> : 여러 프로그램이 동시에 실행된다.</li>
  <li>=&gt; 모두 컴퓨터에서 여러 작업을 동시에 수행한다는 것을 뜻하지만 어디에 더 초점을 맞추느냐에 따라 다르게 사용된다.</li>
</ul>

<h3 id="️-multiprocessor">☑️ Multiprocessor</h3>
<ul>
  <li>하나의 컴퓨터에 <code class="language-plaintext highlighter-rouge">CPU(processor)</code>가 여러 개 붙어 있음을 의미</li>
  <li><code class="language-plaintext highlighter-rouge">CPU</code>가 하나임을 전제로 하는 위의 네 가지 용어들과는 하드웨어적으로 다르다.<br /><br /></li>
</ul>

<h2 id="-운영체제의-예">🔸 운영체제의 예</h2>
<h3 id="️-유닉스unix">☑️ 유닉스(UNIX)</h3>
<ul>
  <li>멀티태스킹 가능</li>
  <li>다중 사용자용</li>
  <li>대형 서버용</li>
  <li>코드의 대부분을 C언어로 작성 - 기계어 사용에 어려움이 많아서 유닉스 개발용으로 C언어를 만들었다.</li>
  <li>높은 이식성 - 다른 기계어 집합을 사용하는 컴퓨터에 이식이 쉽다.</li>
  <li>최소한의 커널 구조</li>
  <li>복잡한 시스템에 맞게 확장 용이</li>
  <li>소스 코드 공개 - 학술적으로 사용하기 좋다.</li>
  <li>프로그램 개발에 용이</li>
  <li>다양한 버전
    <ul>
      <li>System V, FeeBSD, SunOS, Solaris - 유로. 소스 코드 비공개</li>
      <li>Linux - 무료. 소스 코드 공개. 유닉스보다는 규모가 작은 환경이나 개인용 컴퓨터에 사용된다.</li>
    </ul>
  </li>
</ul>

<h3 id="️-dosdisk-operating-system">☑️ DOS(Disk Operating System)</h3>
<ul>
  <li>MS사에서 1981년 IBM-PC를 위해 개발</li>
  <li>단일 사용자용 운영체제</li>
  <li>싱글태스크</li>
  <li>메모리 관리 능력의 한계(주 기억 장치 최대 용량 : 640KB)</li>
</ul>

<h3 id="️-ms-windows">☑️ MS Windows</h3>
<ul>
  <li>MS사의 다중 작업용 GUI 기반 운영체제</li>
  <li>Plug and Play, 네트워크 환경 강화</li>
  <li>DOS용 응용 프로그램과 호환성 제공</li>
  <li>불안정성(초창기 윈도우즈)</li>
  <li>풍부한 지원 소프트웨어</li>
</ul>

<h3 id="️-handheld-device를-위한-os">☑️ Handheld device를 위한 OS</h3>
<ul>
  <li>PalmOS, Pocket PC(WinCE), Tiny OS<br /><br /></li>
</ul>

<h2 id="-운영체제의-구조">🔸 운영체제의 구조</h2>
<ul>
  <li>크게 <code class="language-plaintext highlighter-rouge">CPU</code> - <code class="language-plaintext highlighter-rouge">memory</code> - <code class="language-plaintext highlighter-rouge">Disk</code> - <code class="language-plaintext highlighter-rouge">I/O device</code> 구조</li>
</ul>

<h3 id="️-cpu">☑️ CPU</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CPU 스케줄링</code>을 통해 실행중인 프로그램들에게 <code class="language-plaintext highlighter-rouge">CPU</code>를 효율적으로 할당해야 함</li>
  <li><code class="language-plaintext highlighter-rouge">CPU</code>에게는 선착순 처리가 효율적이지 않기 때문에 프로그램마다 걸리는 작업 시간에 따라 처리하도록 스케줄링한다.</li>
</ul>

<h3 id="️-memory">☑️ memory</h3>
<ul>
  <li>프로그램을 실행하려면 <code class="language-plaintext highlighter-rouge">memory</code>에 올려야 하는데 <code class="language-plaintext highlighter-rouge">memory</code>는 한정되어 있기 때문에 적당히 잘 쪼개어 써야 한다.</li>
  <li>최근에 많이 사용된 데이터는 오래 보관하고 그렇지 않으면 쫓아내는 방식으로 관리</li>
</ul>

<h3 id="️-disk">☑️ Disk</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Disk</code>에는 헤드가 있고 그 헤드를 움직이면서 일정 위치에 파일을 기록하기 때문에 <code class="language-plaintext highlighter-rouge">I/O</code> 요청이 들어왔을 때 헤드를 최대한 적게 움직이면서 최대한 빠르게 많이 처리할 수 있도록 처리 순서를 스케줄링 해야 한다.</li>
</ul>

<h3 id="️-io-device">☑️ I/O device</h3>
<ul>
  <li>지금까지 나온 장치들 중에선 가장 느리다.</li>
  <li>때문에 <code class="language-plaintext highlighter-rouge">인터럽트</code> 기반으로 관리되며 <code class="language-plaintext highlighter-rouge">CPU</code>는 평소에는 자기 할 일을 하고 있다가 <code class="language-plaintext highlighter-rouge">I/O</code> 장치에서 <code class="language-plaintext highlighter-rouge">인터럽트</code> 요청이 들어오면 입출력을 수행하는 방식으로 진행된다.</li>
</ul>

<h3 id="️-프로세스-관리">☑️ 프로세스 관리</h3>
<ul>
  <li>프로세스의 생성과 삭제</li>
  <li>자원 할당 및 반환</li>
  <li>프로세스 간 협력</li>
</ul>

<h3 id="️-그-외">☑️ 그 외</h3>
<ul>
  <li>보호 시스템</li>
  <li>네트워킹</li>
  <li>명령어 해석기(command line interpreter)</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Operating System" /><category term="CS" /><category term="OS" /><summary type="html"><![CDATA[👀 운영체제란? Operating System, OS 컴퓨터 하드웨어 바로 위에 설치되어 사용자 및 다른 모든 소프트웨어와 하드웨어를 연결하는 소프트웨어 계층]]></summary></entry><entry><title type="html">JSP란?</title><link href="http://localhost:4000/jsp/What-is-JSP/" rel="alternate" type="text/html" title="JSP란?" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/What-is-JSP</id><content type="html" xml:base="http://localhost:4000/jsp/What-is-JSP/"><![CDATA[<h1 id="-jspjava-server-page란">👀 JSP(Java Server Page)란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Java</code>를 이용하여 <code class="language-plaintext highlighter-rouge">동적인 웹 페이지</code>를 만들기 위해 Sun Microsystems사가 개발한 기술<br /><br /></li>
</ul>

<h1 id="jsp의-특징">JSP의 특징</h1>
<h2 id="1-강력한-이식성">1. 강력한 이식성</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">자바기반</code>의 언어로 어떤 <code class="language-plaintext highlighter-rouge">JSP 컨테이너</code>에서도 사용이 가능하므로 한 번 작성한 코드를 별다른 수정 없이 다른 플랫폼으로 이식이 가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">모듈화</code>와 <code class="language-plaintext highlighter-rouge">모듈의 재사용성</code>이 좋다.</li>
</ul>

<h2 id="2-서버-자원의-효율적인-사용">2. 서버 자원의 효율적인 사용</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">스레드(Thread)</code> 기반의 아키텍처 사용으로 불필요한 자원 낭비를 감소시켰다.</li>
</ul>

<h2 id="3-간편한-mvc-패턴디자인-패턴">3. 간편한 MVC 패턴(디자인 패턴)</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MVC 패턴</code>을 <code class="language-plaintext highlighter-rouge">JSP(View)</code>와 <code class="language-plaintext highlighter-rouge">자바빈즈(Model)</code>, <code class="language-plaintext highlighter-rouge">서블릿(Controller)</code>을 이용해 쉽게 구현할 수 있다.</li>
</ul>

<h3 id="-mvc-패턴">🔸 MVC 패턴</h3>
<ul>
  <li>사용자에게 보여지는 화면인 <code class="language-plaintext highlighter-rouge">View</code> 부분과 실제 비즈니스 로직이 들어가는 <code class="language-plaintext highlighter-rouge">Model</code> 부분 그리고 <code class="language-plaintext highlighter-rouge">View</code>와 <code class="language-plaintext highlighter-rouge">Model</code>을 연결시켜주는 <code class="language-plaintext highlighter-rouge">Controller</code> 부분으로 구성</li>
  <li>최근에 중대형 프로젝트에서 효과적이라 평가되어 많이 사용되고 있다.</li>
</ul>

<h3 id="-디자인-패턴">🔸 디자인 패턴</h3>
<ul>
  <li>프로젝트를 개발함에 있어서 특정한 문제가 주어졌을 때 그 문제를 해결하기 위한 방법을 설명해 놓은 일종의 지침</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP(Java Server Page)란? Java를 이용하여 동적인 웹 페이지를 만들기 위해 Sun Microsystems사가 개발한 기술]]></summary></entry><entry><title type="html">JavaScript 기본 문법</title><link href="http://localhost:4000/javascript/JavaScript/" rel="alternate" type="text/html" title="JavaScript 기본 문법" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/javascript/JavaScript</id><content type="html" xml:base="http://localhost:4000/javascript/JavaScript/"><![CDATA[<h1 id="자바스크립트란">자바스크립트란?</h1>
<ul>
  <li>웹 페이지에 방문했을 때 사용자의 동작(이벤트)에 따른 처리를 하는 언어</li>
  <li><code class="language-plaintext highlighter-rouge">인터프리터 언어</code>로 작성된 코드를 위에서 아래로 순차적으로 실행한다.</li>
  <li><code class="language-plaintext highlighter-rouge">컴파일 언어</code>와 다른 점은 일단 실행을 하고 에러가 발생하기 전 까지의 코드만 실행한다.</li>
  <li>객체 기반 언어이다.</li>
  <li>오픈소스 언어</li>
  <li>다양한 라이브러리(API) 사용 가능
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Jquery</code> 주로 사용 - <code class="language-plaintext highlighter-rouge">Ajax</code>, <code class="language-plaintext highlighter-rouge">Json</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">HTML5</code>(웹표준) API 기반의 언어<br /><br /><br /></li>
</ul>

<h1 id="변수-선언">변수 선언</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> 키워드를 이용해 선언한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>일반적인 프로그래밍 언어와 다르게 자료형별로 구분해서 선언하지 않는다. 변수 선언과 동시에 초기화하는 내용물에 따라서 자바스트립트가 알아서 자료형을 지정한다.</li>
  <li>편한 듯 하면서도 원래 하던 언어가 있어서 그런지 무의식적으로 int num … 과 같이 타이핑하게 될 때가 많다.</li>
</ul>

<h2 id="-var">🔸 var</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> 키워드는 같은 이름으로 중복해서 선언하고 값을 넣는 것이 가능하다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// james</span>

<span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">lily</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// lily</span>
</code></pre></div></div>

<ul>
  <li>컴파일 언어를 하다 온 입장에서는 다소 이해가 되지 않지만 <code class="language-plaintext highlighter-rouge">자바스크립트</code>에서의 <code class="language-plaintext highlighter-rouge">var</code> 키워드는 이런 흐름이 가능하다.</li>
  <li>변수가 많아지면 중간에 꼬일 가능성이 아주 많아 보이는 속성이다. 그래서 이것을 보완하기 위해 나온 것이 <code class="language-plaintext highlighter-rouge">let</code> 키워드이다.</li>
</ul>

<h2 id="-let">🔸 let</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code> 키워드도 <code class="language-plaintext highlighter-rouge">var</code>처럼 변수를 선언하는 키워드지만 약간 속성이 다르다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// james</span>

<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">lily</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> 
<span class="c1">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code> 키워드를 사용하니까 컴파일 언어와 같은 흐름을 보인다.</li>
</ul>

<h2 id="-const">🔸 const</h2>
<ul>
  <li>컴파일 언어에서와 마찬가지로 상수 선언 키워드이다.</li>
  <li><code class="language-plaintext highlighter-rouge">const</code> 다음에 자료형은 쓸 필요 없이 바로 변수 이름을 선언하고 초기화하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">james</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>
<p><br /><br /></p>

<h1 id="연산자">연산자</h1>
<ul>
  <li>연산자의 사용은 동일하지만 자바스크립트에는 <code class="language-plaintext highlighter-rouge">===</code>과 <code class="language-plaintext highlighter-rouge">!==</code>이라는 연산자가 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">데이터값</code>과 <code class="language-plaintext highlighter-rouge">자료형</code>이 <strong>모두 동일</strong>한지 확인하는 연산자이다.</li>
  <li><code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">!=</code> 연산자들은 단순히 값만 확인하고 자료형이 같은지는 확인하지 않는다.
    <ul>
      <li>그래서 문자 100과 숫자 100을 <code class="language-plaintext highlighter-rouge">==</code>을 이용해서 값이 같은지 비교하면 <code class="language-plaintext highlighter-rouge">true</code>를 리턴한다.</li>
      <li><code class="language-plaintext highlighter-rouge">===</code> 연산자 사용시 <code class="language-plaintext highlighter-rouge">false</code> 리턴</li>
    </ul>
  </li>
</ul>

<h2 id="-연산자-우선순위">🔸 연산자 우선순위<br /></h2>
<ol>
  <li>()<br /></li>
  <li>단항연산자(++, –, !)<br /></li>
  <li>산술연산자(+, -, *, /, %)<br /></li>
  <li>비교연산자(&gt;, &lt;, &gt;=, &lt;=, ==, !=, ===, !==)<br /></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>논리연산자(&amp;&amp;,</td>
          <td> </td>
          <td>)<br /></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>복합대입연산자(=, +=, -=, *=, /=, %=)<br /><br /></li>
</ol>

<h1 id="함수">함수</h1>
<ul>
  <li>함수 또한 자료형을 구분하지 않고 <code class="language-plaintext highlighter-rouge">function</code> 키워드 하나만 쓴다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">함수명</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nx">실행문</span><span class="p">;</span>
<span class="p">}</span>
<span class="nl">호출법</span> <span class="p">:</span> <span class="nx">함수명</span><span class="p">();</span>
</code></pre></div></div>
<p><br /><br /></p>

<ul>
  <li>익명함수도 사용 가능하다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">변수</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
  <span class="nx">실행문</span><span class="p">;</span>
<span class="p">}</span>
<span class="nl">호출법</span> <span class="p">:</span> <span class="nx">참조</span> <span class="nx">변수명</span><span class="p">();</span>
</code></pre></div>    </div>
    <p><br /><br /></p>
  </li>
</ul>

<h1 id="객체">객체</h1>
<ul>
  <li>내 눈앞에 보이는 모든 대상</li>
</ul>

<h3 id="-객체-생성은-new-키워드를-이용해서-생성한다">🔸 객체 생성은 new 키워드를 이용해서 생성한다.</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">참조변수</span><span class="p">(</span><span class="nx">레퍼런스</span><span class="p">)</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</code></pre></div></div>
<p><br /><br /></p>

<h2 id="1-내장객체">1) 내장객체</h2>
<ul>
  <li>자바스크립트 안에 포함된 객체
    <ul>
      <li><code class="language-plaintext highlighter-rouge">문자(String)</code>, <code class="language-plaintext highlighter-rouge">날짜(Date)</code>, <code class="language-plaintext highlighter-rouge">수학(Math)</code>, <code class="language-plaintext highlighter-rouge">숫자(Number)</code>, <code class="language-plaintext highlighter-rouge">배열(Array)</code>, …</li>
    </ul>
  </li>
</ul>

<h3 id="-날짜date객체">🔸 날짜(Date)객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 2022년 1월 1일</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">자바스크립트</code>에서의 <code class="language-plaintext highlighter-rouge">날짜객체</code>에서 좀 희안한 점이라면 월(Month)이 실제 숫자보다 <strong>1 적은 형태</strong>로 표현된다는 것이다. <code class="language-plaintext highlighter-rouge">new Date(2022,1,1);</code> 이라 쓰면 2022년 2월 1일이다.</li>
</ul>

<h3 id="-배열array객체">🔸 배열(Array)객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 다 가능</span>
<span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> 
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">자바스크립트</code>에서 <code class="language-plaintext highlighter-rouge">배열</code>은 <code class="language-plaintext highlighter-rouge">배열객체</code>를 통해 생성 할 수도 있고 컴파일 언어와 비슷하게 <code class="language-plaintext highlighter-rouge">[]를 사용해서 초기화</code> 하는 형태로 선언할 수도 있다.</li>
  <li>또 특이한 점이라면 <strong>하나의 배열에 서로 다른 자료형을 가진 값을 담을 수 있다</strong>는 것이다.</li>
</ul>

<h2 id="2-브라우저-객체-모델bom">2) 브라우저 객체 모델(BOM)</h2>
<ul>
  <li>웹 브라우저에 포함되어 브라우저를 표현하는 객체</li>
  <li>계층형 구조로 되어 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         <span class="o">/</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">screen</span><span class="p">,</span> <span class="p">...</span>
<span class="nb">window</span> <span class="o">-</span>   <span class="nx">location</span><span class="p">,</span> <span class="nx">history</span>
         <span class="err">\</span> <span class="nb">navigator</span>
</code></pre></div></div>

<ul>
  <li>알림창을 출력할 때
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">메시지 출력 메서드</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>를 많이 쓴다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
<span class="kd">function</span> <span class="nx">myOpen</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">test1.html</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">test1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">width=300, height=200, top=150, left=500</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"팝업창 열기"</span> <span class="na">onclick=</span><span class="s">"myOpen();"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li>위 처럼 <code class="language-plaintext highlighter-rouge">HTML</code> 태그와 함께 쓸 수 있다.</li>
</ul>

<h3 id="-location-객체">🔸 location 객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test1.html</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// test1.html로 이동</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span> <span class="c1">// 페이지 새로고침</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">test2.html</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 현재 페이지를 test2.html로 변경</span>
</code></pre></div></div>

<ul>
  <li>주소창과 관련된 기능을 가지고 있다.</li>
  <li>특정 페이지로 이동하거나 현재 페이지를 다시 로드하는 등의 동작을 수행할 수 있다.</li>
</ul>

<h3 id="-history-객체">🔸 history 객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">history</span><span class="p">.</span><span class="nx">back</span><span class="p">();</span> <span class="c1">// 뒤로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">forward</span><span class="p">();</span> <span class="c1">// 앞으로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="o">-</span><span class="nx">숫자</span><span class="p">);</span> <span class="c1">// 숫자만큼 뒤로 가기</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="nx">숫자</span><span class="p">);</span> <span class="c1">// 숫자만큼 앞으로 가기</span>
</code></pre></div></div>

<ul>
  <li>페이지의 방문기록에 따른 동작을 수행할 수 있다.</li>
</ul>

<h3 id="-navigator-객체">🔸 navigator 객체</h3>
<ul>
  <li>방문자(클라이언트)의 브라우저 정보 및 운영체제정보 확인 가능</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<ul>
  <li>위와 같이 쓰면 팝업창에서 사용자의 브라우저 정보와 운영체제정보를 볼 수 있다.</li>
</ul>

<h2 id="3-문서-객체-모델dom">3) 문서 객체 모델(DOM)</h2>
<ul>
  <li>HTML문서 구조(객체)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">src</span><span class="p">;</span> <span class="c1">// 현재 페이지에 있는 이미지들 중 첫번째 소스에 접근</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">폼태그명</span><span class="p">.</span><span class="nx">속성</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HTML</code>의 <code class="language-plaintext highlighter-rouge">폼태그</code>와 결합해 사용할 수 있다.</li>
</ul>

<h3 id="-폼태그-form">🔸 폼태그 form</h3>
<ul>
  <li>사용자의 정보를 입력받아서 특정 페이지(action)로 정보를 전달하는(submit) 태그</li>
  <li>전달 방식에서는 <code class="language-plaintext highlighter-rouge">Get</code>방식과 <code class="language-plaintext highlighter-rouge">Post</code>방식이 있다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>회원정보 가입하기<span class="nt">&lt;/legend&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"itwill.jsp"</span> <span class="na">name=</span><span class="s">"fr2"</span> <span class="na">method=</span><span class="s">"get"</span> <span class="na">onsubmit=</span><span class="s">"return fun8();"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label&gt;</span>아이디 : <span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">value=</span><span class="s">""</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
        비밀번호 : <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"pw"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span> 
        주민번호 : <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"ju1"</span> <span class="na">onkeyup=</span><span class="s">"check1();"</span> <span class="na">maxlength=</span><span class="s">"6"</span><span class="nt">&gt;</span> - <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"ju2"</span> <span class="na">maxlength=</span><span class="s">"7"</span> <span class="na">onkeyup=</span><span class="s">"check2();"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;br&gt;</span> 메세지 :
        <span class="nt">&lt;textarea</span> <span class="na">rows=</span><span class="s">"5"</span> <span class="na">cols=</span><span class="s">"10"</span> <span class="na">name=</span><span class="s">"msg"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
        <span class="nt">&lt;br&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"회원 가입하기"</span> <span class="na">onsubmit=</span><span class="s">"return fun8();"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"속성 확인 버튼"</span> <span class="na">onclick=</span><span class="s">"fun5()"</span><span class="nt">&gt;</span> 
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"속성 변경 버튼"</span> <span class="na">onclick=</span><span class="s">"fun6()"</span><span class="nt">&gt;</span> 
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"데이터 확인 버튼"</span> <span class="na">onclick=</span><span class="s">"fun7()"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/fieldset&gt;</span>
</code></pre></div></div>

<ul>
  <li>위와 같이 사용 가능하다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JavaScript" /><category term="JSP" /><category term="JavaScript" /><summary type="html"><![CDATA[자바스크립트란? 웹 페이지에 방문했을 때 사용자의 동작(이벤트)에 따른 처리를 하는 언어 인터프리터 언어로 작성된 코드를 위에서 아래로 순차적으로 실행한다. 컴파일 언어와 다른 점은 일단 실행을 하고 에러가 발생하기 전 까지의 코드만 실행한다. 객체 기반 언어이다. 오픈소스 언어 다양한 라이브러리(API) 사용 가능 Jquery 주로 사용 - Ajax, Json HTML5(웹표준) API 기반의 언어]]></summary></entry><entry><title type="html">세션(Session)과 쿠키(Cookie)</title><link href="http://localhost:4000/jsp/JSP-session-cookie/" rel="alternate" type="text/html" title="세션(Session)과 쿠키(Cookie)" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-session-cookie</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-session-cookie/"><![CDATA[<h1 id="-세션session이란">👀 세션(Session)이란?</h1>
<h2 id="️-서버랑-클라이언트와의-관계상태를-유지하기-위해서-사용하는-값">☑️ 서버랑 클라이언트와의 관계(상태)를 유지하기 위해서 사용하는 값</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">HTTP 프로토콜</code>은 상태가 유지되지 않기 때문에 요청에 대한 응답이 한 번씩 이뤄지고 나면 그 관계가 소멸된다.</li>
  <li>하지만 이런 방식으로는 사용자가 회원 사이트에 로그인 했을 때 지속적으로 업무를 볼 수 없게 된다.</li>
  <li>그래서 사용자가 지속적으로 업무를 볼 수 있도록 서버와 클라이언트간의 관계를 일정 시간동안 유지해주기 위해 쓰는 것이 <code class="language-plaintext highlighter-rouge">세션</code>이다.</li>
  <li>세션객체(영역)는 브라우저당 1개씩 생성된다.</li>
</ul>

<h2 id="-세션-메소드">🔸 세션 메소드</h2>
<ul>
  <li>세션값 생성 : <code class="language-plaintext highlighter-rouge">session.setAttribute("이름", 값);</code></li>
  <li>세션값 사용 : <code class="language-plaintext highlighter-rouge">session.getAttribute("이름");</code></li>
  <li>세션값 제거 : <code class="language-plaintext highlighter-rouge">session.removeAttribute("이름");</code></li>
  <li>세션값 초기화 : <code class="language-plaintext highlighter-rouge">session.invalidate();</code>
    <ul>
      <li>❗️ 세션값 제거 메소드를 통한 부분제거보다는 세션값 초기화를 시켜야 한다.</li>
      <li>일부만 제거하면 사용자가 로그아웃 했는데 로그인 했을 때와 같은 행동이 일부 가능할 수 있다.
<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="-쿠키cookie란">👀 쿠키(Cookie)란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">클라이언트</code> 측에서 관리되는 정보</li>
  <li>사용 가능한 기간동안 하드디스크에 저장되기 때문에 웹 브라우저가 사라져도 사용이 가능하다.</li>
  <li>하지만 그만큼 보안적으로 취약하다. (그래서 보안이 필요한 정보는 <code class="language-plaintext highlighter-rouge">세션</code> 사용)</li>
</ul>

<h2 id="-쿠키-생성-절차">🔸 쿠키 생성 절차</h2>
<h3 id="1-쿠키-생성">1. 쿠키 생성</h3>
<h3 id="2-쿠키가-필요로-하는-설정값-저장유효기간-설명-도메인-">2. 쿠키가 필요로 하는 설정값 저장(유효기간, 설명, 도메인, …)</h3>
<h3 id="3-웹-브라우저에-생성된-쿠키-정보-전달">3. 웹 브라우저에 생성된 쿠키 정보 전달</h3>
<h3 id="4-웹-브라우저-요청에서-쿠키를-얻어온다">4. 웹 브라우저 요청에서 쿠키를 얻어온다.</h3>
<h3 id="5-쿠키-정보는-이름-값의-데이터-쌍으로-형성된다">5. 쿠키 정보는 이름, 값의 데이터 쌍으로 형성된다.</h3>
<h3 id="6-쿠키-이름을-사용해서-해당-값을-사용한다">6. 쿠키 이름을 사용해서 해당 값을 사용한다.</h3>

<h2 id="-쿠키-사용-방법">🔸 쿠키 사용 방법</h2>
<h3 id="1-http-헤더-정보-사용---안씀-xx">1) <code class="language-plaintext highlighter-rouge">HTTP</code> 헤더 정보 사용 - 안씀 XX</h3>
<h3 id="2-서블릿-api-사용---현재-쓰는-방식">2) 서블릿 API 사용 - 현재 쓰는 방식</h3>

<ul>
  <li>쿠키 생성하는 예제 코드</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span>
    <span class="c1">// 쿠키값 생성 - 서블릿 API 사용</span>
    <span class="nc">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cookie</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"CookieValue"</span><span class="o">);</span> <span class="c1">// HDD 저장X, 메모리에만 있는 상태</span>
		
    <span class="c1">// 쿠키값 설정 - 유효기간 설정</span>
    <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span> <span class="c1">// 초 단위 - 10분</span>
		
    <span class="c1">// 쿠키값을 저장(응답정보(response)에 저장)</span>
    <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"쿠키정보가 전달 완료시 사용자의 HDD에 저장"</span><span class="o">);</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>먼저 쿠키를 생성한 다음 클라이언트에게 전송한다.</p>
  </li>
  <li>
    <p>쿠키값 가져오는 예제 코드</p>
  </li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span>
    <span class="c1">// 쿠키값 가져오기(request - 요청정보로부터 꺼내오기)</span>
    <span class="nc">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>
			
    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">cookies</span><span class="o">)</span> <span class="c1">// !!배열을 반복문 돌리기 전에 예외처리 꼭 하기!!</span>
    <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">cookies</span><span class="o">.</span><span class="na">length</span> <span class="err">&gt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="c1">//System.out.println(cookies[i]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cookies</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"name"</span><span class="o">))</span>
            <span class="o">{</span>
                <span class="c1">// Cookie cookie = new Cookie("name", "CookieValue"); // HDD 저장X, 메모리O</span>
                <span class="c1">// ⬆️ 얘를 가져올 것임</span>
                <span class="c1">// 이름이 같다면 내가 직접 생성한 쿠키임</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cookies</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getValue</span><span class="o">());</span>
						
                <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"쿠키명: "</span> <span class="o">+</span> <span class="n">cookies</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
                <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"쿠키값 : "</span> <span class="o">+</span> <span class="n">cookies</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getValue</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>그 다음 클라이언트 측에서 쿠키를 가져온다.</li>
  <li>쿠키값을 가져올 때엔 꼭 예외처리를 해서 <code class="language-plaintext highlighter-rouge">null</code>값이 아닐 때에만 가져오는 동작을 수행하도록 해야한다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><category term="Session" /><category term="Cookie" /><summary type="html"><![CDATA[👀 세션(Session)이란? ☑️ 서버랑 클라이언트와의 관계(상태)를 유지하기 위해서 사용하는 값 HTTP 프로토콜은 상태가 유지되지 않기 때문에 요청에 대한 응답이 한 번씩 이뤄지고 나면 그 관계가 소멸된다. 하지만 이런 방식으로는 사용자가 회원 사이트에 로그인 했을 때 지속적으로 업무를 볼 수 없게 된다. 그래서 사용자가 지속적으로 업무를 볼 수 있도록 서버와 클라이언트간의 관계를 일정 시간동안 유지해주기 위해 쓰는 것이 세션이다. 세션객체(영역)는 브라우저당 1개씩 생성된다.]]></summary></entry><entry><title type="html">JSP 스크립트 요소</title><link href="http://localhost:4000/jsp/JSP-script-elements/" rel="alternate" type="text/html" title="JSP 스크립트 요소" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-script-elements</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-script-elements/"><![CDATA[<h1 id="-jsp-스크립트-요소">👀 JSP 스크립트 요소</h1>
<h2 id="1-선언문">1. 선언문</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%!</span>
    <span class="c1">// 멤버변수와 메서드 선언</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>멤버변수와 메서드를 선언하기 위한 영역</li>
  <li>클래스에서 멤버변수와 메서드를 선언한 것과 동일한 결과로 같은 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지 어느 위치에서든 참조가 가능하다.</li>
</ul>

<h2 id="2-스크립틀릿scriptlet">2. 스크립틀릿(Scriptlet)</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span> <span class="n">문장1</span><span class="o">;</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%</span>
    <span class="n">문장2</span><span class="o">;</span> <span class="n">문장3</span><span class="o">;</span> <span class="n">문장4</span><span class="o">;</span> <span class="o">...</span>
<span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 코드를 작성하는 영역</li>
  <li>서블릿 코드의 작성법이 다소 어려워서 이것을 보완하기 위해 만들어진 방식</li>
  <li>스크립틀릿 영역에서 선언되는 변수들은 지역변수로 인식된다.</li>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 파일이 실행되면 웹 컨테이너에 의해 <code class="language-plaintext highlighter-rouge">JSP</code> 파일이 파싱되어 서블릿 클래스로 변환된 자바 소스 파일과 클래스 자바 파일이 서버에 저장된다.</li>
</ul>

<h2 id="3-표현식expression">3. 표현식(Expression)</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%=</span><span class="n">변수</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%=</span><span class="n">리턴값이</span> <span class="n">있는</span> <span class="n">메소드</span> <span class="nt">%&gt;</span>
<span class="nt">&lt;%=</span><span class="n">수식</span><span class="o">(</span><span class="n">변수</span> <span class="n">또는</span> <span class="n">리턴값이</span> <span class="n">있는</span> <span class="n">메소드를</span> <span class="n">포함할</span> <span class="n">수</span> <span class="n">있음</span><span class="o">)</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>선언문, 스크립틀릿에 생성한 변수, 메소드의 리턴값을 스크립틀릿 태그 외부에서 출력하기 위해 사용</li>
  <li>하나의 표현식 태그 내의 구문 전체가 <code class="language-plaintext highlighter-rouge">print()</code> 메소드의 괄호 안에 통채로 들어가기 때문에 표현식 태그 내부에서는 <code class="language-plaintext highlighter-rouge">세미콜론(;)</code>을 사용해서는 안된다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP 스크립트 요소 1. 선언문]]></summary></entry><entry><title type="html">JSP 영역 객체와 속성</title><link href="http://localhost:4000/jsp/JSP-scope-attribute/" rel="alternate" type="text/html" title="JSP 영역 객체와 속성" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-scope-attribute</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-scope-attribute/"><![CDATA[<h1 id="-영역-객체scope와-속성attribute">👀 영역 객체(Scope)와 속성(Attribute)</h1>
<ul>
  <li>jsp 내장객체 중에서 특정 공간(Scope)에 정보를 저장하고, 저장된 정보(Attribute)를 공유할 수 있는 객체</li>
  <li><code class="language-plaintext highlighter-rouge">JSP</code>에서는 <code class="language-plaintext highlighter-rouge">page</code>, <code class="language-plaintext highlighter-rouge">request</code>, <code class="language-plaintext highlighter-rouge">session</code>, <code class="language-plaintext highlighter-rouge">application</code> 4가지 영역으로 정의한다.<br /><br />
<img src="../../assets/images/jspScope.png" alt="jspScope" /><br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 영역 객체(Scope)와 속성(Attribute) jsp 내장객체 중에서 특정 공간(Scope)에 정보를 저장하고, 저장된 정보(Attribute)를 공유할 수 있는 객체 JSP에서는 page, request, session, application 4가지 영역으로 정의한다.]]></summary></entry><entry><title type="html">JSP 내장 객체</title><link href="http://localhost:4000/jsp/JSP-implicit-object/" rel="alternate" type="text/html" title="JSP 내장 객체" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-implicit-object</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-implicit-object/"><![CDATA[<h1 id="-내장-객체란">👀 내장 객체란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 페이지가 웹 컨테이너에 의해서 서블릿으로 변환할 때 웹 컨테이너가 자동으로 생성해 주는 객체(<code class="language-plaintext highlighter-rouge">클래스</code>, <code class="language-plaintext highlighter-rouge">import</code> 구분없이 사용 가능)<br /><br /></li>
</ul>

<p>javax.servlet 패키지 - 8개<br /></p>

<table>
  <thead>
    <tr>
      <th>내장 객체 변수명</th>
      <th>설명</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>request</td>
      <td>클라이언트의 <code class="language-plaintext highlighter-rouge">HTTP</code> 요청 정보를 저장한 객체(<code class="language-plaintext highlighter-rouge">HTTP</code>헤더 정보, 파라미터 등)</td>
      <td> </td>
    </tr>
    <tr>
      <td>response</td>
      <td>클라이언트 요청에 대한(<code class="language-plaintext highlighter-rouge">HTTP</code>) 응답 정보를 저장한 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>session</td>
      <td>클라이언트의 세션 정보를 저장한 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>pageContext</td>
      <td>페이지 실행에 필요한 컨텍스트 정보를 저장한 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>out</td>
      <td>응답 페이지 정보를 전송하기 위한 출력 스트림 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>application</td>
      <td>동일한 애플리케이션의 컨텍스트 정보를 저장한 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>config</td>
      <td>해당 페이지의 서블릿 설정 정보(초기화 정보)를 저장한 객체</td>
      <td> </td>
    </tr>
    <tr>
      <td>page</td>
      <td>해당 페이지 서블릿 객체(인스턴스)</td>
      <td><br /><br /></td>
    </tr>
  </tbody>
</table>

<p>java.lang 패키지 - 1개<br /></p>
<ul>
  <li>exception : 예외 처리를 위한 객체</li>
</ul>

<h2 id="1-request-객체">1. request 객체</h2>
<ul>
  <li>
    <p>사용자의 요청에 관한 정보를 얻기 위한 객체<br /><br /></p>
  </li>
  <li>서버 도메인명 : <code class="language-plaintext highlighter-rouge">request.getServerName();</code></li>
  <li>서버 포트번호 : <code class="language-plaintext highlighter-rouge">request.getServerPort();</code></li>
  <li>URL : <code class="language-plaintext highlighter-rouge">request.getRequestURL();</code></li>
  <li>URI : <code class="language-plaintext highlighter-rouge">request.getRequestURI();</code></li>
  <li>클라이언트 호스트명 : <code class="language-plaintext highlighter-rouge">request.getRemoteHost();</code></li>
  <li>클라이언트 IP주소 : <code class="language-plaintext highlighter-rouge">request.getRemoteAddr();</code></li>
  <li>프로토콜 : <code class="language-plaintext highlighter-rouge">request.getProtocol();</code></li>
  <li>페이지 요청(전송)방식 : <code class="language-plaintext highlighter-rouge">request.getMethod();</code></li>
  <li>프로젝트 경로 : <code class="language-plaintext highlighter-rouge">request.getContextPath();</code></li>
  <li>물리적 경로 : <code class="language-plaintext highlighter-rouge">request.getRealPath("/");</code></li>
  <li>http헤더 (user-agent): <code class="language-plaintext highlighter-rouge">request.getHeader("user-agent");</code></li>
  <li>http헤더 (accept-language) : <code class="language-plaintext highlighter-rouge">request.getHeader("accept-language");</code></li>
  <li>http헤더 (host) : <code class="language-plaintext highlighter-rouge">request.getHeader("host");</code></li>
  <li>
    <p>http헤더 (connection) : <code class="language-plaintext highlighter-rouge">request.getHeader("connection");</code></p>
  </li>
  <li>전송을 통해 다른 페이지에서 전달받은 (이름 등의)정보를 얻을 때</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String name = request.getParameter("name");
</code></pre></div></div>
<p><br /></p>

<ul>
  <li>정보들을 배열로 얻을 때</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String hobbies[] = request.getParameterValues("hobby");
</code></pre></div></div>

<h3 id="-uri">🔸 URI</h3>
<ul>
  <li>URI는 특정 리소스를 식별하는 <code class="language-plaintext highlighter-rouge">통합 자원 식별자(Uniform Resource Identifier)</code>를 의미한다.</li>
  <li>웹 기술에서 사용하는 논리적 또는 물리적 리소스를 식별하는 고유한 문자열 시퀀스다.</li>
</ul>

<h3 id="-url">🔸 URL</h3>
<ul>
  <li>URL은 흔히 웹 주소라고도 하며, 컴퓨터 네트워크 상에서 리소스가 어디 있는지 알려주기 위한 규약이다. URI의 서브셋이다.</li>
  <li>한마디로 URI가 자원 자체에 대한 고유 식별자라면 URL은 자원이 실제로 존재하는 위치를 가리킨다. <br /><br />
<img src="../../assets/images/uri-url.png" alt="uri-url" /><br /><br /></li>
</ul>

<h2 id="2-response-객체">2. response 객체</h2>
<ul>
  <li>
    <p>클라이언트의 요청에 대한 <code class="language-plaintext highlighter-rouge">HTTP</code> 응답(HTTP Response)을 나타내는 객체<br /><br /></p>
  </li>
  <li>
    <p>response.setHeader(“헤더이름”, 값);</p>
  </li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>response.addHeader("Refresh", "3"); // 3초에 한번씩 새로고침
response.addHeader("Refresh", "3;url=http://www.naver.co.kr"); // 3초 후에 다음 페이지로 이동
</code></pre></div></div>

<ul>
  <li>response.sendRedirect(“주소”); // “주소”로 요청 재전송</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>response.sendRedirect("http://www.naver.co.kr"); // 해당 페이지로 바로 이동
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">response.setContentType("속성값"); 컨텐츠 타입 지정</code></li>
  <li><code class="language-plaintext highlighter-rouge">response.addCookie("쿠키값"); 쿠키 추가</code></li>
</ul>

<h2 id="3-session-객체">3. session 객체</h2>
<ul>
  <li>
    <p>클라이언트의 정보가 유지되어야 할 필요가 있는 경우를 위해 가상 연결을 구현해주는 세션<br /><br /></p>
  </li>
  <li>세션ID값 : <code class="language-plaintext highlighter-rouge">session.getId();</code></li>
  <li>세션생성시간 정보(ms) : <code class="language-plaintext highlighter-rouge">session.getCreationTime();</code></li>
  <li>최종 접속 시간(ms) : <code class="language-plaintext highlighter-rouge">session.getLastAccessedTime();</code></li>
  <li>세션 유지시간(기본)(1800s,30m) : <code class="language-plaintext highlighter-rouge">session.getMaxInactiveInterval();</code><br /></li>
</ul>

<h2 id="4-application-객체">4. application 객체</h2>
<ul>
  <li>
    <p>해당 웹 애플리케이션의 실행 환경을 제공하는 서버의 정보와 서버측 자원에 대한 정보를 얻어내거나 해당 애플리케이션의 이벤트 로그를 다루는 메소드들을 제공<br /><br /></p>
  </li>
  <li>서버정보 : <code class="language-plaintext highlighter-rouge">application.getServerInfo();</code></li>
  <li>서버의 물리적 경로 : <code class="language-plaintext highlighter-rouge">application.getRealPath("/");</code></li>
</ul>

<h2 id="5-out-객체">5. out 객체</h2>
<ul>
  <li>서블릿/JSP 컨테이너가 응답 페이지를 만들기 위해 사용하는 출력 스트림 객체</li>
  <li>
    <p>하지만 표현식을 사용해서 자바 코드의 변수 값들과 메소드의 리턴 값들을 출력할 수 있기 때문에 잘 사용되지 않는다.<br /><br /></p>
  </li>
  <li>출력 : <code class="language-plaintext highlighter-rouge">out.print("Hello");</code></li>
  <li>버퍼 사이즈 : <code class="language-plaintext highlighter-rouge">&lt;%=out.getBufferSize() %&gt;byte&lt;br&gt;</code></li>
  <li>버퍼 사용후 : <code class="language-plaintext highlighter-rouge">&lt;%=out.getRemaining() %&gt;byte&lt;br&gt;</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 내장 객체란? JSP 페이지가 웹 컨테이너에 의해서 서블릿으로 변환할 때 웹 컨테이너가 자동으로 생성해 주는 객체(클래스, import 구분없이 사용 가능)]]></summary></entry><entry><title type="html">JSP 지시어(Directive)</title><link href="http://localhost:4000/jsp/JSP-directive/" rel="alternate" type="text/html" title="JSP 지시어(Directive)" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-directive</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-directive/"><![CDATA[<h1 id="-jsp-지시어란directive">👀 JSP 지시어란?(Directive)</h1>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%</span><span class="err">@</span> <span class="o">...</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 파일 내에서 <code class="language-plaintext highlighter-rouge">JSP</code>를 실행할 컨테이너에서 해당 페이지를 어떻게 처리할 것인가에 대한 설정 정보들을 지정해주는 데 사용</li>
  <li><code class="language-plaintext highlighter-rouge">page</code> 지시어, <code class="language-plaintext highlighter-rouge">include</code> 지시어, <code class="language-plaintext highlighter-rouge">taglib</code> 지시어 3가지로 나누어진다.</li>
</ul>

<h2 id="1-page-지시어">1. page 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span>속성1="값1" 속성2="값2" 속성3="값3"... <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 대한 속성을 지정하는 지시어</li>
  <li>속성에는 스크립트 언어, import할 패키지/클래스, 세션 사용 여부, 에러 페이지 등 12개의 설정 정보를 지정해 사용할 수 있다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>사용법</th>
      <th>기본값</th>
      <th>설명</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>language</td>
      <td>language=”java”</td>
      <td>java</td>
      <td>스크립트 요소에서 사용할 언어 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>extends</td>
      <td>extends=”클래스명”</td>
      <td>없음</td>
      <td>상속받을 클래스를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>import</td>
      <td>import=”패키지.클래스명”</td>
      <td>없음</td>
      <td>import할 패키지.클래스 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>session</td>
      <td>session=”true”</td>
      <td>true</td>
      <td>HttpSession 사용 여부를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>buffer</td>
      <td>buffer=”16kb”</td>
      <td>8kb</td>
      <td>JSP 페이지의 출력 버퍼 크기를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>autoFlush</td>
      <td>autoFlush=”true”</td>
      <td>true</td>
      <td>출력 버퍼가 다 찼을 경우 처리 방법을 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>isThreadSafe</td>
      <td>isThreadSafe=”true”</td>
      <td>true</td>
      <td>다중 스레드의 동시 실행 여부를 설정</td>
      <td> </td>
    </tr>
    <tr>
      <td>info</td>
      <td>info=”페이지 설명”</td>
      <td>없음</td>
      <td>페이지 설명</td>
      <td> </td>
    </tr>
    <tr>
      <td>errorPage</td>
      <td>errorPage=”에러 페이지.jsp”</td>
      <td>없음</td>
      <td>에러 페이지로 사용할 페이지를 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>contentType</td>
      <td>contentType=”text/html”</td>
      <td>text/html;charset=ISO-8859-1</td>
      <td>JSP 페이지가 생성할 문서의 타입을 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>isErrorPage</td>
      <td>isErrorPage=”false”</td>
      <td>false</td>
      <td>현재 페이지를 에러 페이지로 지정</td>
      <td> </td>
    </tr>
    <tr>
      <td>pageEncoding</td>
      <td>pageEncoding=”euc-kr”</td>
      <td>ISO-8859-1</td>
      <td>현재 페이지의 문자 인코딩 타입 설정</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>각각의 속성을 하나의 <code class="language-plaintext highlighter-rouge">page 지시어</code>에 한 번에 지정할 수도 있으며 여러 개의 <code class="language-plaintext highlighter-rouge">page 지시어</code>에 나누어 지정할 수도 있다.</li>
  <li>하지만 <code class="language-plaintext highlighter-rouge">import</code> 속성을 제외한 나머지 속성은 하나의 페이지에서 오직 한 번씩만 지정할 수 있다.<br /><br /></li>
</ul>

<h2 id="2-include-지시어">2. include 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ include </span><span class="na">file=</span><span class="s">"header.jsp"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li>특정한 <code class="language-plaintext highlighter-rouge">JSP</code> 파일 또는 <code class="language-plaintext highlighter-rouge">HTML</code> 파일을 해당 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 삽입할 수 있도록 하는 기능을 제공한다.</li>
  <li><code class="language-plaintext highlighter-rouge">include</code>되는 <code class="language-plaintext highlighter-rouge">JSP</code> 코드 자체가 해당 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 복사되어 더해지므로 서블릿 컴파일 과정은 <code class="language-plaintext highlighter-rouge">include</code> 되는 페이지의 수가 아무리 많아도 단 한 번만 이루어지게 된다.</li>
  <li>사용되는 공통 변수값들을 추가할 때 주로 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">include</code> 지시어는 중첩 사용이 가능하기 때문에 <code class="language-plaintext highlighter-rouge">include</code>되는 파일 안에서 또 다른 파일을 <code class="language-plaintext highlighter-rouge">include</code>하여도 문제없이 동작한다.<br /><br /></li>
</ul>

<h2 id="3-taglib-지시어">3. taglib 지시어</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ taglib </span><span class="na">url=</span><span class="s">"http://taglib.com/sampleURI"</span><span class="na"> prefix=</span><span class="s">"samplePrefix"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSTL(JSP Standard Tag Library)이나 커스텀 태그 등 태그 라이브러리를 </code>JSP`에서 사용할 때 접두사를 지정하기 위해 사용된다.</li>
  <li><code class="language-plaintext highlighter-rouge">uri</code> 속성과 <code class="language-plaintext highlighter-rouge">prefix</code> 속성으로 이루어진다.</li>
</ul>

<h3 id="-uri-속성">🔸 uri 속성</h3>
<ul>
  <li>태그 라이브러리에서 정의한 태그와 속성 저보를 저장한 <code class="language-plaintext highlighter-rouge">TLD(Tag Library Descriptor)</code> 파일이 존재하는 위치 지정</li>
</ul>

<h3 id="-prefix-속성">🔸 prefix 속성</h3>
<ul>
  <li>사용할 커스텀 태그의 네임 스페이스(Name Space)를 지정</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 JSP 지시어란?(Directive)]]></summary></entry><entry><title type="html">JSP 액션 태그</title><link href="http://localhost:4000/jsp/JSP-action-tag/" rel="alternate" type="text/html" title="JSP 액션 태그" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/jsp/JSP-action-tag</id><content type="html" xml:base="http://localhost:4000/jsp/JSP-action-tag/"><![CDATA[<h1 id="-액션-태그란">👀 액션 태그란?</h1>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;jsp:</span>~ 형태로 시작하는 태그<span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 페이지에서 <code class="language-plaintext highlighter-rouge">HTML</code> 태그 형태로 <code class="language-plaintext highlighter-rouge">JSP</code> 코드의 역할을 수행하는 것</li>
  <li>스크립틀릿 등의 스크립트 요소(자바 코드)를 사용하지 않기 때문에 <code class="language-plaintext highlighter-rouge">JSP</code> 페이지의 내부적인 프로그램 로직을 사용자로부터 감출 수 있다.</li>
  <li>즉, 사용자에게 보여지는 프레젠테이션 부분과 사용자의 요청을 처리하는 비즈니스 로직 부분(프로그램 부분)을 분리하는 것이 가능하다.</li>
  <li>프로그램 재사용성을 높여주고 코드의 간결성을 향상시킨다.</li>
</ul>

<h2 id="--jspforward-">🔸 &lt; jsp:forward &gt;</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;jsp:forward </span><span class="na">page=</span><span class="s">"이동할 페이지(ex. forward.jsp)"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;jsp:forward </span><span class="na">page=</span><span class="s">"이동할 페이지"</span><span class="nt">&gt;&lt;/jsp:forward&gt;</span>
</code></pre></div></div>

<ul>
  <li>액션 태그는 <code class="language-plaintext highlighter-rouge">XML</code> 문법을 이용하여 구현된 기능이므로 태그의 종료 끝에 반드시 종료 태그가 있어야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">forward</code> 액션은 현재 페이지의 요청과 응답에 관한 처리권을 <code class="language-plaintext highlighter-rouge">page</code> 속성에 지정된 이동할 페이지로 영구적으로 넘기는 기능을 한다.</li>
</ul>

<h2 id="--jspinclude-">🔸 &lt; jsp:include &gt;</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;jsp:include </span><span class="na">page=</span><span class="s">"이동할 페이지(ex. forward.jsp)"</span><span class="na"> flush=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;jsp:include </span><span class="na">page=</span><span class="s">"이동할 페이지(ex. forward.jsp)"</span><span class="na"> flush=</span><span class="s">"false"</span><span class="nt">&gt;&lt;/jsp:include&gt;</span>
</code></pre></div></div>

<ul>
  <li>특정 페이지를 <code class="language-plaintext highlighter-rouge">include</code> 한다.</li>
  <li>각각의 페이지를 컴파일 후 해당 파일을 <code class="language-plaintext highlighter-rouge">include</code> 한다.</li>
  <li>top, bottom과 같은 동일 사용 페이지를 추가할 때 사용한다.</li>
</ul>

<h2 id="--jspparam-">🔸 &lt; jsp:param &gt;</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;jsp:param </span><span class="na">name=</span><span class="s">"파라미터 이름1"</span><span class="na"> value=</span><span class="s">"파라미터 값1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;jsp:param </span><span class="na">name=</span><span class="s">"파라미터 이름2"</span><span class="na"> value=</span><span class="s">"파라미터 값2"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">forward</code>와 <code class="language-plaintext highlighter-rouge">include</code> 태그를 사용하여 이동할 페이지에 추가적으로 넘겨줄 파라미터가 있으면 <code class="language-plaintext highlighter-rouge">&lt;jsp:param/&gt;</code> 태그를 사용할 수 있다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="JSP" /><category term="JSP" /><category term="WEB" /><summary type="html"><![CDATA[👀 액션 태그란?]]></summary></entry></feed>