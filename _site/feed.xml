<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-08T23:10:24+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부 기록하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">Python) 프로그래머스. 나머지가 1이 되는 수 찾기</title><link href="http://localhost:4000/programmers/programmers-rest1-java/" rel="alternate" type="text/html" title="Python) 프로그래머스. 나머지가 1이 되는 수 찾기" /><published>2022-07-08T00:00:00+09:00</published><updated>2022-07-08T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-rest1-java</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-rest1-java/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/87389">https://school.programmers.co.kr/learn/courses/30/lessons/87389</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>자연수 n이 매개변수로 주어집니다. n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x를 return 하도록 solution 함수를 완성해주세요. 답이 항상 존재함은 증명될 수 있습니다.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>3 ≤ n ≤ 1,000,000<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>한동안 코테준비를 놓았다가 다시 시작해 보면서 프로그래머스의 레벨1부터 시작하기로 했다. 원하는 직무는 자바 개발이니까 자바로 코테를 연습하려 하는데 너~~~무 오랜만이라 그런지 풀이를 떠올리는데 의외로 오래 걸렸다…ㅠ 반성하자…</li>
  <li>시간에 대한 제한이 없고 입력값의 최대치도 그리 큰 수가 아니라 완전탐색으로 풀었다.</li>
  <li>입력으로 주어지는 값의 최소값이 3이니까 반복문으로 3의 나머지를 1로 만들 수 있는 2부터 시작해서 <code class="language-plaintext highlighter-rouge">n</code>보다 1 작을 때까지 증가시키며 모듈러 연산(%)을 사용해서 나머지를 구했다. 이 과정에서 나머지가 1이면 정답으로 저장하고 반복문을 탈출한다.</li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/3e9869bda33ee95da0b89724c7f40456.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="Math" /><category term="Java" /><summary type="html"><![CDATA[문제 링크 https://school.programmers.co.kr/learn/courses/30/lessons/87389]]></summary></entry><entry><title type="html">정보처리기사) 데이터베이스 설계 절차</title><link href="http://localhost:4000/certificate/db-step/" rel="alternate" type="text/html" title="정보처리기사) 데이터베이스 설계 절차" /><published>2022-07-06T00:00:00+09:00</published><updated>2022-07-06T00:00:00+09:00</updated><id>http://localhost:4000/certificate/db-step</id><content type="html" xml:base="http://localhost:4000/certificate/db-step/"><![CDATA[<ul>
  <li>최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲<br /><br /></li>
</ul>

<h1 id="데이터베이스-설계-절차">데이터베이스 설계 절차</h1>
<ul>
  <li>요구사항 분석 - 개념적 설계 - 논리적 설계 - 물리적 설계 - 구현</li>
</ul>

<h2 id="요구사항-분석">요구사항 분석</h2>
<ul>
  <li>DB에 저장할 대상, 제약조건, 데이터 처리 등에 대한 요구사항 수집</li>
  <li>개체와 애트리뷰트, 개체 간 관계 파악, 데이터 처리 시 사용되는 주요 연산들, 연산 시 접근하는 데이터 양 등을 요구사항 분석</li>
</ul>

<h2 id="개념적-설계">개념적 설계</h2>
<ul>
  <li>개체 타입, 관계 타입, 속성들을 식별하고, 속성들의 도메인을 결정하고, 후보키와 기본키를 결정</li>
  <li>개념적 스키마(ER 스키마)는 ER 다이어그램으로 표현됨</li>
  <li>현실 세계에 대한 인식을 추상적, 개념적으로 표현하여 개념적 구조를 도출하는 과정으로 주요 산출물에는 E-R 다이어그램이 있다.</li>
</ul>

<h2 id="논리적-설계">논리적 설계</h2>
<ul>
  <li>선택한 DBMS의 데이터 모델을 사용하여 논리적 스키마 생성</li>
  <li>트랙잭션 인터페이스 설계, 스키마의 평가 및 설계 수행</li>
  <li>스키마 정제(정규화) : 관계 데이터베이스 스키마를 더 좋은 관계 데이터베이스 스키마로 변환하기 위해서 정규화 과정을 적용</li>
  <li>목표 DBMS에 맞는 스키마 설계, 트랜잭션 인터페이스를 설계하는 정규화 과정을 수행한다.</li>
</ul>

<h2 id="물리적-설계">물리적 설계</h2>
<ul>
  <li>데이터 처리 요구사항들을 만족시키기 위해 저장 구조와 접근 경로 등을 결정</li>
  <li>특정 DBMS의 특성 및 성능을 고려하여 데이터베이스 저장 구조로 변환하는 과정으로 결과로 나오는 명세서는 테이블 정의서 등이 있다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Certificate" /><category term="Certificate" /><category term="DB" /><category term="study" /><summary type="html"><![CDATA[최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲 데이터베이스 설계 절차 요구사항 분석 - 개념적 설계 - 논리적 설계 - 물리적 설계 - 구현]]></summary></entry><entry><title type="html">정보처리기사) 스키마(Schema)</title><link href="http://localhost:4000/certificate/schema/" rel="alternate" type="text/html" title="정보처리기사) 스키마(Schema)" /><published>2022-07-05T00:00:00+09:00</published><updated>2022-07-05T00:00:00+09:00</updated><id>http://localhost:4000/certificate/schema</id><content type="html" xml:base="http://localhost:4000/certificate/schema/"><![CDATA[<ul>
  <li>최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲<br /><br /></li>
</ul>

<h1 id="스키마schema">스키마(Schema)</h1>
<ul>
  <li>데이터베이스의 객체로는 스키마(Schema), 도메인(Domain), 테이블(Table), 뷰(View), 인덱스(Index) 등이 있으며 데이터 정의어(DDL)를 이용하여 객체를 생성(Create), 변경(Alter), 제거(Drop, Truncate)가 가능하다.</li>
  <li>스키마란 데이터베이스의 전체적인 구조와 제약조건에 대한 명세로, 개념 스키마, 내부 스키마, 외부 스키마로 나뉜다.</li>
  <li>스키마는 실세계의 구조를 표현하며 데이터 모델을 사용하여 만들어지며 하나의 조직에서 관심 있는 데이터의 구조를 기술한 언어적이고 그래픽적으로 표현한 시간에 독립적인 고정된 집합체이다.</li>
</ul>

<h2 id="외부external-스키마">외부(External) 스키마</h2>
<ul>
  <li>사용자 관점, 사용자마다 다른 스키마, 개념 스키마의 서브 스키마</li>
</ul>

<h2 id="개념conceptual-스키마">개념(Conceptual) 스키마</h2>
<ul>
  <li>통합 관점, 논리적 구조, 관계, 제약조건</li>
</ul>

<h2 id="내부internal-스키마">내부(Internal) 스키마</h2>
<ul>
  <li>물리저장장치 관점, 파일/레코드 등 물리적 저장 구조<br /><br /></li>
</ul>

<h1 id="도메인domain">도메인(Domain)</h1>
<ul>
  <li>속성의 데이터 타입과 크기, 제약조건 등을 지정한 정보</li>
  <li>속성이 가질 수 있는 값의 범위로 이해 가능<br /><br /></li>
</ul>

<h1 id="테이블table">테이블(Table)</h1>
<ul>
  <li>데이터의 저장 공간<br /><br /></li>
</ul>

<h1 id="뷰view">뷰(View)</h1>
<ul>
  <li>하나 이상의 물리 테이블에서 유도되는 가상의 논리 테이블<br /><br /></li>
</ul>

<h1 id="인덱스index">인덱스(Index)</h1>
<ul>
  <li>검색을 빠르게 하기 위한 데이터 구조<br /><br /></li>
</ul>

<h1 id="데이터-독립성data-independence">데이터 독립성(Data Independence)</h1>
<ul>
  <li>데이터베이스에서 상위 단계의 스키마에 영향을 주지 않으면서 해당 단계의 스키마를 변경할 수 있는 성질<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Certificate" /><category term="Certificate" /><category term="schema" /><category term="study" /><summary type="html"><![CDATA[최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲 스키마(Schema) 데이터베이스의 객체로는 스키마(Schema), 도메인(Domain), 테이블(Table), 뷰(View), 인덱스(Index) 등이 있으며 데이터 정의어(DDL)를 이용하여 객체를 생성(Create), 변경(Alter), 제거(Drop, Truncate)가 가능하다. 스키마란 데이터베이스의 전체적인 구조와 제약조건에 대한 명세로, 개념 스키마, 내부 스키마, 외부 스키마로 나뉜다. 스키마는 실세계의 구조를 표현하며 데이터 모델을 사용하여 만들어지며 하나의 조직에서 관심 있는 데이터의 구조를 기술한 언어적이고 그래픽적으로 표현한 시간에 독립적인 고정된 집합체이다.]]></summary></entry><entry><title type="html">정보처리기사) OSI 7계층</title><link href="http://localhost:4000/certificate/osi7/" rel="alternate" type="text/html" title="정보처리기사) OSI 7계층" /><published>2022-07-04T00:00:00+09:00</published><updated>2022-07-04T00:00:00+09:00</updated><id>http://localhost:4000/certificate/osi7</id><content type="html" xml:base="http://localhost:4000/certificate/osi7/"><![CDATA[<ul>
  <li>최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲</li>
</ul>

<h1 id="osi-7계층">OSI 7계층</h1>
<h2 id="물데네트세프응">물데네트세프응!!!</h2>

<ul>
  <li>물리 - 기계적, 전기적 특성. X.21, 리피터, 허브</li>
  <li>데이터 링크 - 흐름 제어, 오류 검출과 회복, HDLC, MAC, 랜카드, 브리지, 스위치</li>
  <li>네트워크 -  경로 설정(Routing), 트래픽 제어, 패킷, X.25, IP, 라우터</li>
  <li>전송 - 다중화, 오류 제어, 흐름 제어, TCP, UDP, 게이트웨이</li>
  <li>세션 - 송수신 측 간의  관련성을 유지, 대화 제어</li>
  <li>표현 - 데이터 암호화, 데이터 압축, 형식 변환</li>
  <li>응용 - 파일 전송, 전자 사서함(메일), 정보 교환, 가상 터미널<br /></li>
</ul>

<p>⭐️ <strong>데이터 링크</strong>는 노드 사이의 흐름과 오류 제어. <br />
⭐️ <strong>전송</strong>은 단말기 사이의 흐름과 오류 제어.</p>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Certificate" /><category term="Certificate" /><category term="osi7Layer" /><category term="study" /><summary type="html"><![CDATA[최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲 OSI 7계층 물데네트세프응!!!]]></summary></entry><entry><title type="html">정보처리기사) 정규화와 반정규화</title><link href="http://localhost:4000/certificate/db-normalization/" rel="alternate" type="text/html" title="정보처리기사) 정규화와 반정규화" /><published>2022-07-04T00:00:00+09:00</published><updated>2022-07-04T00:00:00+09:00</updated><id>http://localhost:4000/certificate/db-normalization</id><content type="html" xml:base="http://localhost:4000/certificate/db-normalization/"><![CDATA[<ul>
  <li>최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲</li>
</ul>

<h1 id="정규화normalization">정규화(Normalization)</h1>
<ul>
  <li>중복을 최소화하게 데이터를 구조화하는 작업</li>
  <li>데이터베이스 이상현상의 원인이 되는 데이터 중복성을 제거하여 데이터의 무결성을 보존하는 기법</li>
  <li>
    <p>1NF, 2NF, 3NF, BCNF, 4NF, 5NF로 분류한다. <br /><br /></p>
  </li>
  <li>제1정규화(1NF) : 릴레이션 R의 모든 속성값이 원자값을 가지는 릴레이션</li>
  <li>제2정규화(2NF) : 릴레이션 R이 제1정규형이고 기본키가 아닌 속성이 기본키에 완전 함수 종속일 때</li>
  <li>제3정규화(3NF) : 릴레이션 R이 제2정규형이고 기본키가 아닌 속성이 기본키에 비이행적 non-transitive으로 종속할 때(직접 종속)</li>
  <li>보이스/코드 정규화(BCNF) : 릴레이션 R에서 함수 종속성 X -&gt; Y가 성립할 때 모든 결정자 X가 후보키 일 때</li>
  <li>제4정규화(4NF) : 릴레이션 R에서 MVD A -» B가 존재할 때 R의 모든 속성들이 A에 함수종속(FD)이면 R은 4NF(즉 R의 모든 속성 X에 대해 A -&gt; X이고 A가 후보키)</li>
  <li>제5정규화(5NF) : 릴레이션 R에 존재하는 모든 조인 종속(Join Dependency)이 R의 후보키를 통해 성립되면, R은 5NF
<br /><br /></li>
</ul>

<h1 id="비정규화denormalization">비정규화(Denormalization)</h1>
<ul>
  <li>정규화된 데이터 모델을 통합, 중복, 분리하는 과정으로, 성능개선을 위하여 의도적으로 정규화 원칙을 위배하는 행위</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Certificate" /><category term="Certificate" /><category term="normalization" /><category term="denormalization" /><category term="study" /><summary type="html"><![CDATA[최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲 정규화(Normalization) 중복을 최소화하게 데이터를 구조화하는 작업 데이터베이스 이상현상의 원인이 되는 데이터 중복성을 제거하여 데이터의 무결성을 보존하는 기법 1NF, 2NF, 3NF, BCNF, 4NF, 5NF로 분류한다.]]></summary></entry><entry><title type="html">정보처리기사) 결합도와 응집도</title><link href="http://localhost:4000/certificate/coupling-cohension/" rel="alternate" type="text/html" title="정보처리기사) 결합도와 응집도" /><published>2022-07-03T00:00:00+09:00</published><updated>2022-07-03T00:00:00+09:00</updated><id>http://localhost:4000/certificate/coupling-cohension</id><content type="html" xml:base="http://localhost:4000/certificate/coupling-cohension/"><![CDATA[<ul>
  <li>최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲</li>
</ul>

<h1 id="결합도coupling">결합도(Coupling)</h1>
<ul>
  <li>결합도는 모듈과 모듈 사이의 관련성이 어느 정도인가를 나타내며, 관련성이 적을수록 모듈의 독립성이 높아 모듈 간 영향이 작아진다. 결합도는 자료 결합도가 제일 낮고, 내용 결합도로 갈수록 강해진다.</li>
  <li>품질 측면에서 가장 높은 품질은 자료 결합도이며, 내용 결합도의 품질이 가장 낮다!</li>
</ul>

<h2 id="자료-결합도-data-coupling">자료 결합도 (Data Coupling)</h2>
<ul>
  <li>모듈 간의 인터페이스로 전달되는 파라미터를 통해서만 모듈 상호 작용이 일어난다.</li>
</ul>

<h2 id="스탬프-결합도-stamp-coupling">스탬프 결합도 (Stamp Coupling)</h2>
<ul>
  <li>모듈 간의 인터페이스로 배열이나 오브젝트, 스트럭처 등이 전달되는 경우</li>
</ul>

<h2 id="제어-결합도-control-coupling">제어 결합도 (Control Coupling)</h2>
<ul>
  <li>단순 처리할 대상인 값만 전달하는 것이 아니라 어떻게 처리해야 한다는 제어요소가 전달되는 경우</li>
</ul>

<h2 id="외부-결합도-external-coupling">외부 결합도 (External Coupling)</h2>
<ul>
  <li>모듈에서 외부로 선언한 데이터(변수)를 다른 모듈에서 참조할 때의 경우로 외부에서 도입된 데이터 포맷, 통신 프로토콜, 또는 디바이스 인터페이스를 공유할 때 주로 발생한다.</li>
</ul>

<h2 id="공통-결합도-common-coupling">공통 결합도 (Common Coupling)</h2>
<ul>
  <li>파라미터가 아닌 모듈 밖에 선언되어 있는 전역변수를 참조하고 전역변수를 갱신하는 식으로 상호 작용하는 경우</li>
</ul>

<h2 id="내용-결합도-content-coupling">내용 결합도 (Content Coupling)</h2>
<ul>
  <li>다른 모듈 내부에 있는 변수나 기능을 또 다른 모듈에서 사용하는 경우<br /><br /></li>
</ul>

<h1 id="응집도cohension">응집도(Cohension)</h1>
<ul>
  <li>응집도는 모듈 내부의 구성유소 간 관계의 밀접 정도로 평가되며, 응집도가 높을수록 필요한 요소들로 구성되고 낮을수록 요소들 간의 관련성이 적은 요소들로 구성된다.</li>
  <li>품질 측면에서 가장 낮은 품질은 우연적 응집도이며, 기능적 응집도의 품질이 가장 높다.</li>
</ul>

<h2 id="기능적-응집도-functional-cohension">기능적 응집도 (Functional Cohension)</h2>
<ul>
  <li>모듈 내부의 모든 기능이 단일한 목적을 위해 수행된다.</li>
</ul>

<h2 id="순차적-응집도-sequential-cohension">순차적 응집도 (Sequential Cohension)</h2>
<ul>
  <li>모듈 내에서 한 활동으로부터 나온 출력값을 다른 활동이 사용하는 경우</li>
</ul>

<h2 id="통신적-응집도-communication-cohension">통신적 응집도 (Communication Cohension)</h2>
<ul>
  <li>동일한 입력과 출력을 사용하여 다른 기능을 수행하는 활동들이 모여 있을 경우</li>
</ul>

<h2 id="절차적-응집도-procedural-cohension">절차적 응집도 (Procedural Cohension)</h2>
<ul>
  <li>모듈이 다수의 관련 기능을 가질 때, 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행하는 경우</li>
</ul>

<h2 id="시간적-응집도-temporal-cohension">시간적 응집도 (Temporal Cohension)</h2>
<ul>
  <li>연관된 기능이라기보다는 특정 시간에 처리되어야 하는 활동들을 한 모듈에서 처리하는 경우</li>
</ul>

<h2 id="논리적-응집도-logical-cohension">논리적 응집도 (Logical Cohension)</h2>
<ul>
  <li>유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우</li>
</ul>

<h2 id="우연적-응집도-coincidential-cohension">우연적 응집도 (Coincidential Cohension)</h2>
<ul>
  <li>모듈 내부의 각 구성 요소들이 연관이 없는 경우<br /><br /></li>
</ul>

<h3 id="응집도는-우-논-시-절-통-순-기">응집도는 우-논-시-절-통-순-기</h3>
<h3 id="결합도는-자-스-제-외-공-내">결합도는 자-스-제-외-공-내</h3>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Certificate" /><category term="Certificate" /><category term="coupling" /><category term="cohension" /><category term="study" /><summary type="html"><![CDATA[최근 미뤄뒀던 정보처리기사 실기를 준비하며… 꼭 외워야 하는 내용 정리 🥲 결합도(Coupling) 결합도는 모듈과 모듈 사이의 관련성이 어느 정도인가를 나타내며, 관련성이 적을수록 모듈의 독립성이 높아 모듈 간 영향이 작아진다. 결합도는 자료 결합도가 제일 낮고, 내용 결합도로 갈수록 강해진다. 품질 측면에서 가장 높은 품질은 자료 결합도이며, 내용 결합도의 품질이 가장 낮다!]]></summary></entry><entry><title type="html">디자인패턴 12) 복합 패턴</title><link href="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter12/" rel="alternate" type="text/html" title="디자인패턴 12) 복합 패턴" /><published>2022-06-30T00:00:00+09:00</published><updated>2022-06-30T00:00:00+09:00</updated><id>http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter12</id><content type="html" xml:base="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter12/"><![CDATA[<h1 id="chapter-12-복합-패턴composite-pattern">CHAPTER 12. 복합 패턴(Composite Pattern)</h1>
<h2 id="1-복합-패턴">1. 복합 패턴</h2>
<ul>
  <li>반복적으로 생길 수 있는 일반적인 문제를 해결하는 용도로 2개 이상의 패턴을 결합해서 사용하는 것</li>
</ul>

<h2 id="2-복합-패턴-구현-예제---오리-시뮬레이션-게임">2. 복합 패턴 구현 예제 - 오리 시뮬레이션 게임</h2>
<h3 id="2-1-오리-구상-클래스-만들기">2-1. 오리 구상 클래스 만들기</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span> <span class="c1">// 꽥꽥 소리 내는 메서드</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"꽥꽥"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckCall</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"꽉꽉"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>오리 소리를 내는 인터페이스와 그걸 구현한 오리 클래스들 생성</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">mallardDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedheadDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckCall</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RubberDuck</span><span class="o">();</span> <span class="c1">// 아까 만든 오리들 생성</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n오리 시뮬레이션 게임"</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">mallardDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>   <span class="c1">// 오리들 꽥꽥 확인</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>   <span class="c1">// 매개변수로 받은 오리의 꽥꽥 메서드 실행 </span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/compsitePattern1.png" width="300" /></p>

<h3 id="2-2-어댑터-패턴-사용해서-거위-추가">2-2. 어댑터 패턴 사용해서 거위 추가</h3>

<ul>
  <li>거위 클래스 추가</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Goose</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">honk</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"끽끽"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>거위를 오리와 같이 쓸 수 있게 어댑터 추가 - 변환할 타깃 인터페이스를 구현해야 함</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GooseAdapter</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="nc">Goose</span> <span class="n">goose</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GooseAdapter</span><span class="o">(</span><span class="nc">Goose</span> <span class="n">goose</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">goose</span> <span class="o">=</span> <span class="n">goose</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">goose</span><span class="o">.</span><span class="na">honk</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>시뮬레이터에 거위도 추가해서 테스트</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">mallardDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedheadDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckCall</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RubberDuck</span><span class="o">();</span> <span class="c1">// 아까 만든 오리들 생성</span>
        <span class="nc">Quackable</span> <span class="n">goose</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GooseAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">Goose</span><span class="o">());</span> <span class="c1">// 어댑터를 사용하면 오리로 감싼 거위 생성 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n오리 시뮬레이션 게임"</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">mallardDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>   <span class="c1">// 오리들 꽥꽥 확인</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">goose</span><span class="o">);</span>    <span class="c1">// 거위도 꽉꽉 가능 </span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/compsitePatter2.png" width="300" /></p>

<h3 id="2-3-데코레이터-패턴-사용해서-오리가-소리-낸-횟수-세는-기능-추가">2-3. 데코레이터 패턴 사용해서 오리가 소리 낸 횟수 세는 기능 추가</h3>

<ul>
  <li>오리가 소리 내는 횟수를 세는 클래스를 데코레이터 클래스로 만듦</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuackCounter</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span> <span class="c1">// 데코레이터 클래스</span>
    <span class="nc">Quackable</span> <span class="n">duck</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">duckCnt</span><span class="o">;</span> <span class="c1">// 모든 객체에서 꽥꽥 소리를 낸 횟수를 세야 하기 때문에 static 변수 사용</span>

    <span class="kd">public</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">duck</span> <span class="o">=</span> <span class="n">duck</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
        <span class="n">duckCnt</span><span class="o">++;</span>  <span class="c1">// 꽥꽥 메서드가 호출되면 행동은 duck 객체로 위임하고 횟수 증가</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getDuckCnt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">duckCnt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>시뮬레이터 수정해서 한 번 더 테스트</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">mallardDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">());</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedheadDuck</span><span class="o">());</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">DuckCall</span><span class="o">());</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RubberDuck</span><span class="o">());</span> <span class="c1">// Quackable을 데코레이터로 감싸 줌</span>
        <span class="nc">Quackable</span> <span class="n">goose</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GooseAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">Goose</span><span class="o">());</span> <span class="c1">// 어댑터를 사용하면 오리로 감싼 거위 생성 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n오리 시뮬레이션 게임"</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">mallardDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>   <span class="c1">// 오리들 꽥꽥 확인</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">goose</span><span class="o">);</span>    <span class="c1">// 거위도 꽉꽉 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리가 소리 낸 횟수 : "</span> <span class="o">+</span> <span class="nc">QuackCounter</span><span class="o">.</span><span class="na">getDuckCnt</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 번"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/compsitePatter3.png" width="300" /></p>

<h3 id="2-4-추상-팩토리-패턴-사용해서-오리들을-캡슐화하기">2-4. 추상 팩토리 패턴 사용해서 오리들을 캡슐화하기</h3>

<ul>
  <li>오리를 생성할 추상 클래스 정의</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractDuckFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Quackable</span> <span class="nf">createMallardDuck</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Quackable</span> <span class="nf">createRedheadDuck</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Quackable</span> <span class="nf">createDuckCall</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Quackable</span> <span class="nf">createRubberDuck</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Quackable</span> <span class="nf">createGoose</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>추상 클래스를 상속한 오리 생성 팩토리 생성</li>
  <li>각 오리들이 소리낸 횟수를 셀 수 있게 데코레이터 클래스로 감싼다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountingDuckFactory</span> <span class="kd">extends</span> <span class="nc">AbstractDuckFactory</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Quackable</span> <span class="nf">createMallardDuck</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Quackable</span> <span class="nf">createRedheadDuck</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedheadDuck</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Quackable</span> <span class="nf">createDuckCall</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">DuckCall</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Quackable</span> <span class="nf">createRubberDuck</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RubberDuck</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Quackable</span> <span class="nf">createGoose</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">GooseAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">Goose</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>시뮬레이터 수정해서 테스트</li>
  <li>이제 오리 팩토리를 사용해서 오리 객체를 만들 것이기 때문에 시뮬레이터에서 객체를 직접 생성하던 부분을 없애고 팩토리의 생성 메서드를 사용하는 것으로 바꾼다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountingDuckFactory</span><span class="o">();</span>

        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">(</span><span class="n">duckFactory</span><span class="o">);</span> <span class="c1">// 오리 팩토리를 사용할 수 있게 수정</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">mallardDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRedheadDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createDuckCall</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRubberDuck</span><span class="o">();</span> 
        <span class="nc">Quackable</span> <span class="n">goose</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createGoose</span><span class="o">();</span> <span class="c1">// 객체의 인스턴스를 팩토리에서 생성하도록 위임</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n오리 시뮬레이션 게임"</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">mallardDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>   <span class="c1">// 오리들 꽥꽥 확인</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">goose</span><span class="o">);</span>    <span class="c1">// 거위도 꽉꽉 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리가 소리 낸 횟수 : "</span> <span class="o">+</span> <span class="nc">QuackCounter</span><span class="o">.</span><span class="na">getDuckCnt</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 번"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="2-5-컴포지트-패턴으로-오리-무리-만들기">2-5. 컴포지트 패턴으로 오리 무리 만들기</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Flock</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Quackable</span><span class="o">&gt;</span> <span class="n">quackers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Quackable</span><span class="o">&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">quacker</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">quackers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">quacker</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Quackable</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">quackers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="c1">// 반복자 패턴 사용 </span>
        <span class="k">while</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Quackable</span> <span class="n">quacker</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="n">quacker</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>시뮬레이터 수정 후 테스트</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountingDuckFactory</span><span class="o">();</span>

        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">(</span><span class="n">duckFactory</span><span class="o">);</span> <span class="c1">// 오리 팩토리를 사용할 수 있게 수정</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRedheadDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createDuckCall</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRubberDuck</span><span class="o">();</span> <span class="c1">// 객체의 인스턴스를 팩토리에서 생성하도록 위임</span>
        <span class="nc">Quackable</span> <span class="n">goose</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createGoose</span><span class="o">();</span> <span class="c1">// 어댑터를 사용하면 오리로 감싼 거위 생성 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n오리 시뮬레이션 게임 : 무리 (+컴포지트)"</span><span class="o">);</span>

        <span class="nc">Flock</span> <span class="n">flockOfDucks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flock</span><span class="o">();</span>

        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">goose</span><span class="o">);</span>    <span class="c1">// 오리 무리 생성</span>

        <span class="nc">Flock</span> <span class="n">flockOfMallards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flock</span><span class="o">();</span>

        <span class="nc">Quackable</span> <span class="n">mallardOne</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardTwo</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardThree</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardFour</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>

        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardOne</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardTwo</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardThree</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardFour</span><span class="o">);</span>   <span class="c1">// 물오리 무리 생성</span>

        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">flockOfMallards</span><span class="o">);</span>  <span class="c1">// 물오리 무리를 오리 무리에 추가</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리 시뮬레이션 게임 : 전체 무리"</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">flockOfDucks</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리 시뮬레이션 게임 : 물오리 무리"</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">flockOfMallards</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>   <span class="c1">// 오리들 꽥꽥 확인</span>
        <span class="n">simulate</span><span class="o">(</span><span class="n">goose</span><span class="o">);</span>    <span class="c1">// 거위도 꽉꽉 가능</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리가 소리 낸 횟수 : "</span> <span class="o">+</span> <span class="nc">QuackCounter</span><span class="o">.</span><span class="na">getDuckCnt</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 번"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/compsitePatter4.png" width="300" /></p>

<h3 id="2-6-옵저버-패턴으로-개별-오리를-추적하는-기능-만들기">2-6. 옵저버 패턴으로 개별 오리를 추적하는 기능 만들기</h3>

<ul>
  <li>옵저버 인터페이스 정의</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">QuackObservable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 꽥꽥 인터페이스에서 옵저버 인터페이스 확장</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Quackable</span> <span class="kd">extends</span> <span class="nc">QuackObservable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span> <span class="c1">// 꽥꽥 소리 내는 메서드</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>옵저버 보조 클래스 생성 - 옵저버를 등록하고 연락을 돌리는 기능</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Observable</span> <span class="kd">implements</span> <span class="nc">QuackObservable</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Observer</span><span class="o">&gt;</span> <span class="n">observers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">QuackObservable</span> <span class="n">duck</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Observable</span><span class="o">(</span><span class="nc">QuackObservable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">duck</span> <span class="o">=</span> <span class="n">duck</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>    <span class="c1">// 옵저버 등록</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Observer</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">observers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Observer</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">duck</span><span class="o">);</span>  <span class="c1">// 연락 돌림</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>옵저버 보조 객체와 꽥꽥 클래스 결합</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Observer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span>
    <span class="nc">Observable</span> <span class="n">observable</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MallardDuck</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">observable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Observable</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"꽥꽥"</span><span class="o">);</span>
        <span class="n">notifyObservers</span><span class="o">();</span>  <span class="c1">// 꽥꽥 메서드가 호출되면 옵저버들에게 알려줌</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">observable</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">observable</span><span class="o">.</span><span class="na">notifyObservers</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>오리 소리 세는 클래스에도 옵저버 추가</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Observer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuackCounter</span> <span class="kd">implements</span> <span class="nc">Quackable</span> <span class="o">{</span> <span class="c1">// 데코레이터 클래스</span>
    <span class="nc">Quackable</span> <span class="n">duck</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">duckCnt</span><span class="o">;</span> <span class="c1">// 모든 객체에서 꽥꽥 소리를 낸 횟수를 세야 하기 때문에 static 변수 사용</span>

    <span class="kd">public</span> <span class="nf">QuackCounter</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">duck</span> <span class="o">=</span> <span class="n">duck</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
        <span class="n">duckCnt</span><span class="o">++;</span>  <span class="c1">// 꽥꽥 메서드가 호출되면 행동은 duck 객체로 위임하고 횟수 증가</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getDuckCnt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">duckCnt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">notifyObservers</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>옵저버 인터페이스와 클래스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="nc">QuackObservable</span> <span class="n">duck</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Quackologist</span> <span class="kd">implements</span> <span class="nc">Observer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="nc">QuackObservable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"꽥꽥학자 : "</span> <span class="o">+</span> <span class="n">duck</span> <span class="o">+</span> <span class="s">"가 소리냈다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>시뮬레이터 수정 후 테스트</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckSimulator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DuckSimulator</span> <span class="n">simulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DuckSimulator</span><span class="o">();</span>
        <span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountingDuckFactory</span><span class="o">();</span>

        <span class="n">simulator</span><span class="o">.</span><span class="na">simulate</span><span class="o">(</span><span class="n">duckFactory</span><span class="o">);</span> <span class="c1">// 오리 팩토리를 사용할 수 있게 수정</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">AbstractDuckFactory</span> <span class="n">duckFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Quackable</span> <span class="n">redheadDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRedheadDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">duckCall</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createDuckCall</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">rubberDuck</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createRubberDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">gooseDuck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GooseAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">Goose</span><span class="o">());</span>

        <span class="nc">Flock</span> <span class="n">flockOfDucks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flock</span><span class="o">();</span>

        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">redheadDuck</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">duckCall</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rubberDuck</span><span class="o">);</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">gooseDuck</span><span class="o">);</span>

        <span class="nc">Flock</span> <span class="n">flockOfMallards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flock</span><span class="o">();</span>

        <span class="nc">Quackable</span> <span class="n">mallardOne</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardTwo</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardThree</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>
        <span class="nc">Quackable</span> <span class="n">mallardFour</span> <span class="o">=</span> <span class="n">duckFactory</span><span class="o">.</span><span class="na">createMallardDuck</span><span class="o">();</span>

        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardOne</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardTwo</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardThree</span><span class="o">);</span>
        <span class="n">flockOfMallards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mallardFour</span><span class="o">);</span>

        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">flockOfMallards</span><span class="o">);</span>  <span class="c1">// 물오리 무리를 오리 무리에 추가</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리 시뮬레이션 게임 (+옵저버)"</span><span class="o">);</span>

        <span class="nc">Quackologist</span> <span class="n">quackologist</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Quackologist</span><span class="o">();</span>
        <span class="n">flockOfDucks</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">quackologist</span><span class="o">);</span>

        <span class="n">simulate</span><span class="o">(</span><span class="n">flockOfDucks</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오리가 소리 낸 횟수 : "</span> <span class="o">+</span> <span class="nc">QuackCounter</span><span class="o">.</span><span class="na">getDuckCnt</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 번"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">simulate</span><span class="o">(</span><span class="nc">Quackable</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/compsitePatter5.png" width="300" /></p>
<p><br /><br /><br /></p>

<h1 id="참고">참고</h1>
<ul>
  <li>헤드퍼스트 디자인패턴(2022 개정판)</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Design Pattern" /><category term="DesignPattern" /><category term="CompositePattern" /><category term="study" /><summary type="html"><![CDATA[CHAPTER 12. 복합 패턴(Composite Pattern) 1. 복합 패턴 반복적으로 생길 수 있는 일반적인 문제를 해결하는 용도로 2개 이상의 패턴을 결합해서 사용하는 것]]></summary></entry><entry><title type="html">디자인패턴 10) 상태 패턴</title><link href="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter10/" rel="alternate" type="text/html" title="디자인패턴 10) 상태 패턴" /><published>2022-06-29T00:00:00+09:00</published><updated>2022-06-29T00:00:00+09:00</updated><id>http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter10</id><content type="html" xml:base="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter10/"><![CDATA[<h1 id="chapter-10-상태-패턴state-pattern">CHAPTER 10. 상태 패턴(State Pattern)</h1>
<h2 id="1-상태-패턴">1. 상태 패턴</h2>
<ul>
  <li>객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있다. 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있다.<br /><br /></li>
</ul>

<h2 id="2-상태-패턴을-사용하는-이유">2. 상태 패턴을 사용하는 이유</h2>
<ul>
  <li>상태 객체에 일련의 행동이 캡슐화된다. 상황에 따라 <code class="language-plaintext highlighter-rouge">Context</code> 객체에서 여러 상태 객체 중 한 객체에게 모든 행동을 맡기게 된다.</li>
  <li>그 객체의 내부 상태에 따라 현재 상태를 나타내는 객체가 바뀌게 되고, 그 결과로 <code class="language-plaintext highlighter-rouge">Context</code> 객체의 행동도 자연스럽게 바뀌게 되기 때문에 클라이언트는 상태 객체를 몰라도 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">Context</code> 객체 내부에 조건문으로 어떤 상태에서는 어떤 행동을 해라고 일일이 써줄 필요 없이 상태 객체를 호출하기만 하면 되는 것이다.<br /><br /></li>
</ul>

<h2 id="3-상태-패턴-흐름">3. 상태 패턴 흐름</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">State</code> 인터페이스로 모든 구상 상태 클래스의 공통 인터페이스를 정의한다. 이걸 구현하는 상태 클래스들을 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">Context</code> 클래스에 여러 상태 정보가 들어있다. 여기서 <code class="language-plaintext highlighter-rouge">request()</code> 메서드가 호출되면 상태 객체에게 해당 작업이 맡겨진다.</li>
  <li>상태 객체에서 작업을 처리한다. <br /><br /></li>
</ul>

<h2 id="4-상태-패턴-구현-예제---기본">4. 상태 패턴 구현 예제 - 기본</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GumballMachine</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">SOLD_OUT</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">NO_QUARTER</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">HAS_QUARTER</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">SOLD</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

    <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="no">SOLD_OUT</span><span class="o">;</span> <span class="c1">// 기본값은 매진 상태</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GumballMachine</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 알맹이가 있으면 동전 넣어주길 기다림</span>
            <span class="n">state</span> <span class="o">=</span> <span class="no">NO_QUARTER</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 동전 투입</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">HAS_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전은 한 개만 넣어주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">NO_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span> <span class="o">=</span> <span class="no">HAS_QUARTER</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전을 넣으셨습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD_OUT</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"매진되었습니다. 다음 기회에 이용해 주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알맹이를 내보내고 있습니다."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 동전 반환</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">ejectQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">HAS_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전이 반환됩니다."</span><span class="o">);</span>
            <span class="n">state</span> <span class="o">=</span> <span class="no">NO_QUARTER</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">NO_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전을 넣어주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이미 알맹이를 뽑으셨습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD_OUT</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전을 넣지 않으셨습니다. 동전이 반환되지 않습니다."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 손잡이를 돌리는 경우</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">turnCrank</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"손잡이는 한 번만 돌려주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">NO_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전을 넣어주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD_OUT</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"매진되었습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">HAS_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"손잡이를 돌리셨습니다."</span><span class="o">);</span>
            <span class="n">state</span> <span class="o">=</span> <span class="no">SOLD</span><span class="o">;</span>
            <span class="n">dispense</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 알맹이 내보내기</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dispense</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알맹이를 내보내고 있습니다."</span><span class="o">);</span>
            <span class="n">count</span><span class="o">--;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"더 이상 알맹이가 없습니다."</span><span class="o">);</span>
                <span class="n">state</span> <span class="o">=</span> <span class="no">SOLD_OUT</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">state</span> <span class="o">=</span> <span class="no">NO_QUARTER</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">NO_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"동전을 넣어주세요."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">SOLD_OUT</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"매진입니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">HAS_QUARTER</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알맹이를 내보낼 수 없습니다."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>알아볼 수 있긴 하지만 코드가 간결하지 않다. 어떤 상태가 추가될 때마다 새로운 조건문을 모든 메서드에 작성해줘야 한다. 이 과정에서 버그 생길 가능성 증가 <br /><br /></li>
</ul>

<h2 id="5-상태-클래스로-구현">5. 상태 클래스로 구현</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GumballMachine</span> <span class="o">{</span>

    <span class="nc">State</span> <span class="n">soldOutState</span><span class="o">;</span>
    <span class="nc">State</span> <span class="n">noQuarterState</span><span class="o">;</span>
    <span class="nc">State</span> <span class="n">hasQuarterState</span><span class="o">;</span>
    <span class="nc">State</span> <span class="n">soldState</span><span class="o">;</span>

    <span class="nc">State</span> <span class="n">state</span> <span class="o">=</span> <span class="n">soldOutState</span><span class="o">;</span> <span class="c1">// 기본값은 매진 상태</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GumballMachine</span><span class="o">(</span><span class="kt">int</span> <span class="n">numberGumballs</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">soldOutState</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SoldOutState</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">noQuarterState</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NoQuarterState</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">hasQuarterState</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HasQuarterState</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">soldState</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SoldState</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">numberGumballs</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">numberGumballs</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 알맹이가 있으면 동전 넣어주길 기다림</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">noQuarterState</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 없으면 매진 상태</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">soldOutState</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 동전 투입</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">state</span><span class="o">.</span><span class="na">insertQuarter</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// 동전 반환</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">ejectQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">state</span><span class="o">.</span><span class="na">ejectQuarter</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// 손잡이를 돌리는 경우</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">turnCrank</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">state</span><span class="o">.</span><span class="na">turnCrank</span><span class="o">();</span>
        <span class="n">state</span><span class="o">.</span><span class="na">dispense</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="nc">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">releaseBall</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알맹이를 내보내고 있습니다."</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">--;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">State</span> <span class="nf">getHasQuarterState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hasQuarterState</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">State</span> <span class="nf">getNoQuarterState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">noQuarterState</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">State</span> <span class="nf">getSoldState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">soldState</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">State</span> <span class="nf">getSoldOutState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">soldOutState</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>클라이언트에서는 상태 조건을 신경쓸 필요 없이 상태 객체를 호출하기만 하면 된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SoldState</span> <span class="kd">implements</span> <span class="nc">State</span> <span class="o">{</span>

    <span class="nc">GumballMachine</span> <span class="n">gumballMachine</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SoldState</span><span class="o">(</span><span class="nc">GumballMachine</span> <span class="n">gumballMachine</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gumballMachine</span> <span class="o">=</span> <span class="n">gumballMachine</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알맹이를 내보내고 있습니다."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">ejectQuarter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이미 알맹이를 뽑으셨습니다."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">turnCrank</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"손잡이는 한 번만 돌려주세요."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dispense</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 사용자가 동전을 넣고 손잡이를 돌리면 알맹이를 내보낸 다음</span>
        <span class="n">gumballMachine</span><span class="o">.</span><span class="na">releaseBall</span><span class="o">();</span>

        <span class="c1">// 머신에 남은 현재 알맹이 개수에 따라 상태 변경</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">gumballMachine</span><span class="o">.</span><span class="na">getCount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">gumballMachine</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">gumballMachine</span><span class="o">.</span><span class="na">getNoQuarterState</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Oops, out of gumballs!"</span><span class="o">);</span>
            <span class="n">gumballMachine</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">gumballMachine</span><span class="o">.</span><span class="na">getSoldOutState</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>각 상태 클래스에서 인터페이스별로 행동을 구현해주면 된다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li>헤드퍼스트 디자인패턴(2022 개정판)</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Design Pattern" /><category term="DesignPattern" /><category term="StatePattern" /><category term="study" /><summary type="html"><![CDATA[CHAPTER 10. 상태 패턴(State Pattern) 1. 상태 패턴 객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있다. 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있다.]]></summary></entry><entry><title type="html">디자인패턴 7) 어댑터 패턴과 퍼사드 패턴</title><link href="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter07/" rel="alternate" type="text/html" title="디자인패턴 7) 어댑터 패턴과 퍼사드 패턴" /><published>2022-06-25T00:00:00+09:00</published><updated>2022-06-25T00:00:00+09:00</updated><id>http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter07</id><content type="html" xml:base="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter07/"><![CDATA[<h1 id="chapter-07-어댑터-패턴과-퍼사드-패턴adapter--facade-pattern">CHAPTER 07. 어댑터 패턴과 퍼사드 패턴(Adapter &amp; Facade Pattern)</h1>
<h2 id="1-어댑터-패턴">1. 어댑터 패턴</h2>
<ul>
  <li>특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환한다. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와준다.<br /><br /></li>
</ul>

<h2 id="2-어댑터-패턴을-사용하는-이유">2. 어댑터 패턴을 사용하는 이유</h2>
<ul>
  <li>호환되지 않는 인터페이스를 사용하는 클라이언트를 그대로 활용할 수 있다.</li>
  <li>클라이언트와 구현된 인터페이스를 분리할 수 있다.</li>
  <li>변경 내역이 어댑터에 캡슐화되기 때문에 나중에 인터페이스가 바뀌더라도 클라이언트를 바꿀 필요가 없다.<br /><br /></li>
</ul>

<h2 id="3-어댑터-패턴-흐름">3. 어댑터 패턴 흐름</h2>
<ul>
  <li>클라이언트는 타깃 인터페이스에 맞게 구현되어 있다.
    <ul>
      <li>클라이언트에서 타깃 인터페이스로 메소드를 호출해서 어댑터에 요청을 보낸다.</li>
    </ul>
  </li>
  <li>어댑터는 타깃 인터페이스를 구현하며, 여기에는 어댑티(Adaptee) 인스턴스가 들어있다.
    <ul>
      <li>어댑터는 어댑티 인터페이스로 그 요청을 어댑티에 관한 (하나 이상의) 메소드 호출로 변환한다.</li>
    </ul>
  </li>
  <li>클라이언트는 호출 결과를 받긴 하지만 중간에 어댑터가 있다는 사실을 모른다.<br /><br /></li>
</ul>

<h2 id="4-객체-어댑터와-클래스-어댑터">4. 객체 어댑터와 클래스 어댑터</h2>
<ul>
  <li>지금까지 배운 것은 객체 어댑터이고 다중 상속을 이용한 클래스 어댑터가 있다.</li>
  <li>자바에서는 다중 상속을 지원하지 않기 때문에 클래스 어댑터의 구현이 가능하지 않다.</li>
  <li>클래스 어댑터 구현 : 어댑터를 어댑티와 타깃 클래스의 서브클래스로 만든다. (어댑티 클래스랑 타깃 클래스 두 개를 상속받게 함)</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Client</span>
<span class="p">{</span>
    
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Target</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Client</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">request</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Adaptee</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">specificRequest</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Adapter</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Target</span><span class="p">,</span> <span class="n">Adaptee</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">request</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">C++</code>로 구현한 클래스 어댑터<br /><br /></li>
</ul>

<h2 id="5-어댑터-패턴-구현-예제---iterator와-enumeration">5. 어댑터 패턴 구현 예제 - Iterator와 Enumeration</h2>
<ul>
  <li><a href="https://tiboy.tistory.com/481">[자바/java]Iterator 와 Enumeration 쉽게 이해하기 편.</a></li>
</ul>

<h3 id="5-1-enumeration을-iterator로-변환하는-어댑터-클래스">5-1. Enumeration을 Iterator로 변환하는 어댑터 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnumerationIterator</span> <span class="kd">implements</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Enumeration</span><span class="o">&lt;?&gt;</span> <span class="n">enumeration</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">EnumerationIterator</span><span class="o">(</span><span class="nc">Enumeration</span><span class="o">&lt;?&gt;</span> <span class="n">enumeration</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">enumeration</span> <span class="o">=</span> <span class="n">enumeration</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">enumeration</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">enumeration</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="5-2-iterator를-enumeration으로-변환하는-어댑터-클래스">5-2. Iterator를 Enumeration으로 변환하는 어댑터 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IteratorEnumeration</span> <span class="kd">implements</span> <span class="nc">Enumeration</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Iterator</span><span class="o">&lt;?&gt;</span> <span class="n">iterator</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">IteratorEnumeration</span><span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;?&gt;</span> <span class="n">iterator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasMoreElements</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">nextElement</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="5-3-테스트">5-3. 테스트</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

        <span class="nc">IteratorEnumeration</span> <span class="n">iten</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IteratorEnumeration</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iten</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iten</span><span class="o">.</span><span class="na">nextElement</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/adapterPattern1.png" width="500" /></p>
<p><br /><br /></p>

<h2 id="6-퍼사드-패턴facade-pattern">6. 퍼사드 패턴(Facade Pattern)</h2>
<ul>
  <li>서브시스템에 있는 일련의 인터페이스를 통합 인터페이스로 묶어 준다. 또한 고수준 인터페이스도 정의하므로 서브시스템을 더 편리하게 사용할 수 있다.</li>
  <li>퍼사드 패턴을 사용하면 클라이언트와 서브시스템이 긴밀하게 연결되지 않아도 된다.</li>
  <li>퍼사드 패턴을 사용하면 <strong>최소 지식 원칙</strong>을 지킬 수 있다.<br /><br /></li>
</ul>

<h2 id="7-퍼사드-패턴-구현-예제---홈시어터-만들기">7. 퍼사드 패턴 구현 예제 - 홈시어터 만들기</h2>
<ul>
  <li>홈시어터 퍼사드 만들기</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeTheaterFacade</span> <span class="o">{</span>
    <span class="nc">Amplifier</span> <span class="n">amp</span><span class="o">;</span>
    <span class="nc">Tuner</span> <span class="n">tuner</span><span class="o">;</span>
    <span class="nc">StreamingPlayer</span> <span class="n">player</span><span class="o">;</span>
    <span class="nc">Projector</span> <span class="n">projector</span><span class="o">;</span>
    <span class="nc">TheaterLights</span> <span class="n">lights</span><span class="o">;</span>
    <span class="nc">Screen</span> <span class="n">screen</span><span class="o">;</span>
    <span class="nc">PopcornPopper</span> <span class="n">popper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HomeTheaterFacade</span><span class="o">(</span><span class="nc">Amplifier</span> <span class="n">amp</span><span class="o">,</span>
                             <span class="nc">Tuner</span> <span class="n">tuner</span><span class="o">,</span>
                             <span class="nc">StreamingPlayer</span> <span class="n">player</span><span class="o">,</span>
                             <span class="nc">Projector</span> <span class="n">projector</span><span class="o">,</span>
                             <span class="nc">Screen</span> <span class="n">screen</span><span class="o">,</span>
                             <span class="nc">TheaterLights</span> <span class="n">lights</span><span class="o">,</span>
                             <span class="nc">PopcornPopper</span> <span class="n">popper</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">amp</span> <span class="o">=</span> <span class="n">amp</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tuner</span> <span class="o">=</span> <span class="n">tuner</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">player</span> <span class="o">=</span> <span class="n">player</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">projector</span> <span class="o">=</span> <span class="n">projector</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">screen</span> <span class="o">=</span> <span class="n">screen</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lights</span> <span class="o">=</span> <span class="n">lights</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">popper</span> <span class="o">=</span> <span class="n">popper</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">watchMovie</span><span class="o">(</span><span class="nc">String</span> <span class="n">movie</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"영화 볼 준비 중"</span><span class="o">);</span>
        <span class="n">popper</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
        <span class="n">popper</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="n">lights</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="n">screen</span><span class="o">.</span><span class="na">down</span><span class="o">();</span>
        <span class="n">projector</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
        <span class="n">projector</span><span class="o">.</span><span class="na">wideScreenMode</span><span class="o">();</span>
        <span class="n">amp</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
        <span class="n">amp</span><span class="o">.</span><span class="na">setStreamingPlayer</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
        <span class="n">amp</span><span class="o">.</span><span class="na">setSurroundSound</span><span class="o">();</span>
        <span class="n">amp</span><span class="o">.</span><span class="na">setVolume</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">player</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
        <span class="n">player</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">movie</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">endMovie</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"홈시어터 끄는 중"</span><span class="o">);</span>
        <span class="n">popper</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
        <span class="n">lights</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
        <span class="n">screen</span><span class="o">.</span><span class="na">up</span><span class="o">();</span>
        <span class="n">projector</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
        <span class="n">amp</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
        <span class="n">player</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
        <span class="n">player</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeTheaterTestDrive</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">HomeTheaterFacade</span> <span class="n">homeTheater</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HomeTheaterFacade</span><span class="o">(</span><span class="n">amp</span><span class="o">,</span> <span class="n">tuner</span><span class="o">,</span> <span class="n">player</span><span class="o">,</span> <span class="n">projector</span><span class="o">,</span> <span class="n">screen</span><span class="o">,</span> <span class="n">lights</span><span class="o">,</span> <span class="n">popper</span><span class="o">);</span>

        <span class="n">homeTheater</span><span class="o">.</span><span class="na">watchMovie</span><span class="o">(</span><span class="s">"겨울왕국"</span><span class="o">);</span>
        <span class="n">homeTheater</span><span class="o">.</span><span class="na">endMovie</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>동작에 필요한 메서드들을 복잡하게 하나씩 호출할 필요 없이 단순화 시킨 인터페이스 하나만 호출하면 된다.<br /><br /></li>
</ul>

<h2 id="8-최소-지식-원칙">8. 최소 지식 원칙</h2>
<ul>
  <li>디자인 원칙으로 <strong>진짜 절친에게만 이야기해야 한다</strong>는 원칙</li>
  <li>여러 클래스가 얽혀 있어서 시스템의 한 부분을 변경했을 때 다른 부분까지 줄줄이 고쳐야 하는 상황을 미리 방지할 수 있다.</li>
  <li><strong>최소 지식 원칙</strong>대로 하면 자바 표준 입출력인 <code class="language-plaintext highlighter-rouge">System.out.println()</code>과 같은 형태로 쓰면 안 되지만 워낙 보편적으로 사용하니까 그냥 씀</li>
</ul>

<h3 id="8-1-최소-지식-원칙을-잘-따른-예와-아닌-예">8-1. 최소 지식 원칙을 잘 따른 예와 아닌 예</h3>
<ul>
  <li>따르지 않은 예</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">float</span> <span class="nf">getTemp</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Thermometer</span> <span class="n">therm</span> <span class="o">=</span> <span class="n">station</span><span class="o">.</span><span class="na">getThermometer</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">therm</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">station</code>으로부터 객체를 한 번 받은 다음에 그 객체의 메서드를 직접 호출하고 있다.</p>
  </li>
  <li>
    <p>따른 예</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">float</span> <span class="nf">getTemp</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">station</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Thermometer</code>에게 요청을 전달하는 메서드를 <code class="language-plaintext highlighter-rouge">station</code> 클래스에 추가한 뒤 호출해서 의존해야 하는 클래스의 개수를 줄임
<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li>헤드퍼스트 디자인패턴(2022 개정판)</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Design Pattern" /><category term="DesignPattern" /><category term="AdapterPattern" /><category term="FacadePattern" /><category term="study" /><summary type="html"><![CDATA[CHAPTER 07. 어댑터 패턴과 퍼사드 패턴(Adapter &amp; Facade Pattern) 1. 어댑터 패턴 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환한다. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와준다.]]></summary></entry><entry><title type="html">디자인패턴 6) 커맨드 패턴</title><link href="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter06/" rel="alternate" type="text/html" title="디자인패턴 6) 커맨드 패턴" /><published>2022-06-20T00:00:00+09:00</published><updated>2022-06-20T00:00:00+09:00</updated><id>http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter06</id><content type="html" xml:base="http://localhost:4000/design%20pattern/head-first-design-pattern-Chapter06/"><![CDATA[<h1 id="chapter-06-커맨드-패턴command-pattern">CHAPTER 06. 커맨드 패턴(Command Pattern)</h1>
<h2 id="1-커맨드-패턴">1. 커맨드 패턴</h2>
<ul>
  <li>커맨드 패턴은 어떤 것을 요청하는 객체와 그 요청을 받아들이고 처리하는 객체를 분리하는 객체지향 디자인 패턴의 한 모델이다.</li>
  <li>커맨드 패턴을 사용하면 요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화할 수 있다. 이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있다.<br /><br /></li>
</ul>

<h2 id="2-커맨드-패턴을-사용하는-이유">2. 커맨드 패턴을 사용하는 이유</h2>
<ul>
  <li>바뀌는 부분은 캡슐화한다.</li>
  <li>상속보다는 구성을 활용한다.</li>
  <li>구현보다는 인터페이스에 맞춰서 프로그래밍한다.</li>
  <li>상호작용하는 객체 사이에는 가능하면 느슨한 결합을 사용해야 한다.</li>
  <li>클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 한다(OCP).</li>
  <li>추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.</li>
  <li>위 객체지향 원칙들을 지킬 수 있다. <br /><br /></li>
</ul>

<h2 id="3-커맨드-패턴-흐름">3. 커맨드 패턴 흐름</h2>
<ul>
  <li>요청하는 클라이언트가 커맨드 객체 생성
    <ul>
      <li>커맨드 객체는 리시버에 전달할 일련의 행동으로 구성된다.</li>
      <li>커맨드 객체에는 행동과 리시버(Receiver)의 정보가 같이 들어있다.</li>
      <li>커맨드 객체에는 <code class="language-plaintext highlighter-rouge">execute()</code> 메서드 하나만 있는데 여기서 리시버에 있는 특정 행동을 처리하는 메서드를 호출할 수 있다.</li>
    </ul>
  </li>
  <li>클라이언트는 인보커(Invoker) 객체의 <code class="language-plaintext highlighter-rouge">setCommand()</code> 메소드를 호출해서 인보커에 커맨드 객체를 저장</li>
  <li>나중에 클라이언트에서 인보커에게 그 명령을 실행하라고 요청</li>
  <li>인보커에서 아까 받은 커맨드 객체의 <code class="language-plaintext highlighter-rouge">execute()</code> 메서드를 실행해서 리시버에 있는 특정 행동 메서드가 호출되게 한다.<br /><br /></li>
</ul>

<h2 id="4-커맨드-패턴-구현-예제---리모컨-api-만들기">4. 커맨드 패턴 구현 예제 - 리모컨 API 만들기</h2>
<h3 id="4-1-커맨드-인터페이스-구현">4-1. 커맨드 인터페이스 구현</h3>
<ul>
  <li>커맨드 객체는 모두 같은 인터페이스를 구현해야 한다. 그 인터페이스에는 <code class="language-plaintext highlighter-rouge">execute()</code>라는 이름을 가진 메서드 하나만 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="4-2-조명을-켤-때-필요한-커맨드-클래스-구현">4-2. 조명을 켤 때 필요한 커맨드 클래스 구현</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Command</code> 인터페이스를 구현하는 커맨드 클래스를 만든다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOnCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
    <span class="nc">Light</span> <span class="n">light</span><span class="o">;</span>

    <span class="c1">// 생성자에 이 커맨드 객체로 제어할 특정 조명('거실조명', '부엌조명'과 같이 어느 곳에 있는 조명인지)의 정보 전달</span>
    <span class="kd">public</span> <span class="nf">LightOnCommand</span><span class="o">(</span><span class="nc">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// Light 객체에 있는 on() 메서드 호출 </span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">light</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Light</code> 클래스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Light</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"조명이 켜졌습니다."</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">off</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"조명이 꺼졌습니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="4-3-커맨드-객체-사용">4-3. 커맨드 객체 사용</h3>
<ul>
  <li>제어할 기기를 연결할 슬롯과 버튼이 각각 하나씩밖에 없는 리모컨에 커맨드 객체를 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleRemoteControl</span> <span class="o">{</span>
    <span class="nc">Command</span> <span class="n">slot</span><span class="o">;</span> <span class="c1">// 리모컨 버튼과 연결되어 제어할 기기 정보를 담은 슬롯</span>
    <span class="kd">public</span> <span class="nf">SimpleRemoteControl</span><span class="o">()</span> <span class="o">{}</span>

    <span class="c1">// 슬롯으로 제어할 명령을 설정하는 메서드</span>
    <span class="c1">// 리모컨 버튼의 기능을 바꾸고 싶으면 여기에 넣어주는 커맨드 객체를 바꾸면 된다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="nc">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">slot</span> <span class="o">=</span> <span class="n">command</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 버튼이 눌리면 커맨드 객체의 execute() 함수가 실행된다.</span>
    <span class="c1">// execute() 메서드는 연결된 리시버 객체의 행동 메서드를 호출해 동작을 실행한다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buttonWasPressed</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">slot</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// RemoteControlTest: 커맨드 패턴에서의 클라이언트</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteControlTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 인보커 역할</span>
        <span class="c1">// 필요한 작업을 요청할 때 사용할 커맨드 객체를 전달받는다.</span>
        <span class="nc">SimpleRemoteControl</span> <span class="n">remote</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleRemoteControl</span><span class="o">();</span>

        <span class="c1">// 요청을 받아서 처리할 리시버</span>
        <span class="nc">Light</span> <span class="n">light</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Light</span><span class="o">();</span>

        <span class="c1">// 커맨드 객체. 생성시 리시버를 전달해 준다.</span>
        <span class="nc">LightOnCommand</span> <span class="n">lightOn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LightOnCommand</span><span class="o">(</span><span class="n">light</span><span class="o">);</span>

        <span class="n">remote</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">lightOn</span><span class="o">);</span>
        <span class="n">remote</span><span class="o">.</span><span class="na">buttonWasPressed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/commandPattern1.png" width="500" /></p>

<ul>
  <li>테스트 코드를 실행하면 위와 같이 조명을 켜는 <code class="language-plaintext highlighter-rouge">on()</code> 메서드가 실행되는 것을 확인할 수 있다.</li>
</ul>

<h4 id="차고-문-여는-기능-추가">차고 문 여는 기능 추가</h4>
<ul>
  <li>GarageDoor(리시버) 클래스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GarageDoor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차고 문이 열렸습니다."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차고 문이 닫힙니다."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"문열기 중단"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">lightOn</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차고 조명이 켜졌습니다."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">lightOff</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차고 조명이 꺼졌습니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>커맨드 클래스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GarageDoorOpenCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
    <span class="nc">GarageDoor</span> <span class="n">garageDoor</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GarageDoorOpenCommand</span><span class="o">(</span><span class="nc">GarageDoor</span> <span class="n">garageDoor</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">garageDoor</span> <span class="o">=</span> <span class="n">garageDoor</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 차고 문을 여는 커맨드니까 GarageDoor 중에서 up() 메서드를 호출한다.</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">garageDoor</span><span class="o">.</span><span class="na">up</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트 코드 실행</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// RemoteControlTest: 커맨드 패턴에서의 클라이언트</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteControlTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 인보커 역할</span>
        <span class="c1">// 필요한 작업을 요청할 때 사용할 커맨드 객체를 전달받는다.</span>
        <span class="nc">SimpleRemoteControl</span> <span class="n">remote</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleRemoteControl</span><span class="o">();</span>

        <span class="c1">// 요청을 받아서 처리할 리시버</span>
        <span class="nc">Light</span> <span class="n">light</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Light</span><span class="o">();</span>
        <span class="nc">GarageDoor</span> <span class="n">garageDoor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GarageDoor</span><span class="o">();</span>

        <span class="c1">// 커맨드 객체. 생성시 리시버를 전달해 준다.</span>
        <span class="nc">LightOnCommand</span> <span class="n">lightOn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LightOnCommand</span><span class="o">(</span><span class="n">light</span><span class="o">);</span>
        <span class="nc">GarageDoorOpenCommand</span> <span class="n">garageOpen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GarageDoorOpenCommand</span><span class="o">(</span><span class="n">garageDoor</span><span class="o">);</span>

        <span class="n">remote</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">lightOn</span><span class="o">);</span>
        <span class="n">remote</span><span class="o">.</span><span class="na">buttonWasPressed</span><span class="o">();</span>

        <span class="n">remote</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">garageOpen</span><span class="o">);</span>
        <span class="n">remote</span><span class="o">.</span><span class="na">buttonWasPressed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="https://github.com/Developer-book-club/headfirst-design-pattern-2205/raw/main/yujin/commandPattern2.png" width="500" /></p>

<ul>
  <li>리모컨에서는 ‘조명켜기’와 ‘차고 문 열기’와 같은 특정 인터페이스가 구현되어 있다면 그 커맨드 객체에서 실제로 어떤 일을 하는지 몰라도 해당 동작을 실행시킬 수 있다. <br /><br /></li>
</ul>

<h2 id="5-커맨드-패턴의-활용">5. 커맨드 패턴의 활용</h2>
<h3 id="작업-큐">작업 큐</h3>
<ul>
  <li>커맨드로 컴퓨테이션(Computation)의 한 부분(리시버와 일련의 행동)을 패키지로 묶어서 일급 객체 형태로 전달할 수 있다. 그러면 클라이언트 애플리케이션에서 커맨드 객체를 생성한 뒤 오랜 시간이 지나도 그 컴퓨테이션을 호출할 수 있다.(다른 스레드에서도 호출 가능) 이점을 활용해서 커맨드 패턴을 스케줄러나 스레드 풀, 작업 큐와 같은 다양한 작업에 적용할 수 있다.</li>
  <li>작업 큐를 예로 들면, 작업하고자 하는 커맨드들이 큐에서 대기하고 있다. 각 스레드는 큐에서 커맨드를 꺼내 작업을 처리하고 나면 그 커맨드는 버리고 새로운 커맨드를 꺼내서 다음 작업을 처리하면 된다. 커맨드 패턴을 적용하면 <code class="language-plaintext highlighter-rouge">execute()</code>를 호출하는 클라이언트단에서는 해당 작업의 속성(자료형)을 신경쓸 필요가 없기 때문에 작업의 속성에 따라 새로운 스레드 객체를 생성할 필요 없이 그냥 커맨드 객체를 받아서 <code class="language-plaintext highlighter-rouge">execute()</code> 메서드를 호출하기만 하면 된다.</li>
</ul>

<h3 id="애플리케이션-행동-복구">애플리케이션 행동 복구</h3>
<ul>
  <li>커맨드 패턴을 사용해 애플리케이션이 다운되었다가 다시 실행되었을 때 다운 전에 수행하고 있던 작업들을 복구할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">store()</code> 메서드를 사용해 실행 히스토리를 기록하고 애플리케이션이 다운되었다 다시 실행되면 <code class="language-plaintext highlighter-rouge">load()</code> 메서드를 사용해 저장해 뒀던 히스토리대로 <code class="language-plaintext highlighter-rouge">execute()</code> 메서드를 실행한다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li>헤드퍼스트 디자인패턴(2022 개정판)</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Design Pattern" /><category term="DesignPattern" /><category term="CommandPattern" /><category term="study" /><summary type="html"><![CDATA[CHAPTER 06. 커맨드 패턴(Command Pattern) 1. 커맨드 패턴 커맨드 패턴은 어떤 것을 요청하는 객체와 그 요청을 받아들이고 처리하는 객체를 분리하는 객체지향 디자인 패턴의 한 모델이다. 커맨드 패턴을 사용하면 요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화할 수 있다. 이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있다.]]></summary></entry></feed>