<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-03T01:36:51+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부 기록하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-09</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/"><![CDATA[<ul>
  <li>작성일 : 2022.05.03</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>상품 목록페이지를 카테고리별로 상품을 분류해 보여줄 수 있도록 만들었다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 상품 상위 카테고리 이름 가져오기</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>먼저 <code class="language-plaintext highlighter-rouge">DAO</code> 객체를 만드는데 결합도를 낮추기 위해 인터페이스를 만든 다음에 이를 구현하는 클래스를 만들었다.</li>
</ul>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getTopCateName"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 만든 인터페이스를 구현하는 클래스에서 세부 동작을 구현한다.</li>
  <li><code class="language-plaintext highlighter-rouge">SqlSession</code> 생성 테스트는 저번 포스트에서 진행한 결과 성공적이었기 때문에 이를 이용해 DB에 접근하는 동작을 구현한다.</li>
  <li>먼저 상품 목록 페이지의 상단에 출력할 대분류 이름을 테이블에서 가져온다.</li>
</ul>

<h2 id="productmapperxml">ProductMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 상품 상위 카테고리 이름 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getTopCateName"</span> <span class="na">resultType=</span><span class="s">"String"</span><span class="nt">&gt;</span>
        SELECT topcate_name 
        FROM top_category  
        WHERE topcate_num = #{topcate_num}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>매퍼로 이동해서 <code class="language-plaintext highlighter-rouge">SQL</code> 쿼리문을 작성한다.</li>
</ul>

<h2 id="productdaotestjava---실제-구현-전에-dao가-제대로-동작하는-지-테스트">ProductDAOTest.java - 실제 구현 전에 DAO가 제대로 동작하는 지 테스트!</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DAO생성테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"dao : "</span> <span class="o">+</span> <span class="n">dao</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상위카테고리출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트 클래스를 생성해서 아까 만든 <code class="language-plaintext highlighter-rouge">DAO</code>의 동작여부를 테스트한다.</li>
  <li>결과는 성공적!</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="c1">// 상위 카테고리 이름 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>컨트롤러와 DBMS의 결합도를 낮춰줄 서비스 계층을 만든다. 이것 또한 인터페이스를 만든 다음 구현하는 클래스를 만든다.</li>
</ul>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 <code class="language-plaintext highlighter-rouge">DAO</code>에서 만들었던 메서드를 호출해 결과값을 리턴한다.</li>
</ul>

<h2 id="productservicetestjava">ProductServiceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상품상위카테고리이름</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스 또한 테스트를 진행했다. 동작 잘 됨!</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<ul>
  <li>DB에 접근하는 동작의 테스트가 끝났으니까 이제 컨트롤러에서 뷰 페이지로 연결시켜 준다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>


<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 해당 카테고리의 상품 전체 목록 </span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductList</span><span class="o">());</span>
        
        <span class="c1">// 대분류 이름</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        
        <span class="c1">// 소분류 이름 리스트</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>DB에서 가져온 정보를 뷰 페이지에 출력하기 위해 컨트롤러에서 이동 전에 <code class="language-plaintext highlighter-rouge">Model</code> 객체에 저장한다.</li>
  <li>해당 카테고리의 전체 상품을 가져오는 메서드와 소분류 이름 리스트를 가져오는 메서드도 만들었는데 위에서 작성한 것과 같은 과정을 거쳐 만들었기 때문에 생략했다. (글이 너무 길어져서…)</li>
  <li><code class="language-plaintext highlighter-rouge">topcate_num</code> 파라미터값으로 대분류를 불러온 다음 그에 해당하는 소분류와 상품들을 출력할 것이다.</li>
</ul>

<h2 id="productlistjsp">ProductList.jsp</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"categoryBox"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>${topcate }<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"categoryList"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category0"</span> 
            <span class="na">onclick=</span><span class="s">"changeSort(0, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> 전체보기<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"cate"</span><span class="na"> items=</span><span class="s">"</span><span class="si">${</span><span class="n">dcateList</span> <span class="si">}</span><span class="s">"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category${it.index + 1 }"</span>
                <span class="na">onclick=</span><span class="s">"changeSort(${it.index + 1 }, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> ${cate }<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        <span class="nt">&lt;/c:forEach&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>뷰 페이지에서는 <code class="language-plaintext highlighter-rouge">EL</code> 표현식을 사용해 출력한다.</li>
</ul>

<p align="center"><img src="../../assets/images/unomas_prodListAddDb.png" /></p>

<ul>
  <li>그러면 이제 손으로 일일이 타이핑하지 않아도 DB 정보에 맞춰 출력된다! 뿌-듯 😄</li>
  <li>이제 다음에 해야할 것은 헤더에 있는 메뉴에서 상품 목록 페이지를 호출했을 때 각 대분류별로 보여지게 하는 것과 상품 하나를 클릭하면 상세 페이지로 연결되는 것을 구현하는 것이다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-17</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.03 작성자 : 황유진]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 8 - (TDD) Junit4를 사용한 DB 연결 테스트 코드 작성</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-08/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 8 - (TDD) Junit4를 사용한 DB 연결 테스트 코드 작성" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-08</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-08/"><![CDATA[<ul>
  <li>작성일 : 2022.05.02</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>본격적으로 백엔드 작업에 들어가기 앞서 도메인을 생성하고 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 만들어 DB와 연결이 잘 되는지 테스트를 진행했다.</li>
</ul>

<h2 id="pomxml">pom.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.bgee.log4jdbc-log4j2<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.16<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li>요즘 말 많은 <code class="language-plaintext highlighter-rouge">log4j</code>이지만 수업시간에 로그 출력용으로 사용을 해서 우리도 사용할 예정이다. <code class="language-plaintext highlighter-rouge">maven</code>으로 추가해 준다.</li>
</ul>

<h2 id="root-contextxml">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"driverClassName"</span> <span class="na">value=</span><span class="s">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"url"</span> <span class="na">value=</span><span class="s">"jdbc:log4jdbc:mysql://localhost:3306/unomasdb"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"MySQL계정아이디"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"비밀번호"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>
<ul>
  <li>DB 연결시 사용할 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성할 빈을 만든다.</li>
</ul>

<h2 id="datasourcetestjava">DataSourceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataSourceTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">DataSourceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">ds</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DataSource객체확인테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DataSource 객체: "</span> <span class="o">+</span> <span class="n">ds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">src/java/test</code> 경로에 프로젝트를 생성시 기본으로 생성된 패키지와 같은 이름으로 패키지를 만든 뒤 테스트를 진행할 클래스를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">Junit4</code>로 테스트를 진행할 것이라서 <code class="language-plaintext highlighter-rouge">@RunWith(SpringJUnit4ClassRunner.class)</code> 어노테이션을 꼭 달아준다. (안 달면 테스트코드 열심히 작성해도 도로묵~!) 그리고 <code class="language-plaintext highlighter-rouge">@ContextConfiguration</code>로 의존 정보를 읽어올 경로도 지정해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 빈을 만들었으니까 거기로 지정해주면 된다.(손으로 타이핑 할 필요 없이 <code class="language-plaintext highlighter-rouge">file:</code> 까지만 입력하고 컨트롤 엔터 누르면 자동완성된다.)</li>
  <li>
    <p>테스트 진행을 위한 세팅을 마쳤으면 클래스 내부에 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성하고 의존성을 주입해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 객체를 미리 생성해 놨으니까 여기에서는 그걸 가져다 쓰기만 하라는 뜻으로 <code class="language-plaintext highlighter-rouge">@Inject</code> 어노테이션을 붙인다. 만약 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에 해당하는 객체 정보가 없다면 <code class="language-plaintext highlighter-rouge">@Inject</code>를 붙여도 작동하지 않는다.</p>
  </li>
  <li>
    <p>이제 DB 작업을 위한 객체를 생성할 때 스프링 없이 훨씬 레거시 형태로 작업하던 때에 비하면 일일이 <code class="language-plaintext highlighter-rouge">new</code>를 할 필요가 없는 것이 가장 편리한 점이 아닐까! 코드가 훨씬 간결해졌다.</p>
  </li>
  <li>다음으로 테스트를 진행할 메서드를 만든다. 테스트용 메서드 이름은 밖에 보여질 것이 아니라서 보통 알아보기 쉽게 한글로 작성한다고 한다. 메서드 상단에 <code class="language-plaintext highlighter-rouge">@Test</code> 어노테이션을 꼭 붙여주어야 <code class="language-plaintext highlighter-rouge">Junit</code>으로 테스트 진행시 해당 메서드를 호출한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest1.png" width="500" /></p>
<ul>
  <li>여기까지 작성했다면 저장한 뒤 실행하는데 이때 <code class="language-plaintext highlighter-rouge">Junit Test</code> 옵션으로 실행해야 한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest2.png" width="500" /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체에 의존 주입이 잘 되었다면 테스트가 성공했다는 메시지를 볼 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest3.png" width="500" /></p>
<ul>
  <li>만약 실패 메시지가 뜬다면 로그를 잘 읽어보고 원일을 찾아 해결하면 된다.(온통 영어라 좀 긴장되긴 하지만 Caused by~로 시작하는 구문을 읽어보고 본인이 썼던 코드의 흐름을 생각해보면 찾을 수 있다)</li>
</ul>

<h2 id="다시-pomxml">다시 pom.xml</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체가 잘 생성되는 것을 확인했으니까 이제 얘를 사용해서 DB와도 잘 연결되는지 확인해 볼 것이다.</li>
  <li>그 전에 <code class="language-plaintext highlighter-rouge">MyBatis</code>를 사용할 것이라서 <code class="language-plaintext highlighter-rouge">maven</code> 추가를 해 준다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
		
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h2 id="mybatis-configxml">mybatis-config.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>
  
<span class="nt">&lt;configuration&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>의 환경설정 파일도 추가한다.</li>
  <li>DB 매핑 과정에서 축약어로 등록하고 싶은게 있으면 여기서 등록하면 된다.</li>
</ul>

<h2 id="mapper">mapper</h2>

<p align="center"><img src="../../assets/images/junitTest4.png" width="200" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>가 DB와 연결할 때 사용할 쿼리문을 연결시켜줄 파일이 필요하다.</li>
  <li>위의 형태로 폴더와 <code class="language-plaintext highlighter-rouge">xml</code> 파일을 생성한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>일단 파일의 틀만 만들어 놓는다.</li>
</ul>

<h2 id="root-contextxml-1">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSessionFactory"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"configLocation"</span> <span class="na">value=</span><span class="s">"classpath:/mybatis-config.xml"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"mapperLocations"</span> <span class="na">value=</span><span class="s">"classpath:mappers/**/*Mapper.xml"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
	
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSession"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="na">destroy-method=</span><span class="s">"clearCache"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">"sqlSessionFactory"</span> <span class="na">ref=</span><span class="s">"sqlSessionFactory"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
</code></pre></div></div>

<ul>
  <li>빈 생성</li>
  <li>아까 만들었던 <code class="language-plaintext highlighter-rouge">Datasource</code>를 참고해서 생성하도록 한다.</li>
</ul>

<h2 id="mybatistestjava">MyBatisTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">MyBatisTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSessionFactory</span> <span class="n">sqlFactory</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">객체확인</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ sqlSessionFactory: "</span> <span class="o">+</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DB연결</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ session: "</span> <span class="o">+</span> <span class="n">session</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트를 진행할 클래스를 만들어 테스트 코드 작성 후 실행하면 내가 코드를 잘 썼는지 아닌지 알 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest5.png" width="500" /></p>

<ul>
  <li>
    <p>결과는.. 성공!</p>
  </li>
  <li>
    <p>여기까지 완료되었으면 DB 연결을 위한 기본적인 세팅은 다 되었고 앞으로 <code class="language-plaintext highlighter-rouge">VO</code>와 <code class="language-plaintext highlighter-rouge">DAO</code> 객체를 만들어서 데이터베이스 작업을 수행하면 된다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-18</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.02 작성자 : 황유진]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 7 - 쇼핑몰 RDBMS 설계 및 생성</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-07/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 7 - 쇼핑몰 RDBMS 설계 및 생성" /><published>2022-05-01T00:00:00+09:00</published><updated>2022-05-01T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-07</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-07/"><![CDATA[<ul>
  <li>작성일 : 2022.05.01</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>프로젝트의 시작부터 부팀장인 <code class="language-plaintext highlighter-rouge">오성은</code>과 함께 설계해 오던 DB 테이블을 드디어 마무리 하고 생성했다.</li>
  <li>이번주부터 백엔드 작업에 들어갈 것이기 때문에 생성된 DB 테이블이 필요했다.</li>
</ul>

<h2 id="쇼핑몰-db-테이블-1n차-설계와-고난">쇼핑몰 DB 테이블 1~n차 설계와 고난</h2>
<ul>
  <li>
    <p>우리의 프로젝트가 3주차에 접어들며 그동안 3번의 회의가 있었다. 회의가 진행될 때마다 새롭게 추가되는 사항이 생겼기 때문에 매주 회의가 끝나면 설계했던 DB 테이블을 수정할 필요가 있었다. 정기 회의가 아니어도 꽤 큰 규모의 DB 테이블을 설계하는 것이 처음이었기 때문에 꽤 자주 수정했던 것 같다.</p>
  </li>
  <li>
    <p>설계 과정에서 어려웠던 점은 주문 테이블의 설계였다.</p>
    <ul>
      <li>왜냐하면 회원 한 명이 여러 개의 상품을 주문했을 때 그 상품정보들을 어떻게 저장해야 할 지 감이 오지 않았기 때문이다.</li>
      <li>일반적인 프로그래밍 언어를 사용해 상품 목록을 관리하면 배열을 만들어 담으면 되는데 DBMS는 그렇지가 않잖아…? 😟 테이블에서 배열 형태를 어떻게 구현하느냐가 최대 난제였다.</li>
      <li>이를 해결하기 위해 함께 DB를 설계하던 부팀장과 많은 의견을 주고 받았다.</li>
    </ul>
  </li>
</ul>

<h3 id="1차로-채택된-의견">1차로 채택된 의견</h3>
<ul>
  <li>테이블에서 <code class="language-plaintext highlighter-rouge">PK</code>로 사용할 인덱스 번호 컬럼(AI)과 주문코드를 저장할 컬럼을 만든다.</li>
  <li>주문이 생기면 한 주문에서 생성된 모든 상품 정보를 주문 테이블에 저장한다. 만약 회원이 딸기, 바나나, 포도 3가지 상품을 주문했다면 각 상품 정보를 담은 로우를 생성하는 것이다. 그리고 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호는 자동으로 1씩 증가되어 각 로우는 1,2,3이라는 인덱스값을 가지게 될 것이다.</li>
  <li>방금 생성된 주문은 하나의 주문이기 때문에 세 상품들은 같은 주문코드를 참고해야 한다. 각 로우의 주문코드 컬럼에는 같은 주문코드를 넣어준다.</li>
  <li>
    <p>DB에서 주문정보를 조회할 때엔 주문코드 필드값을 이용해 가져온다.</p>
  </li>
  <li>다소 복잡한 느낌이 있지만 이 정도면 논리적이라고 생각했다.</li>
</ul>

<h3 id="2차로-채택된-의견">2차로 채택된 의견</h3>
<ul>
  <li>최종 결정하기 전에 이것이 최선일지 경험자의 의견을 듣고 싶어서 학원에서 데이터베이스 수업을 담당하고 계신 강사님한테 여쭤봤다.</li>
  <li>강사님은 주문코드와 상품번호를 복합키로 사용해라는 의견을 주셨다. 주문코드는 주문내역을 조회할 때 다른 테이블에서 참조되어야 하기 때문에 <code class="language-plaintext highlighter-rouge">PK</code>로 설정되어야 하는데 이것 하나만 <code class="language-plaintext highlighter-rouge">PK</code>로 사용하게 되면 주문코드를 여러 로우에 중복해서 넣을 수 없으니까 상품번호도 함께 <code class="language-plaintext highlighter-rouge">PK</code>를 걸어서 복합키로 사용하라는 것이다. 그리고 주문내역을 조회할 때엔 <code class="language-plaintext highlighter-rouge">where</code>절에 주문코드를 기준으로 <code class="language-plaintext highlighter-rouge">select</code> 하는 것이다.</li>
  <li>오.. 우리가 생각했던 흐름과 비슷하면서도 역할이 비슷한 컬럼의 수를 줄일 수 있는 방법이었다. 그래서 주문코드와 상품번호를 복합키로 지정했다.</li>
  <li>테이블을 생성한 뒤 데이터를 삽입하고 조회해 보니까 의도대로 조회가 잘 된다…!</li>
</ul>

<h2 id="완성된-eer-다이어그램">완성된 EER 다이어그램</h2>

<p align="center"><img src="../../assets/images/unomas-db-table-eer-diagram.png" /></p>

<h2 id="테이블-관계">테이블 관계</h2>
<h3 id="회원-테이블">회원 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_userTable.png" width="700" /></p>

<ul>
  <li>회원의 정보를 저장할 <code class="language-plaintext highlighter-rouge">user</code> 테이블은 회원번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>한 명의 회원은 배송지 목록 테이블을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 주문을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 구매를 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 후기글을 여러 개 가질 수 있다.</li>
  <li>한 명의 회원은 여러 개의 장바구니 번호를 가질 수 있다.</li>
  <li>한 명의 회원은 여러 개의 위시리스트 번호를 가질 수 있다.</li>
</ul>

<h3 id="상품-테이블">상품 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_prodTable.png" width="600" /></p>

<ul>
  <li>상품의 정보를 저장할 <code class="language-plaintext highlighter-rouge">products</code> 테이블은 상품번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>상품 테이블은 여러 주문에 참고될 수 있다.</li>
  <li>상품 테이블은 여러 후기에 참고될 수 있다.</li>
</ul>

<h3 id="상품-카테고리-테이블">상품 카테고리 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_prodCateTable.png" width="400" /></p>

<ul>
  <li>상품 카테고리 테이블은 대분류와 소분류를 저장할 테이블로 나누었다.</li>
  <li>상품 테이블에서는 이를 참조해 사용자 화면에 정렬하여 출력할 것이다.</li>
</ul>

<h3 id="주문-테이블과-결제-테이블">주문 테이블과 결제 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_orderTable.png" width="700" /></p>

<ul>
  <li>주문 정보를 저장할 테이블 <code class="language-plaintext highlighter-rouge">orders</code>는 주문번호와 상품번호를 <code class="language-plaintext highlighter-rouge">PK</code>로 가진다.</li>
  <li>주문을 한 회원정보와 주문된 상품정보를 알아야 하기 때문에 회원번호와 상품번호를 <code class="language-plaintext highlighter-rouge">FK</code>로 가진다.</li>
  <li>주문 테이블은 배송지 주소 정보도 알아야 하기 때문에 회원 한 명의 배송지 정보를 저장할 테이블 <code class="language-plaintext highlighter-rouge">order_addr</code>의 <code class="language-plaintext highlighter-rouge">PK</code>를 <code class="language-plaintext highlighter-rouge">FK</code>로 가진다.</li>
  <li>결제 테이블인 <code class="language-plaintext highlighter-rouge">pay</code>는 위에서 생성된 주문의 결제 정보를 저장한다. 때문에 회원정보와 주문정보를 참조한다.</li>
</ul>

<h3 id="환불과-교환-테이블">환불과 교환 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_refundTable.png" width="700" /></p>

<ul>
  <li>둘 다 원 주문정보가 필요하기 때문에 주문 테이블을 참조한다.</li>
</ul>

<h3 id="배송-테이블">배송 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_deliveriesTable.png" width="700" /></p>

<ul>
  <li>배송에 필요한 회원정보, 주문정보, 배송지 정보를 참조한다.</li>
  <li>배송이 완료되면 해당 데이터는 배송 완료 테이블에도 등록된다.</li>
</ul>

<h3 id="장바구니와-위시리스트-테이블">장바구니와 위시리스트 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_cartTable.png" width="300" /></p>

<ul>
  <li>회원정보와 상품정보를 참조하여 회원 한 명의 장바구니 데이터를 저장한다.</li>
</ul>

<h3 id="리뷰-게시판">리뷰 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_reviewTable.png" width="700" /></p>

<ul>
  <li>상품 하나에 대한 후기 데이터를 저장할 테이블이다.</li>
  <li>회원과 상품 테이블을 참조한다.</li>
</ul>

<h3 id="상품-문의와-그에-대한-댓글-게시판">상품 문의와 그에 대한 댓글 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_prodInquTable.png" width="500" /></p>

<ul>
  <li>상품 하나에 대한 문의 데이터를 저장할 테이블이다.</li>
  <li>회원과 상품 테이블을 참조한다.</li>
  <li>상품 문의에 대해 관리자가 댓글로 답변을 달 것이라서 상품 문의 테이블을 참조하는 댓글 테이블 <code class="language-plaintext highlighter-rouge">prod_comments</code>도 만들었다.</li>
</ul>

<h3 id="관리자-테이블">관리자 테이블</h3>

<p align="center"><img src="../../assets/images/unomas_adminTable.png" width="200" /></p>

<ul>
  <li>관리자의 계정정보를 저장할 테이블이다. 쇼핑몰의 규모가 커지면 관리자가 여러 명 생기게 될 것이라서 따로 만들었다.</li>
</ul>

<h3 id="공지사항-게시판">공지사항 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_boardNoticeTable.png" width="700" /></p>

<ul>
  <li>고객센터에 있는 공지사항 게시판에는 관리자만 글을 쓸 수 있기 때문에 관리자 테이블을 참조한다.</li>
</ul>

<h3 id="자주-묻는-질문-게시판">자주 묻는 질문 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_faqTable.png" width="400" /></p>

<ul>
  <li>자주 묻는 질문 또한 관리자만 작성할 수 있기 때문에 관리자 테이블을 참조한다.</li>
  <li>자주 묻는 질문은 카테고리별로 모아볼 수 있는 기능을 제공하기 위해 전용 카테고리 테이블 <code class="language-plaintext highlighter-rouge">qna_category</code>이 존재한다.</li>
</ul>

<h3 id="11-문의-게시판">1:1 문의 게시판</h3>

<p align="center"><img src="../../assets/images/unomas_qnaTable.png" width="700" /></p>

<ul>
  <li>사용자가 남긴 1:1 문의 데이터를 저장하는 테이블이다.</li>
  <li>여기에도 관리자가 댓글을 답변하는 형태로 구현할 것이라서 전용 댓글 테이블 <code class="language-plaintext highlighter-rouge">qna_comments</code>가 존재한다.</li>
  <li>1:1 문의시 문의 카테고리별 담당자가 모아볼 수 있도록 카테고리 테이블을 참조한다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://litiblue.com/post/mysql-workbench-db/">MySQL Workbench 로 DB 설계하기</a></li>
  <li><a href="https://velog.io/@ash3767/DB-ERD-%EB%AA%A8%EB%8D%B8%EB%A7%81">DB ERD 모델링</a><br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-19</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.01 작성자 : 황유진]]></summary></entry><entry><title type="html">Python) 프로그래머스. 양궁대회</title><link href="http://localhost:4000/programmers/programmers-archery-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. 양궁대회" /><published>2022-05-01T00:00:00+09:00</published><updated>2022-05-01T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-archery-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-archery-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92342">https://programmers.co.kr/learn/courses/30/lessons/92342</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>카카오배 양궁대회가 열렸습니다.</li>
  <li>라이언은 저번 카카오배 양궁대회 우승자이고 이번 대회에도 결승전까지 올라왔습니다. 결승전 상대는 어피치입니다.</li>
  <li>
    <p>카카오배 양궁대회 운영위원회는 한 선수의 연속 우승보다는 다양한 선수들이 양궁대회에서 우승하기를 원합니다. 따라서, 양궁대회 운영위원회는 결승전 규칙을 전 대회 우승자인 라이언에게 불리하게 다음과 같이 정했습니다.</p>
  </li>
  <li>어피치가 화살 n발을 다 쏜 후에 라이언이 화살 n발을 쏩니다.</li>
  <li>점수를 계산합니다.</li>
  <li>
    <p>과녁판은 아래 사진처럼 생겼으며 가장 작은 원의 과녁 점수는 10점이고 가장 큰 원의 바깥쪽은 과녁 점수가 0점입니다.</p>
  </li>
  <li>
    <p>만약, k(k는 1~10사이의 자연수)점을 어피치가 a발을 맞혔고 라이언이 b발을 맞혔을 경우 더 많은 화살을 k점에 맞힌 선수가 k 점을 가져갑니다. 단, a = b일 경우는 어피치가 k점을 가져갑니다. k점을 여러 발 맞혀도 k점 보다 많은 점수를 가져가는 게 아니고 k점만 가져가는 것을 유의하세요. 또한 a = b = 0 인 경우, 즉, 라이언과 어피치 모두 k점에 단 하나의 화살도 맞히지 못한 경우는 어느 누구도 k점을 가져가지 않습니다.</p>
  </li>
  <li>예를 들어, 어피치가 10점을 2발 맞혔고 라이언도 10점을 2발 맞혔을 경우 어피치가 10점을 가져갑니다.</li>
  <li>다른 예로, 어피치가 10점을 0발 맞혔고 라이언이 10점을 2발 맞혔을 경우 라이언이 10점을 가져갑니다.</li>
  <li>모든 과녁 점수에 대하여 각 선수의 최종 점수를 계산합니다.</li>
  <li>최종 점수가 더 높은 선수를 우승자로 결정합니다. 단, 최종 점수가 같을 경우 어피치를 우승자로 결정합니다.</li>
  <li>현재 상황은 어피치가 화살 n발을 다 쏜 후이고 라이언이 화살을 쏠 차례입니다.</li>
  <li>
    <p>라이언은 어피치를 가장 큰 점수 차이로 이기기 위해서 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 구하려고 합니다.</p>
  </li>
  <li>화살의 개수를 담은 자연수 n, 어피치가 맞힌 과녁 점수의 개수를 10점부터 0점까지 순서대로 담은 정수 배열 info가 매개변수로 주어집니다. 이때, 라이언이 가장 큰 점수 차이로 우승하기 위해 n발의 화살을 어떤 과녁 점수에 맞혀야 하는지를 10점부터 0점까지 순서대로 정수 배열에 담아 return 하도록 solution 함수를 완성해 주세요. 만약, 라이언이 우승할 수 없는 경우(무조건 지거나 비기는 경우)는 [-1]을 return 해주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>1 ≤ n ≤ 10</li>
  <li>info의 길이 = 11
    <ul>
      <li>0 ≤ info의 원소 ≤ n</li>
      <li>info의 원소 총합 = n</li>
      <li>info의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)</li>
    </ul>
  </li>
  <li>라이언이 우승할 방법이 있는 경우, return 할 정수 배열의 길이는 11입니다.
    <ul>
      <li>0 ≤ return할 정수 배열의 원소 ≤ n</li>
      <li>return할 정수 배열의 원소 총합 = n (꼭 n발을 다 쏴야 합니다.)</li>
      <li>return할 정수 배열의 i번째 원소는 과녁의 10 - i 점을 맞힌 화살 개수입니다. ( i는 0~10 사이의 정수입니다.)</li>
      <li>라이언이 가장 큰 점수 차이로 우승할 수 있는 방법이 여러 가지 일 경우, 가장 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.
        <ul>
          <li>가장 낮은 점수를 맞힌 개수가 같을 경우 계속해서 그다음으로 낮은 점수를 더 많이 맞힌 경우를 return 해주세요.</li>
          <li>예를 들어, [2,3,1,0,0,0,0,1,3,0,0]과 [2,1,0,2,0,0,0,2,3,0,0]를 비교하면 [2,1,0,2,0,0,0,2,3,0,0]를 return 해야 합니다.</li>
          <li>다른 예로, [0,0,2,3,4,1,0,0,0,0,0]과 [9,0,0,0,0,0,0,0,1,0,0]를 비교하면[9,0,0,0,0,0,0,0,1,0,0]를 return 해야 합니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>라이언이 우승할 방법이 없는 경우, return 할 정수 배열의 길이는 1입니다.
    <ul>
      <li>라이언이 어떻게 화살을 쏘든 라이언의 점수가 어피치의 점수보다 낮거나 같으면 [-1]을 return 해야 합니다.<br /><br /><br /></li>
    </ul>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<h2 id="1차-시도">1차 시도</h2>
<ul>
  <li>완전탐색하면 되는 문제같아서 10점부터 차례대로 하나씩 라이언이 맞히지 못했다고 가정하고 경우의 수를 탐색했는데 모든 경우를 고려하는 코드가 아니었던 것인지 60점 조금 안 되는 점수를 받았다.(예제는 다 맞았음 ㅠㅠ)</li>
</ul>

<script src="https://gist.github.com/miro7923/322183682e7f75709a0acff026e6b8a1.js"></script>

<h2 id="2차-시도">2차 시도</h2>
<ul>
  <li>그래서 구글링을 하여 정답 코드를 참고해 풀었다.</li>
  <li><a href="https://velog.io/@hygge/Python-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C-2022-KAKAO-BLIND-RECRUITMENT-BFS">[Python] 프로그래머스 양궁대회 (BFS)</a><br /><br /></li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/db80617186ced5c788e567a2b15970f1.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="DFS" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92342]]></summary></entry><entry><title type="html">MySQL Workbench에서 EER Diagram model &amp;amp; SQL Script import Guide</title><link href="http://localhost:4000/uno%20mas/db-import-guide/" rel="alternate" type="text/html" title="MySQL Workbench에서 EER Diagram model &amp;amp; SQL Script import Guide" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/db-import-guide</id><content type="html" xml:base="http://localhost:4000/uno%20mas/db-import-guide/"><![CDATA[<ul>
  <li><code class="language-plaintext highlighter-rouge">MySQL Workbench</code>에 내장되어 있는 <code class="language-plaintext highlighter-rouge">EER</code> 다이어그램 제작툴의 사용법과 <code class="language-plaintext highlighter-rouge">SQL</code> 스크립트를 불러와서 테이블 생성하는 법 가이드<br /><br /></li>
</ul>

<h1 id="eer-다이어그램-모델-불러오기">EER 다이어그램 모델 불러오기</h1>
<ol>
  <li><code class="language-plaintext highlighter-rouge">master</code> 브랜치를 <code class="language-plaintext highlighter-rouge">pull</code>한다.</li>
  <li><code class="language-plaintext highlighter-rouge">MySQL Workbench</code> 실행</li>
</ol>

<p align="center"><img src="../../assets/images/workbenchEer1.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>빨간 박스 선택</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer2.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">+</code> 눌러서 모델 추가함</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer3.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>이런 창이 나올 것임. 여기에서 <code class="language-plaintext highlighter-rouge">File</code> 메뉴 클릭</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer4.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Open Model</code> 클릭</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer5.png" width="600" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/Uno-Mas/unomasdb/unomasTable.mwb</code> 경로에 있는 파일 선택하고 <code class="language-plaintext highlighter-rouge">Open</code></li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer6.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>그럼 만들어진 다이어그램 모델 확인 가능!<br /><br /></li>
</ul>

<h1 id="다이어그램-세부사항-확인">다이어그램 세부사항 확인</h1>

<p align="center"><img src="../../assets/images/workbenchEer7.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>테이블 사이 관계선 위에 마우스오버하면 외래키로 연결된 컬럼을 표시해 준다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer8.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>테이블 이름이 있는 영역에 마우스오버하면 이 테이블과 관계를 맺고 있는 테이블들을 표시해준다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer9.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>테이블명을 더블클릭하면 세부사항을 확인할 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer10.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>각 테이블별로 설명도 써 놨으니까 참고하거나 본인이 더 필요하다고 생각되는 메모가 있으면 추가할 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer11.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>컬럼을 클릭하면 주석문 확인이 가능하다. 존재가 이해 안 되는 컬럼은 여기를 참고하고 본인이 필요하면 아래에 주석문 추가 가능</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer17.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>카테고리와 같은 일부 컬럼은 <code class="language-plaintext highlighter-rouge">Trigger</code>에 제약조건을 걸어놨음. 관련해서 작업하는 사람들은 참고<br /><br /></li>
</ul>

<h1 id="공유받은-sql-script로-테이블-생성하기">공유받은 SQL Script로 테이블 생성하기</h1>

<p align="center"><img src="../../assets/images/workbenchEer12.png" width="600" /></p>
<p>￼</p>

<ul>
  <li>스키마 생성한 후 사진상 메뉴로 들어감</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer13.png" width="800" /></p>
<p>￼</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/Uno-Mas/unomasdb/unomasDbTable.sql</code> 경로에 있는 파일 선택</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer14.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>전체실행 버튼 눌러서 실행하면 테이블 생성됨.</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer15.png" width="800" /></p>
<p>￼</p>

<ul>
  <li>하단 로그창에 성공적으로 생성됐다는 메시지 뜨면 다 생성된 것임. 안 보이면 테이블 목록 새로고침하면 보일 것임</li>
</ul>

<p align="center"><img src="../../assets/images/workbenchEer16.png" width="200" /></p>
<p>￼</p>

<p><br /><br /><br /></p>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://litiblue.com/post/mysql-workbench-db/">MySQL Workbench 로 DB 설계하기</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="MySQLWorkbench" /><category term="Log" /><summary type="html"><![CDATA[MySQL Workbench에 내장되어 있는 EER 다이어그램 제작툴의 사용법과 SQL 스크립트를 불러와서 테이블 생성하는 법 가이드]]></summary></entry><entry><title type="html">Python) 프로그래머스. 주차 요금 계산</title><link href="http://localhost:4000/programmers/programmers-parking-fee-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. 주차 요금 계산" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-parking-fee-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-parking-fee-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92341">https://programmers.co.kr/learn/courses/30/lessons/92341</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>주차장의 요금표와 차량이 들어오고(입차) 나간(출차) 기록이 주어졌을 때, 차량별로 주차 요금을 계산하려고 합니다.</p>
  </li>
  <li>어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주합니다.</li>
  <li>00:00부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산합니다.</li>
  <li>누적 주차 시간이 기본 시간이하라면, 기본 요금을 청구합니다.</li>
  <li>누적 주차 시간이 기본 시간을 초과하면, 기본 요금에 더해서, 초과한 시간에 대해서 단위 시간 마다 단위 요금을 청구합니다.
    <ul>
      <li>초과한 시간이 단위 시간으로 나누어 떨어지지 않으면, 올림합니다.</li>
      <li>⌈a⌉ : a보다 작지 않은 최소의 정수를 의미합니다. 즉, 올림을 의미합니다.</li>
    </ul>
  </li>
  <li>주차 요금을 나타내는 정수 배열 fees, 자동차의 입/출차 내역을 나타내는 문자열 배열 records가 매개변수로 주어집니다. 차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 return 하도록 solution 함수를 완성해주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>
    <p>fees의 길이 = 4</p>
  </li>
  <li>fees[0] = 기본 시간(분)
    <ul>
      <li>1 ≤ fees[0] ≤ 1,439</li>
      <li>fees[1] = 기본 요금(원)</li>
      <li>0 ≤ fees[1] ≤ 100,000</li>
      <li>fees[2] = 단위 시간(분)</li>
      <li>1 ≤ fees[2] ≤ 1,439</li>
      <li>fees[3] = 단위 요금(원)</li>
      <li>1 ≤ fees[3] ≤ 10,000</li>
    </ul>
  </li>
  <li>1 ≤ records의 길이 ≤ 1,000
    <ul>
      <li>records의 각 원소는 “시각 차량번호 내역” 형식의 문자열입니다.</li>
      <li>시각, 차량번호, 내역은 하나의 공백으로 구분되어 있습니다.</li>
      <li>시각은 차량이 입차되거나 출차된 시각을 나타내며, HH:MM 형식의 길이 5인 문자열입니다.</li>
      <li>HH:MM은 00:00부터 23:59까지 주어집니다.</li>
      <li>잘못된 시각(“25:22”, “09:65” 등)은 입력으로 주어지지 않습니다.</li>
      <li>차량번호는 자동차를 구분하기 위한, `0’~’9’로 구성된 길이 4인 문자열입니다.</li>
      <li>내역은 길이 2 또는 3인 문자열로, IN 또는 OUT입니다. IN은 입차를, OUT은 출차를 의미합니다.</li>
      <li>records의 원소들은 시각을 기준으로 오름차순으로 정렬되어 주어집니다.</li>
      <li>records는 하루 동안의 입/출차된 기록만 담고 있으며, 입차된 차량이 다음날 출차되는 경우는 입력으로 주어지지 않습니다.</li>
      <li>같은 시각에, 같은 차량번호의 내역이 2번 이상 나타내지 않습니다.</li>
      <li>마지막 시각(23:59)에 입차되는 경우는 입력으로 주어지지 않습니다.</li>
      <li>아래의 예를 포함하여, 잘못된 입력은 주어지지 않습니다.
        <ul>
          <li>주차장에 없는 차량이 출차되는 경우</li>
          <li>주차장에 이미 있는 차량(차량번호가 같은 차량)이 다시 입차되는 경우<br /><br /><br /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>간단하게 생각하고 접근했는데 파이썬 자료형에 익숙치 않고 예외 처리를 제대로 해주지 않아서 생각보다 시간이 걸렸다. 파이참 없었으면 못 풀었겠는걸…ㅎ</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">cars = {차량번호 : [누적시간, 입차시간]}</code> 딕셔너리를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">records</code> 배열을 순회하며 현재 시간을 분 단위로 환산한다.</li>
  <li>딕셔너리에 차량번호가 key로 없으면 새로 만든다. <code class="language-plaintext highlighter-rouge">value</code>는 <code class="language-plaintext highlighter-rouge">[0, 분으로 환산한 입차시간]</code><br />
 3-1. key가 있고 <code class="language-plaintext highlighter-rouge">IN</code>이라면 입차시간만 현재시간으로 바꿔준다.<br />
 3-2. key가 있고 <code class="language-plaintext highlighter-rouge">OUT</code>이라면 <code class="language-plaintext highlighter-rouge">2에서 구한 시간 - key에 저장된 입차시간</code>을 누적시간에 더해준다. 이때 출차했다는 표시로 입차시간을 -1로 바꾼다.</li>
  <li>차량번호 오름차순으로 저장할 최소힙을 만든다. <code class="language-plaintext highlighter-rouge">heap = [차량번호, 누적시간]</code> 차량번호 기준으로 정렬할 수 있게 차량번호를 앞에 위치시킨다.</li>
  <li><code class="language-plaintext highlighter-rouge">cars</code>를 순회하며 출차하지 않은 차가 있으면 마감시간인 <code class="language-plaintext highlighter-rouge">23:59</code>까지의 누적시간을 구해서 더해준다.<br />
 5-1. 모든 차량의 번호와 누적시간을 4에서 만든 최소힙에 저장한다.</li>
  <li>최소힙이 빌 때까지 하나씩 <code class="language-plaintext highlighter-rouge">pop</code> 해서 요금을 계산한 뒤 정답배열에 저장한다.<br /><br /></li>
</ol>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/e8665a951cb4ebb1c405b87b4590ada0.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="Math" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92341]]></summary></entry><entry><title type="html">Python) 프로그래머스. k진수에서 소수 개수 구하기</title><link href="http://localhost:4000/programmers/programmers-get-prime-num-in-kNum-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. k진수에서 소수 개수 구하기" /><published>2022-04-29T00:00:00+09:00</published><updated>2022-04-29T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-get-prime-num-in-kNum-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-get-prime-num-in-kNum-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92335">https://programmers.co.kr/learn/courses/30/lessons/92335</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>양의 정수 n이 주어집니다. 이 숫자를 k진수로 바꿨을 때, 변환된 수 안에 아래 조건에 맞는 소수(Prime number)가 몇 개인지 알아보려 합니다.</p>
  </li>
  <li>0P0처럼 소수 양쪽에 0이 있는 경우</li>
  <li>P0처럼 소수 오른쪽에만 0이 있고 왼쪽에는 아무것도 없는 경우</li>
  <li>0P처럼 소수 왼쪽에만 0이 있고 오른쪽에는 아무것도 없는 경우</li>
  <li>P처럼 소수 양쪽에 아무것도 없는 경우</li>
  <li>단, P는 각 자릿수에 0을 포함하지 않는 소수입니다.</li>
  <li>예를 들어, 101은 P가 될 수 없습니다.</li>
  <li>
    <p>예를 들어, 437674을 3진수로 바꾸면 211020101011입니다. 여기서 찾을 수 있는 조건에 맞는 소수는 왼쪽부터 순서대로 211, 2, 11이 있으며, 총 3개입니다. (211, 2, 11을 k진법으로 보았을 때가 아닌, 10진법으로 보았을 때 소수여야 한다는 점에 주의합니다.) 211은 P0 형태에서 찾을 수 있으며, 2는 0P0에서, 11은 0P에서 찾을 수 있습니다.</p>
  </li>
  <li>정수 n과 k가 매개변수로 주어집니다. n을 k진수로 바꿨을 때, 변환된 수 안에서 찾을 수 있는 위 조건에 맞는 소수의 개수를 return 하도록 solution 함수를 완성해 주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>1 ≤ n ≤ 1,000,000</li>
  <li>3 ≤ k ≤ 10<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>오랜만에 큰 고민 없이 푼 문제… 다음과 같은 과정을 거쳐서 풀었다.
    <ol>
      <li>n을 k진수로 변환한다. 이때 string으로 변환</li>
      <li>변환된 k진수를 ‘0’을 기준으로 split한다. 이 과정에서 ‘’ 빈 문자열이 생길 수 있다.</li>
      <li>소수 판별 메서드를 만든다.</li>
      <li>2에서 얻은 배열을 순회하면서 소수인지 아닌지 판단해서 카운트를 증가시킨다. 2에서 생길 수 있는 빈 문자열에 대한 예외처리를 해 주어야 함!!<br /><br /></li>
    </ol>
  </li>
</ul>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/195a26379567836d730288d5e782ef38.js"></script>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="Math" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92335]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 6 - 주문페이지와 주문완료페이지 제작</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-06/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 6 - 주문페이지와 주문완료페이지 제작" /><published>2022-04-28T00:00:00+09:00</published><updated>2022-04-28T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-06</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-06/"><![CDATA[<ul>
  <li>작성일 : 2022.04.28</li>
  <li>작성자 : 황유진</li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황-1---주문-페이지-frontend">진행상황 1 - 주문 페이지 frontend</h1>
<h2 id="orderjsp">order.jsp</h2>
<ul>
  <li>쇼핑몰에서 사용자가 상품을 주문할 때 보여주는 페이지를 만들었다.</li>
  <li>그동안 인터넷 쇼핑몰로 상품 주문은 참 많이 했지만 막상 만들려 하니 좀 막막해서 네이버 쇼핑의 주문 페이지를 참고해서 만들었다.</li>
</ul>

<h3 id="전체-레이아웃">전체 레이아웃</h3>

<p align="center"><img src="../../assets/images/orderPage.png" width="800" /></p>

<p align="center"><img src="../../assets/images/orderPageCodeSummary.png" width="800" /></p>

<ul>
  <li>베이스로 사용하는 템플릿의 레이아웃이 부트스트랩으로 잡혀 있기 때문에 나도 부트스트랩으로 레이아웃을 설계하고 디자인을 구현했다.</li>
  <li>지금까지 부트스트랩을 써 본 적이 없어서 이번 프로젝트를 시작할 때에만 해도 부트스트랩에 대해 아는 것이 없었는데, 이번 프로젝트를 시작하고 여러 뷰 페이지들을 제작하면서 부트스트랩의 편리함을 깨닫고 점점 빠져들고 있다. 왜 그렇게 명성이 높은지 알겠다…! 맘처럼 되지 않는 css를 붙잡고 늘어지지 않아도, 부트스트랩의 클래스 선택자 하나면 손쉽게 화면 레이아웃을 구상할 수 있었다. 세세한 부분에서는 개별 css 조절이 필요하지만 전체적인 화면 구성의 틀을 잡을 때엔 부트스트랩이 정말 편리했다.</li>
</ul>

<h3 id="배송지-정보-입력받는-부분">배송지 정보 입력받는 부분</h3>

<p align="center"><img src="../../assets/images/orderPage_delivery1.png" width="600" /><img src="../../assets/images/orderPage_delivery2.png" width="600" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JavaScript</code>를 이용해 선택한 라디오 버튼에 따라 배송지 입력란을 다르게 출력하도록 했다.</li>
  <li>네이버 쇼핑 주문페이지의 배송지 정보 입력란을 참고해서 만들었다.</li>
</ul>

<h3 id="orderjs">order.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#normalAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#newAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
    
    <span class="p">...</span>
    
    <span class="c1">// 기본배송지와 신규배송지 바꿔서 출력하는 메서드</span>
    <span class="nx">toggleAddrBox</span><span class="p">();</span>
    
    <span class="p">...</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nx">toggleAddrBox</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">input:radio[name=deliverSpot]</span><span class="dl">'</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#normalAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#newAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#normalAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#newAddr</span><span class="dl">'</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span> 
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>배송지 선택 라디오 버튼 아래 부분을 <code class="language-plaintext highlighter-rouge">div</code>태그로 감싼 다음에 <code class="language-plaintext highlighter-rouge">id</code> 선택자를 지정해 그것으로 제어한다.</li>
  <li>배송지 입력란 외 다른 부분들도 같은 로직이 적용되는 부분이 많아서 이후 다른 라디오 버튼 선택란들도 모두 이와 같은 형태의 메서드를 작성해서 사용했다.</li>
  <li>신규배송지 입력시 주소를 입력하는 부분은 <code class="language-plaintext highlighter-rouge">다음 우편번호 API</code>를 사용했다. 저번 프로젝트에 이어 두 번째로 사용해 보니까 저번보다 훨씬 쉽게 커스터마이징 해 적용할 수 있었다.</li>
</ul>

<h3 id="적립금-사용-부분">적립금 사용 부분</h3>

<p align="center"><img src="../../assets/images/orderPage_usePoint1.png" width="600" /></p>
<p align="center"><img src="../../assets/images/orderPage_usePoint2.png" width="600" /></p>

<ul>
  <li>우리의 쇼핑몰 프로젝트에서는 적립금 제도를 운영할 것이기 때문에 적립금 사용란을 만들었다.</li>
  <li>전액사용 버튼을 누르거나 항상 전액 사용에 체크하면 보유한 적립금 전액을 사용할 수 있다.</li>
  <li>이것 또한 <code class="language-plaintext highlighter-rouge">JavaScript</code>로 제어한다.</li>
</ul>

<h3 id="orderjs-1">order.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useAllPoints</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">curPoint</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#curPoint</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#usingPoint</span><span class="dl">'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">,</span> <span class="nx">curPoint</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">toggleUseAllPoints</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">input:checkbox[name=useAllCheckBox]</span><span class="dl">'</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="dl">'</span><span class="s1">:checked</span><span class="dl">'</span><span class="p">)</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">useAllPoints</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>두 가지 메서드를 만들어서 <code class="language-plaintext highlighter-rouge">전액사용</code> 버튼에는 <code class="language-plaintext highlighter-rouge">onclick</code> 이벤트시 <code class="language-plaintext highlighter-rouge">useAllPoints()</code>가 호출되도록 했고</li>
  <li><code class="language-plaintext highlighter-rouge">항상 전액 사용</code>에 체크시에는 <code class="language-plaintext highlighter-rouge">jQuery</code>로 변경을 감지해 이벤트 메서드가 호출되도록 했다.</li>
  <li><strong>백엔드 작업시에는 회원 정보 테이블에 적립금을 전액 사용한다는 상태를 저장할 컬럼이 추가되어야 하고 관련 파라미터 또한 함께 보내야 할 것이다.</strong></li>
</ul>

<h3 id="하단-페이지-버튼">하단 페이지 버튼</h3>

<p align="center"><img src="../../assets/images/orderPage_pay1.png" width="500" /></p>

<ul>
  <li>결제 수단으로는 신용카드와 계좌이체 두 가지만 만들었다.</li>
</ul>

<p align="center"><img src="../../assets/images/orderPage_pay2.png" width="500" /></p>

<ul>
  <li>그런데 지금 생각해 보니 계좌이체가 아니라 무통장 입금으로 하는 것이 더 맞았던 것 같기도 하다. 우리 프로젝트가 상업적인 목적으로 진행하는 것은 아니기 때문에 시험용 결제 모듈 한 가지만 써 보게 될 것 같은데 그것으로는 신용카드 결제 모듈을 생각하고 있었기 때문이다. 이 버전을 이미 마스터 브랜치로 머지를 해 버려서 다음 백엔드 개발을 진행할 때 함께 수정 해야겠다.</li>
</ul>

<p align="center"><img src="../../assets/images/orderPage_pay3.png" width="500" /></p>

<ul>
  <li>현금 결제시에는 현금영수증을 신청할 수 있도록 만들었다. 이것의 출력 또한 <code class="language-plaintext highlighter-rouge">JavaScript</code>로 제어했다.</li>
  <li>메서드의 로직은 위에서 썼던 배송지 선택 부분과 동일하기 때문에 생략한다.</li>
  <li><strong>이 부분을 작업하며 회원정보 테이블에 현금영수증 신청정보 저장 컬럼도 추가되어야 함을 깨달았다.</strong></li>
</ul>

<h3 id="주문-상품-목록-출력-부분">주문 상품 목록 출력 부분</h3>

<p align="center"><img src="../../assets/images/orderPage_cartList.png" width="500" /></p>

<ul>
  <li>여기는 반복문으로 주문 페이지로 넘어온 상품 리스트의 개수만큼 출력하도록 했다. 지금은 단순 출력 테스트용으로 더미 데이터를 넣어 놓았지만 벡앤드 작업을 진행하게 되면 실제 상품명을 출력하고, 2개 이상 주문한 상품은 여러 번 출력되지 않고 수량이 하나 더 추가되는 방식으로 출력되게 할 것이다.</li>
  <li>가격 텍스트를 정수형 그대로 출력하면 가독성이 떨어져서 <code class="language-plaintext highlighter-rouge">JavaScript</code>로 세 자리마다 콤마를 찍도록 했다.</li>
</ul>

<h3 id="orderjs-2">order.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// jQuery로 화면 로드시 호출</span>
<span class="kd">function</span> <span class="nx">convertCurrency</span><span class="p">(</span><span class="nx">cnt</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">cnt</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">#prodPrice</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">price</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">id</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
    
        <span class="nx">$</span><span class="p">(</span><span class="nx">id</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">price</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\B(?=(\d{3})</span><span class="sr">+</span><span class="se">(?!\d))</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">));</span>
    <span class="p">}</span>
    
    <span class="kd">var</span> <span class="nx">deliveryFee</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#deliveryFee</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#deliveryFee</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">deliveryFee</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\B(?=(\d{3})</span><span class="sr">+</span><span class="se">(?!\d))</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">));</span>
    
    <span class="kd">var</span> <span class="nx">totalPrice</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#totalPrice</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#totalPrice</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">totalPrice</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\B(?=(\d{3})</span><span class="sr">+</span><span class="se">(?!\d))</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">));</span>
    
    <span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#point</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#point</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">point</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\B(?=(\d{3})</span><span class="sr">+</span><span class="se">(?!\d))</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HTML</code>페이지에서 가격 콤마를 찍는 방법과 관련해서 구글링하니까 많이 볼 수 있었던 정규식을 사용하는 코드로 구현했다. 주문할 상품의 목록 길이를 매개변수로 받아서 상품들의 가격에 콤마를 찍도록 했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"order-table"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li&gt;</span>상품 <span class="nt">&lt;span&gt;</span>상품금액<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
    <span class="c">&lt;!-- @@ 장바구니 목록 배열 사이즈만큼 출력하기 @@ --&gt;</span>
    <span class="c">&lt;!-- @@ 장바구니 목록 로드시 model에 배열 길이 정보 저장해서 자바스크립트에서 읽어오기 @@ --&gt;</span>
    <span class="nt">&lt;%</span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="nt">%&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"fw-normal"</span><span class="nt">&gt;</span>Combination x 1 <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"prodPrice</span><span class="nt">&lt;%=</span><span class="n">i</span> <span class="nt">%&gt;</span><span class="s">"</span><span class="nt">&gt;&lt;%=</span><span class="n">prodPrice</span> <span class="nt">%&gt;</span>원<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;%</span> <span class="n">total</span> <span class="o">+=</span> <span class="n">prodPrice</span><span class="o">;</span> <span class="o">}</span> <span class="nt">%&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"total-price"</span><span class="nt">&gt;</span>배송비 <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"deliveryFee"</span><span class="nt">&gt;&lt;%=</span><span class="n">deliveryFee</span> <span class="nt">%&gt;</span>원<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"total-price"</span><span class="nt">&gt;</span>합계 <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"totalPrice"</span><span class="nt">&gt;&lt;%=</span><span class="n">total</span> <span class="o">+</span> <span class="n">deliveryFee</span> <span class="nt">%&gt;</span>원<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"total-price"</span><span class="nt">&gt;</span>적립혜택 <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"point"</span><span class="nt">&gt;&lt;%=</span><span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">total</span> <span class="o">*</span> <span class="mf">0.05</span><span class="o">)</span> <span class="nt">%&gt;</span>원<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSP</code> 페이지에서 상품 목록의 <code class="language-plaintext highlighter-rouge">id</code> 지정은 이렇게 해 주었다. 내가 생각했을 때 최선인 방법은 이것인 거 같아서 이렇게 짰는데 더 효율적인 방법이 있을까? 로직을 짜는 내내 더 고민해 볼 필요가 있다는 생각을 했다.<br /><br /></li>
</ul>

<h1 id="진행상황-2---결제-완료-페이지">진행상황 2 - 결제 완료 페이지</h1>

<p align="center"><img src="../../assets/images/orderCompletePage.png" width="800" /></p>

<ul>
  <li>결제 완료 페이지는 최대한 심플하게 구성하고자 했다. 화면을 구성하면서 참고자료 구글링을 해 보니 대체로 간단하게 구성하는 추세였기 때문이다.</li>
</ul>

<p align="center"><img src="../../assets/images/orderCompletePage2.png" width="800" /></p>

<ul>
  <li>페이지 하단에는 배송지 정보와 주문/결제 정보를 표시하도록 했다. 그리고 홈으로 가는 버튼과 마이페이지로 가는 버튼을 만들어 두었다.<br /><br /></li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://loomio.tistory.com/28#a-2">라디오 버튼 눌렀을 때 변경 감지해서 다르게 출력</a></li>
  <li><a href="https://m.blog.naver.com/ath87/220364319713">css class 선택자 적용 순서</a>
    <ul>
      <li>이번 페이지들을 제작하며 <code class="language-plaintext highlighter-rouge">class</code> 선택자의 중첩 사용과 <code class="language-plaintext highlighter-rouge">css</code>의 적용 순서에 대해 잘 알게 되었다.</li>
    </ul>
  </li>
  <li><a href="https://imivory.tistory.com/m/entry/tip-%EA%B0%80%EA%B2%A9%EC%88%AB%EC%9E%90-3%EC%9E%90%EB%A6%AC-%EC%B2%9C%EB%8B%A8%EC%9C%84%EC%97%90-%EC%9E%90%EB%8F%99-%EC%BD%A4%EB%A7%88-input-or-div-%EB%84%A3%EA%B8%B0">[tip] 가격(숫자 3자리, 천단위)에 자동 콤마 (input or div) 넣기</a><br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-22</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.04.28 작성자 : 황유진 팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진 GitHub Repository : https://github.com/miro7923/Uno-Mas]]></summary></entry><entry><title type="html">Python) 프로그래머스. 신고 결과 받기</title><link href="http://localhost:4000/programmers/programmers-report-result-py/" rel="alternate" type="text/html" title="Python) 프로그래머스. 신고 결과 받기" /><published>2022-04-28T00:00:00+09:00</published><updated>2022-04-28T00:00:00+09:00</updated><id>http://localhost:4000/programmers/programmers-report-result-py</id><content type="html" xml:base="http://localhost:4000/programmers/programmers-report-result-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://programmers.co.kr/learn/courses/30/lessons/92334">https://programmers.co.kr/learn/courses/30/lessons/92334</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>신입사원 무지는 게시판 불량 이용자를 신고하고 처리 결과를 메일로 발송하는 시스템을 개발하려 합니다. 무지가 개발하려는 시스템은 다음과 같습니다.</p>
  </li>
  <li>각 유저는 한 번에 한 명의 유저를 신고할 수 있습니다.</li>
  <li>신고 횟수에 제한은 없습니다. 서로 다른 유저를 계속해서 신고할 수 있습니다.</li>
  <li>한 유저를 여러 번 신고할 수도 있지만, 동일한 유저에 대한 신고 횟수는 1회로 처리됩니다.</li>
  <li>k번 이상 신고된 유저는 게시판 이용이 정지되며, 해당 유저를 신고한 모든 유저에게 정지 사실을 메일로 발송합니다.</li>
  <li>
    <p>유저가 신고한 모든 내용을 취합하여 마지막에 한꺼번에 게시판 이용 정지를 시키면서 정지 메일을 발송합니다.</p>
  </li>
  <li>이용자의 ID가 담긴 문자열 배열 id_list, 각 이용자가 신고한 이용자의 ID 정보가 담긴 문자열 배열 report, 정지 기준이 되는 신고 횟수 k가 매개변수로 주어질 때, 각 유저별로 처리 결과 메일을 받은 횟수를 배열에 담아 return 하도록 solution 함수를 완성해주세요.<br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>2 ≤ id_list의 길이 ≤ 1,000
    <ul>
      <li>1 ≤ id_list의 원소 길이 ≤ 10</li>
      <li>id_list의 원소는 이용자의 id를 나타내는 문자열이며 알파벳 소문자로만 이루어져 있습니다.</li>
      <li>id_list에는 같은 아이디가 중복해서 들어있지 않습니다.</li>
    </ul>
  </li>
  <li>1 ≤ report의 길이 ≤ 200,000
    <ul>
      <li>3 ≤ report의 원소 길이 ≤ 21</li>
      <li>report의 원소는 “이용자id 신고한id”형태의 문자열입니다.</li>
      <li>예를 들어 “muzi frodo”의 경우 “muzi”가 “frodo”를 신고했다는 의미입니다.</li>
      <li>id는 알파벳 소문자로만 이루어져 있습니다.</li>
      <li>이용자id와 신고한id는 공백(스페이스)하나로 구분되어 있습니다.</li>
      <li>자기 자신을 신고하는 경우는 없습니다.</li>
    </ul>
  </li>
  <li>1 ≤ k ≤ 200, k는 자연수입니다.</li>
  <li>return 하는 배열은 id_list에 담긴 id 순서대로 각 유저가 받은 결과 메일 수를 담으면 됩니다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>딕셔너리를 사용해서 풀었다.</li>
  <li>이 문제에서 관리되어야 하는 것은 <code class="language-plaintext highlighter-rouge">id_list</code>의 원소별로 신고한 id, 각 id별 신고횟수이다.</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">usersReport = {신고자 id : [신고된 id 리스트]}</code>와 <code class="language-plaintext highlighter-rouge">reportCnt = {신고된 id : 횟수}</code> 형태의 딕셔너리를 만든다.<br />
 1-1. <code class="language-plaintext highlighter-rouge">report</code>를 순회하면서 <code class="language-plaintext highlighter-rouge">usersReport</code>에 각 유저별로 신고한 id를 담는다.<br />
 1-2. <code class="language-plaintext highlighter-rouge">reportCnt</code>에 각 유저별로 신고된 횟수를 저장한다.<br />
 1-3. 이때 같은 유저가 동일한 아이디를 여러번 신고하지 않도록 예외처리를 해 주어야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">k</code>번 이상 신고된 아이디를 추출한 리스트 <code class="language-plaintext highlighter-rouge">stop = [k번 이상 신고된 id]</code>를 만든다.<br />
 2-1. <code class="language-plaintext highlighter-rouge">reportCnt</code>를 순회하며 <code class="language-plaintext highlighter-rouge">k</code>번 이상 신고된 아이디를 <code class="language-plaintext highlighter-rouge">stop</code>에 담는다.<br /></li>
  <li><code class="language-plaintext highlighter-rouge">id_list</code>를 순회하며 각 유저별 메일을 받은 횟수를 <code class="language-plaintext highlighter-rouge">answer</code>에 담는다.<br /><br /></li>
</ol>

<h1 id="코드">코드</h1>
<hr />

<script src="https://gist.github.com/miro7923/0c297eece0eed5c168f5daf229ddb58e.js"></script>
<p><br /><br /></p>

<ul>
  <li>그런데 이렇게 구구절절 써서 통과하고 보니까 아주 짧은 코드로 통과한 분이 계셨다…</li>
</ul>

<p><a href="https://programmers.co.kr/learn/courses/30/lessons/92334/solution_groups?language=python3">https://programmers.co.kr/learn/courses/30/lessons/92334/solution_groups?language=python3</a></p>

<ul>
  <li>믓지다…😦 <code class="language-plaintext highlighter-rouge">set</code>이 순간 떠오르긴 했으나 어떻게 활용할 지 몰라서 그냥 구구절절 코드를 썼는데 덕분에 하나 배울 수 있었다.</li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Programmers" /><category term="Algorithm" /><category term="Programmers" /><category term="Implementation" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://programmers.co.kr/learn/courses/30/lessons/92334]]></summary></entry><entry><title type="html">마이크로서비스 아키텍처(Microservices Architecture, MSA)</title><link href="http://localhost:4000/it/msa/" rel="alternate" type="text/html" title="마이크로서비스 아키텍처(Microservices Architecture, MSA)" /><published>2022-04-28T00:00:00+09:00</published><updated>2022-04-28T00:00:00+09:00</updated><id>http://localhost:4000/it/msa</id><content type="html" xml:base="http://localhost:4000/it/msa/"><![CDATA[<h1 id="-마이크로서비스-아키텍처란">👀 마이크로서비스 아키텍처란?</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">마이크로서비스</code>는 하나의 큰 애플리케이션을 여러 개의 다른 역할을 수행하는 애플리케이션으로 분리하였을 때 각 애플리케이션을 말하며, 마이크로서비스를 분리하여 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처를 <code class="language-plaintext highlighter-rouge">마이크로서비스 아키텍처</code>라 한다.</li>
  <li>대규모 소프트웨어 프로젝트를 마이크로 단위의 모듈로 분리하여 결합도를 낮추고(loosley-coupled) <code class="language-plaintext highlighter-rouge">API</code>를 통해 통신한다.</li>
  <li>이렇게 만들면 기존에 개발했던 부분을 수정하거나 새로운 기능을 추가할 때 그 기능이 실패해도 전체 어플리케이션에 미치는 영향을 최소화 할 수 있다.</li>
</ul>

<h2 id="모놀리틱monolithic-아키텍처">모놀리틱(Monolithic) 아키텍처</h2>

<p align="center"><img src="https://miro.medium.com/max/1280/0*1WjIRAQHhL-UR7WL.png" width="600" /></p>
<ul>
  <li>
    <p>사진 출처 : <a href="https://giljae.medium.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-microservices-architecture-%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90-7c45615cfe1a">https://giljae.medium.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-microservices-architecture-%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90-7c45615cfe1a</a></p>
  </li>
  <li>만약 <code class="language-plaintext highlighter-rouge">JAVA</code>를 사용하여 웹 어플리케이션을 개발한다면
    <ul>
      <li>사용자에게 보여줄 <code class="language-plaintext highlighter-rouge">view</code> 페이지를 구성</li>
      <li>요청된 <code class="language-plaintext highlighter-rouge">URI</code>에 따라 각 <code class="language-plaintext highlighter-rouge">view</code> 페이지를 연결해 줄 <code class="language-plaintext highlighter-rouge">컨트롤러</code></li>
      <li>도메인 정의 및 <code class="language-plaintext highlighter-rouge">DAO</code> 설계</li>
      <li><code class="language-plaintext highlighter-rouge">컨트롤러</code>와 <code class="language-plaintext highlighter-rouge">DAO</code>간의 결합도를 낮추기 위해 서비스 계층 구성</li>
    </ul>
  </li>
  <li>등 각 계층간 결합도를 낮추기 위한 설계를 하지만 최종 배포시에는 하나의 <code class="language-plaintext highlighter-rouge">war</code> 파일로 배포하게 된다. 즉 모두가 하나로 합쳐지게 되고 이는 유연한 리펙토링을 어렵게 만든다.</li>
  <li>서비스의 규모가 작고 개발자의 수도 적다면 큰 문제가 되지 않지만 개발자의 수가 늘어나고 서비스의 규모가 커지면 간단한 기능을 추가할 때에도 수정할 코드가 많아지고 그 수정이 영향을 미치는 부분도 많아졌기 때문에 간단한 변화에도 대규모 통합 테스트가 필요해진다. 이를 <code class="language-plaintext highlighter-rouge">모놀리틱(Monolithic)</code> 아키텍처라 한다.</li>
  <li>모놀리틱 아키텍처의 특성은 새로운 프레임워크를 사용할 필요가 생겨도 쉽사리 바꾸지 못한다는 점을 만들어 낸다. 왜냐하면 전체 어플리케이션이 하나로 묶여 있다면 그 동안 작성한 코드들을 새로운 언어 또는 프레임워크로 바꿔야 하는데 개발된 코드의 양이 많으면 많을수록 엄두가 안 날 것이다.</li>
</ul>

<h2 id="마이크로서비스microservice-아키텍처">마이크로서비스(Microservice) 아키텍처</h2>

<p align="center"><img src="https://miro.medium.com/max/1214/0*6c95Zet-KhecGRKK.png" width="600" /></p>
<ul>
  <li>
    <p>사진 출처 : <a href="https://giljae.medium.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-microservices-architecture-%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90-7c45615cfe1a">https://giljae.medium.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-microservices-architecture-%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90-7c45615cfe1a</a></p>
  </li>
  <li>하지만 마이크로서비스 아키텍처는 서비스가 개별적으로 독립적인 단위의 어플리케이션이기 때문에 변경이 용이하고  그 변경이 다른 어플리케이션에 미치는 영향도 적다.</li>
  <li>또한 개별 서비스 단위의 배포가 가능하기 때문에 하루에도 여러 번의 배포가 가능하다. 최근에 진행했던 <code class="language-plaintext highlighter-rouge">JAVA &amp; JSP</code> 프로젝트를 <code class="language-plaintext highlighter-rouge">AWS EC2</code>로 배포할 때 <code class="language-plaintext highlighter-rouge">war</code> 파일로 배포했기 때문에 배포 후 조그만 수정사항이 생겨도 <code class="language-plaintext highlighter-rouge">war</code> 파일을 다시 익스포트해야 했기 때문에 좀 불편했다. 프로젝트를 마이크로서비스 아키텍처로 설계하게 되면 그런 수고를 덜 수 있어 좀 더 유연하고 빠른 개발이 가능해 보인다.</li>
  <li>하지만 그만큼 개발이 어렵다는 단점이 있다. 마이크로서비스 아키텍처를 적용해 개발하게 되면 <code class="language-plaintext highlighter-rouge">view</code> 페이지 하나에서 보여지는 여러 컨텐츠 중 특정 컨텐츠 하나만 제공하는 어플리케이션 단위로 쪼개어서 페이지 로드 시 각 어플리케이션에서 받아오게 된다. 이론적으로는 쉬워 보이지만 실제 구현시에는 각각 마이크로서비스의 호스트 정보 및 통신 프로토콜에 대해 처리해 주어야 하기 때문이라고 한다.</li>
  <li>관련글 : <a href="http://guruble.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4microservice-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AD%A3%EC%9D%B4-%EC%A4%91%ED%97%8C%EB%94%94/">마이크로서비스 아키텍처. 그것이 뭣이 중헌디?</a><br /><br /><br /></li>
</ul>

<h1 id="결론">결론</h1>
<ul>
  <li>마이크로서비스 아키텍처의 장점들을 보면 무조건 마이크로서비스 아키텍처를 쓰는 것이 좋아보인다. 하지만 아직 서비스의 규모가 작고 마이크로서비스 아키텍처를 적용했을 때 모놀리틱 아키텍처에 비해 오히려 일이 더 늘어나고 생산성이 더 떨어진다면 마이크로서비스보다는 모놀리틱 아키텍처를 적용해 개발하는 것이 더 좋을 수 있다는 결론을 얻을 수 있었다. 나보다 더 전문가이신 분들이 쓴 글에서 깊은 인사이트를 얻을 수 있었기에 공부에 참고했던 링크를 남긴다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="http://guruble.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4microservice-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AD%A3%EC%9D%B4-%EC%A4%91%ED%97%8C%EB%94%94/">마이크로서비스 아키텍처. 그것이 뭣이 중헌디?</a></li>
  <li><a href="https://www.samsungsds.com/kr/insights/msa.html">Do Not Use MSA - 마이크로서비스 아키텍처가 꼭 필요한가요?</a></li>
  <li><a href="https://giljae.medium.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-microservices-architecture-%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90-7c45615cfe1a">마이크로서비스 아키텍처(Microservices Architecture)의 장점과 단점</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="IT" /><category term="CS" /><category term="Architecture" /><category term="MSA" /><summary type="html"><![CDATA[👀 마이크로서비스 아키텍처란? 마이크로서비스는 하나의 큰 애플리케이션을 여러 개의 다른 역할을 수행하는 애플리케이션으로 분리하였을 때 각 애플리케이션을 말하며, 마이크로서비스를 분리하여 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처를 마이크로서비스 아키텍처라 한다. 대규모 소프트웨어 프로젝트를 마이크로 단위의 모듈로 분리하여 결합도를 낮추고(loosley-coupled) API를 통해 통신한다. 이렇게 만들면 기존에 개발했던 부분을 수정하거나 새로운 기능을 추가할 때 그 기능이 실패해도 전체 어플리케이션에 미치는 영향을 최소화 할 수 있다.]]></summary></entry></feed>