<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-11T23:54:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yujin Dev Log</title><subtitle>개발 공부 기록하는 블로그</subtitle><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><entry><title type="html">Python) BOJ 1018. 체스판 다시 칠하기</title><link href="http://localhost:4000/boj/boj1018-py/" rel="alternate" type="text/html" title="Python) BOJ 1018. 체스판 다시 칠하기" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj1018-py</id><content type="html" xml:base="http://localhost:4000/boj/boj1018-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/1018">https://www.acmicpc.net/problem/1018</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 128 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8×8 크기의 체스판으로 만들려고 한다.</p>
  </li>
  <li>
    <p>체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.</p>
  </li>
  <li>
    <p>보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8×8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>지민이가 가지고 싶은 체스판의 크기는 8*8이기 때문에 저 크기만큼만 조사해서 그 중 가장 적은 칸을 칠하는 경우를 찾으면 된다.</li>
  <li>8*8 범위에서 색칠해야 하는 칸의 개수를 구하는 함수를 만들어 슬라이딩 윈도우처럼 옮겨가며 조사한다. 그 중 가장 작은 값을 정답으로 출력한다.<br /><br /></li>
</ul>

<h1 id="전체-코드">전체 코드</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">board</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">board</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span> 
<span class="c1"># 입력받는 부분 끝
</span>
<span class="n">INF</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">ans</span> <span class="o">=</span> <span class="mi">64</span>
<span class="k">def</span> <span class="nf">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="s">'W'</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'B'</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'W'</span>

<span class="k">def</span> <span class="nf">checkBoard</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">8</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">8</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>

        <span class="n">cur</span> <span class="o">=</span> <span class="n">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>

    <span class="n">cnt</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="n">INF</span> <span class="o">-</span> <span class="n">cnt</span><span class="p">)</span>

    <span class="k">global</span> <span class="n">ans</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">cnt</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">7</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">checkBoard</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>
<p><br /><br /></p>

<h1 id="코드-분석">코드 분석</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INF</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">ans</span> <span class="o">=</span> <span class="mi">64</span>
</code></pre></div></div>

<ul>
  <li>8*8 체스판에서 색칠해야 하는 최대 칸의 수는 64개이다. 체스판을 칠하는 경우는 <code class="language-plaintext highlighter-rouge">W</code>로 시작하는 경우와 <code class="language-plaintext highlighter-rouge">B</code>로 시작하는 경우 두 가지가 있기 때문에 두 경우에 칠해야 하는 칸의 수를 모두 비교해 봐야 한다.</li>
  <li>이걸 2중 반복문을 두 번 돌려 구할 수도 있지만 한 가지 경우에 칠해야 하는 개수를 구한 다음에 그걸 64에서 빼면 다른 경우에 칠해야 하는 개수가 되기 때문에 이렇게 구하는 것이 훨씬 효율적이다. 그래서 무한대값으로 64를 설정한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="s">'W'</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'B'</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'W'</span>
</code></pre></div></div>

<ul>
  <li>다음에 나와야 하는 색으로 바꿔주는 메서드이다. 체스판은 검은색 흰색이 번갈아 칠해지니까 서로 반대로 바꿔준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">checkBoard</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">8</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">8</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>

        <span class="n">cur</span> <span class="o">=</span> <span class="n">changeColor</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>

    <span class="n">cnt</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="n">INF</span> <span class="o">-</span> <span class="n">cnt</span><span class="p">)</span>

    <span class="k">global</span> <span class="n">ans</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">cnt</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>8*8 크기의 보드판을 탐색하며 색칠해야 하는 칸의 개수를 구하는 메서드이다.</li>
  <li>보드판의 시작점 색깔을 기준으로 새로 색칠해야 하는 칸의 개수를 구한 뒤 시작점의 색깔이 반대 색으로 시작하는 경우도 살펴봐야 하기 때문에 64에서 cnt를 뺀 수와 cnt를 비교해 봐야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">B</code>와 <code class="language-plaintext highlighter-rouge">W</code>로 시작하는 경우에서 색칠해야 하는 개수의 비교가 끝나면 정답변수와 비교해 최소값을 구한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">7</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">checkBoard</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>입력받은 보드판의 크기가 8<em>8인 경우에 한 번은 돌아야 하기 때문에 n, m에서 7을 뺀 크기만큼 탐색하도록 한다. (8을 빼버리면 입력 크기가 8</em>8인 경우에 범위값이 0이라 반복문에 안 들어감)<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 96 ms</li>
  <li>메모리 : 30840 KB<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No1018" /><category term="BruteForce" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/1018 제한 시간 제한 : 2 초 메모리 제한 : 128 MB]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 14 - 신상품 페이지와 특가상품 페이지에서 할인상품의 할인율과 할인가 보여주기</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-14/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 14 - 신상품 페이지와 특가상품 페이지에서 할인상품의 할인율과 할인가 보여주기" /><published>2022-05-10T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-14</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-14/"><![CDATA[<ul>
  <li>작성일 : 2022.05.10</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 6명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>

<p align="center"><img src="../../assets/images/unomas_prodListDb1.png" width="900" /></p>

<ul>
  <li>신상품과 할인상품을 볼 수 있는 페이지를 만들어 DB에서 조회해 온 값에 따라 출력되도록 했다.</li>
</ul>

<h2 id="productmapperxml">productMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 한 달 이내 신상품 목록 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getNewProducts"</span> <span class="na">resultType=</span><span class="s">"ProductVO"</span><span class="nt">&gt;</span>
        SELECT *
        FROM products
        WHERE prod_regdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW()
        ORDER BY prod_regdate DESC
        LIMIT #{pageStart}, #{perPageNum}
    <span class="nt">&lt;/select&gt;</span>
    
    <span class="c">&lt;!-- 신상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getNewProdCnt"</span> <span class="na">resultType=</span><span class="s">"int"</span><span class="nt">&gt;</span>
        SELECT COUNT(prod_num)
        FROM products
        WHERE prod_regdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW()
    <span class="nt">&lt;/select&gt;</span>
    
    <span class="c">&lt;!-- 특가 상품 목록 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getSaleProducts"</span> <span class="na">resultType=</span><span class="s">"ProductVO"</span><span class="nt">&gt;</span>
        SELECT *
        FROM products
        WHERE prod_discntrate &gt; 0
        ORDER BY prod_regdate DESC
        LIMIT #{pageStart}, #{perPageNum}
    <span class="nt">&lt;/select&gt;</span>
    
    <span class="c">&lt;!-- 특가 상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getSaleProdCnt"</span> <span class="na">resultType=</span><span class="s">"int"</span><span class="nt">&gt;</span>
        SELECT COUNT(prod_num)
        FROM products
        WHERE prod_discntrate &gt; 0
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>상품 테이블에서 신상품과 할인상품 목록을 가져오기 위한 쿼리문을 작성했다.</li>
  <li>신상품은 등록일 기준으로 최근 한 달 이내의 상품만 가져오도록 했고, 특가(할인) 상품은 할인율을 표시하는 컬럼인 <code class="language-plaintext highlighter-rouge">prod_discntrate</code>의 값이 0 보다 큰 값을 때에만 가져오도록 했다. 할인율이 0이라면 할인하지 않는 상품이라는 뜻이다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>
	
    <span class="c1">// 신상품 목록 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getNewProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 신상품 개수 가져오는 메서드</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewProdCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 특가 목록 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getSaleProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 특가 상품 개수 가져오는 메서드</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSaleCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getNewProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getNewProducts"</span><span class="o">,</span> <span class="n">pc</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewProdCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getNewProdCnt"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getSaleProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getSaleProducts"</span><span class="o">,</span> <span class="n">pc</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSaleCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getSaleProdCnt"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DAO</code>를 통해 DB에서 신상품과 특가상품 정보를 불러온다.</li>
</ul>

<h2 id="productdaotestjava">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">신상품목록출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ProdCriteria</span> <span class="n">pp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdCriteria</span><span class="o">();</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setPage</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setPerPageNum</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>
		
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getNewProductList</span><span class="o">(</span><span class="n">pp</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"count: "</span> <span class="o">+</span> <span class="n">dao</span><span class="o">.</span><span class="na">getNewProdCnt</span><span class="o">());</span>
    <span class="o">}</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">특가목록출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ProdCriteria</span> <span class="n">pc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdCriteria</span><span class="o">();</span>
        <span class="nc">ProdPageMaker</span> <span class="n">pm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPageMaker</span><span class="o">();</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setCri</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setTotalCnt</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getSaleCnt</span><span class="o">());</span>
		
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getSaleProductList</span><span class="o">(</span><span class="n">pc</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">pm</span><span class="o">.</span><span class="na">getTotalCnt</span><span class="o">()+</span><span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 코드에 넣기 전 테스트를 진행했다. 결과가 잘 나왔기 때문에 다음 단계로 넘어간다.</li>
  <li><code class="language-plaintext highlighter-rouge">ProdCriteria</code>와 <code class="language-plaintext highlighter-rouge">ProdPageMaker</code>는 페이징 처리를 위한 객체들이다.</li>
</ul>

<h2 id="prodcriteriajava">ProdCriteria.java</h2>

<ul>
  <li>한 페이지에 보여줄 상품 목록의 정보를 담고 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdCriteria</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">;</span> 
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">;</span> <span class="c1">// 소분류의 시작과 끝번호 (대분류별로 가져올 때 사용)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">page</span><span class="o">;</span> <span class="c1">// 현재 페이지번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">perPageNum</span><span class="o">;</span> <span class="c1">// 한 페이지에 보여질 상품 개수</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">prod_category</span><span class="o">;</span> <span class="c1">// 소분류 번호. 소분류만 지정해서 가져올 때 사용</span>
	
    <span class="c1">// 한 페이지에 상품이 9개씩 노출될 것이고 첫 페이지는 1로 설정 </span>
    <span class="kd">public</span> <span class="nf">ProdCriteria</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">page</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">perPageNum</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
    <span class="o">}</span>
	
    <span class="c1">// 테이블에서 상품 목록을 가져올 때 시작 로우 설정</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPageStart</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">page</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">perPageNum</span><span class="o">;</span>
    <span class="o">}</span>
	
    <span class="c1">// 페이지번호가 1보다 작게 입력되면 1페이지로 고정 </span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPage</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">page</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">page</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
		
        <span class="k">this</span><span class="o">.</span><span class="na">page</span> <span class="o">=</span> <span class="n">page</span><span class="o">;</span>
    <span class="o">}</span>
	
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPerPageNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">perPageNum</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 페이지 사이즈 (한 페이지에 perPageNum만큼 출력하게 하기)</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="n">perPageNum</span> <span class="o">&amp;&amp;</span> <span class="n">perPageNum</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">perPageNum</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
		
        <span class="k">this</span><span class="o">.</span><span class="na">perPageNum</span> <span class="o">=</span> <span class="n">perPageNum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>입력된 페이지 번호에 따라 테이블에서 가져와야 할 로우 번호를 내부적으로 계산한 후 <code class="language-plaintext highlighter-rouge">MyBatis</code>로 넘겨주도록 했다.</li>
</ul>

<h2 id="prodpagemakerjava">ProdPageMaker.java</h2>

<ul>
  <li>페이지의 하단에서 다음 페이지로 이동할 수 있도록 하는 데이터를 처리하여 가지고 있는 객체이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdPageMaker</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">totalCnt</span><span class="o">;</span> <span class="c1">// 총 게시글 수</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">startPage</span><span class="o">;</span> <span class="c1">// 시작페이지 번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">endPage</span><span class="o">;</span> <span class="c1">// 마지막 페이지 번호</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">prev</span><span class="o">;</span> <span class="c1">// 이전 버튼 활성화 여부(페이지의 개수가 10개가 넘어가면 &lt;&lt; &gt;&gt; 와 같은 버튼 보이게 하는 변수</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">next</span><span class="o">;</span> <span class="c1">// 다음 버튼 활성화 여부</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">pageBlock</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">// 한 페이지에서 보여줄 페이지 블럭의 개수 </span>
    <span class="kd">private</span> <span class="nc">ProdCriteria</span> <span class="n">cri</span><span class="o">;</span> <span class="c1">// 한 페이지에 보여주는 상품 정보를 관리하는 객체</span>
	
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCri</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">cri</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cri</span> <span class="o">=</span> <span class="n">cri</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTotalCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">totalCnt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">totalCnt</span> <span class="o">=</span> <span class="n">totalCnt</span><span class="o">;</span>
		
        <span class="n">calcData</span><span class="o">();</span>
    <span class="o">}</span>
	
    <span class="c1">// 입력받은 총 상품 수와 한 페이지에 보여줄 상품의 수를 이용해서 몇 개의 페이지가 생성되어야 하는지 계산 </span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">calcData</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">endPage</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">cri</span><span class="o">.</span><span class="na">getPage</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span><span class="n">pageBlock</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageBlock</span><span class="o">;</span>
        <span class="n">startPage</span> <span class="o">=</span> <span class="o">(</span><span class="n">endPage</span> <span class="o">-</span> <span class="n">pageBlock</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">tmpEndPage</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">totalCnt</span> <span class="o">/</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span><span class="n">cri</span><span class="o">.</span><span class="na">getPerPageNum</span><span class="o">());</span>
		
        <span class="k">if</span> <span class="o">(</span><span class="n">endPage</span> <span class="o">&gt;</span> <span class="n">tmpEndPage</span><span class="o">)</span> <span class="n">endPage</span> <span class="o">=</span> <span class="n">tmpEndPage</span><span class="o">;</span>
		
        <span class="n">prev</span> <span class="o">=</span> <span class="o">(</span><span class="n">startPage</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">next</span> <span class="o">=</span> <span class="o">(</span><span class="n">endPage</span> <span class="o">*</span> <span class="n">cri</span><span class="o">.</span><span class="na">getPerPageNum</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">totalCnt</span><span class="o">)</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>현재 카테고리에서 보여져야 하는 상품의 총 개수를 이용해서 생성해야 하는 페이지 블럭의 개수를 계산해 가지고 있는 객체이다. 여기서 계산된 데이터로 뷰 페이지에서 표시되어야 하는 페이지 블럭의 개수만큼 반복문을 돌려 출력한다.</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
	
    <span class="c1">// 신상품 목록 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getNewProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 신상품 개수 가져오는 메서드</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewProdCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 특가 목록 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getSaleProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
    <span class="c1">// 특가 상품 개수 가져오는 메서드</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSaleCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getNewProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getNewProductList</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewProdCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getNewProdCnt</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getSaleProductList</span><span class="o">(</span><span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getSaleProductList</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSaleCnt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getSaleCnt</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스도 연결해 준다.</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/new_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">newProductListGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"pageNum"</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> 
        <span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setPage</span><span class="o">(</span><span class="n">pageNum</span><span class="o">);</span>
		
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getNewProdCnt</span><span class="o">();</span>
		
        <span class="nc">ProdPageMaker</span> <span class="n">pm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPageMaker</span><span class="o">();</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setCri</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setTotalCnt</span><span class="o">(</span><span class="n">postCnt</span><span class="o">);</span>

        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getNewProductList</span><span class="o">(</span><span class="n">pc</span><span class="o">));</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="s">"신상품"</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"pm"</span><span class="o">,</span> <span class="n">pm</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/sale_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">saleProductList</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"pageNum"</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> 
            <span class="nc">ProdCriteria</span> <span class="n">pc</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setPage</span><span class="o">(</span><span class="n">pageNum</span><span class="o">);</span>
		
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getSaleCnt</span><span class="o">();</span>
		
        <span class="nc">ProdPageMaker</span> <span class="n">pm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPageMaker</span><span class="o">();</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setCri</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
        <span class="n">pm</span><span class="o">.</span><span class="na">setTotalCnt</span><span class="o">(</span><span class="n">postCnt</span><span class="o">);</span>

        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getSaleProductList</span><span class="o">(</span><span class="n">pc</span><span class="o">));</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="s">"특가"</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"pm"</span><span class="o">,</span> <span class="n">pm</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 컨트롤러로 와서 아까 작업했던 것들을 연결시켜 준다.</li>
  <li>분류별 상품목록을 출력할 때와 다르게 신상품과 특가 상품 목록은 제목과 테이블 상에서의 대분류 번호가 고정되어 있기 때문에 인자값으로 고정된 값을 넣어주었다. 나중에 대분류와 소분류가 더 추가되어서 확장되었을 경우를 생각해보면 지금처럼 대분류 번호인 <code class="language-plaintext highlighter-rouge">topcate_num</code> 값 자체를 지정해 줄 필요가 없이 제거해도 될 거 같기도 하다… 저 번호를 활용해서 테이블에서 데이터를 불러오는 것도 아니고… 나중에 수정 해야겠다.</li>
</ul>

<h2 id="productlistjsp">productList.jsp</h2>
<ul>
  <li>처음에 페이지 템플릿을 만들던 당시에는 신상품과 특가 상품 목록 페이지도 따로 만들었는데 이번에 DB 연결 작업을 하며 생각해보니 저 페이지들을 굳이 따로 만들 필요가 없었다. 기존에 상품 분류별로 출력하던 페이지에서 제어조건만 조금 추가해서 신상품과 특가 상품들도 출력하면 되는 것이었다. 페이지의 제목 부분만 다르지 상품 목록을 보여주고, 상품을 클릭하면 상세 페이지로 이동하는 로직은 다 같기 때문에…</li>
  <li>그래서 분류별 상품을 출력할 때 썼던 <code class="language-plaintext highlighter-rouge">productList.jsp</code> 파일을 재활용했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"categoryBox"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>${topcate }<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;c:if </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">topcate_num</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"categoryList"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">id=</span><span class="s">"dcateNum"</span> <span class="na">value=</span><span class="s">"${dcate_num }"</span><span class="nt">&gt;</span> 
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/product/product_list?cateStart=${cateStart }&amp;cateEnd=${cateEnd}&amp;topcate_num=${topcate_num}&amp;pageNum=${pageNum}&amp;dcate_num=0"</span> 
                    <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category0"</span> <span class="na">style=</span><span class="s">"color: black;"</span> 
                    <span class="na">onclick=</span><span class="s">"changeSort(0, 0, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> 전체보기<span class="nt">&lt;/a&gt;</span>
            <span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"dcate"</span><span class="na"> begin=</span><span class="s">"0"</span><span class="na"> end=</span><span class="s">"</span><span class="si">${</span><span class="n">cateEnd</span><span class="o">-</span><span class="n">cateStart</span> <span class="si">}</span><span class="s">"</span><span class="na"> step=</span><span class="s">"1"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/product/product_list?cateStart=${cateStart }&amp;cateEnd=${cateEnd}&amp;topcate_num=${topcate_num}&amp;pageNum=1&amp;dcate_num=${cateStart+dcate}"</span> 
                    <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category${cateStart+dcate }"</span> <span class="na">style=</span><span class="s">"color: black;"</span> 
                    <span class="na">onclick=</span><span class="s">"changeSort(${cateStart+dcate }, ${cateStart }, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> ${dcateList[it.index] }<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/c:forEach&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/c:if&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSTL</code> 표현식을 사용해 페이지 종류에 따라 출력해야 할 부분을 제어해 주었다. 상단의 소분류는 분류별로 상품을 보는 페이지에서만 출력하고 신상품과 특가 상품 페이지에서는 필요하지 않아서 출력하지 않게 했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pi-text"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/product/product_detail?prod_num=${vo.prod_num }"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h5&gt;</span>${vo.prod_name }<span class="nt">&lt;/h5&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;c:choose&gt;</span>
        <span class="nt">&lt;c:when </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">vo</span><span class="o">.</span><span class="na">prod_discntrate</span> <span class="n">eq</span> <span class="mi">0</span><span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"product-price"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;fmt:formatNumber </span><span class="na">value=</span><span class="s">"</span><span class="si">${</span><span class="n">vo</span><span class="o">.</span><span class="na">prod_price</span><span class="si">}</span><span class="s">"</span><span class="nt">/&gt;</span>원
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/c:when&gt;</span>
        <span class="nt">&lt;c:otherwise&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"product-price discountedRate"</span><span class="nt">&gt;</span>${vo.prod_discntrate}%<span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"product-price"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;c:set </span><span class="na">var=</span><span class="s">"discnted"</span><span class="na"> value=</span><span class="s">"</span><span class="si">${</span><span class="n">vo</span><span class="o">.</span><span class="na">prod_price</span><span class="o">*(</span><span class="mi">100</span><span class="o">-</span><span class="n">vo</span><span class="o">.</span><span class="na">prod_discntrate</span><span class="o">)/</span><span class="mi">100</span><span class="si">}</span><span class="s">"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;fmt:formatNumber </span><span class="na">value=</span><span class="s">"</span><span class="si">${</span><span class="n">discnted</span><span class="o">+((</span><span class="n">discnted</span><span class="o">%</span><span class="mi">10</span><span class="o">&gt;</span><span class="mi">5</span><span class="o">)?(</span><span class="mi">10</span><span class="o">-(</span><span class="n">discnted</span><span class="o">%</span><span class="mi">10</span><span class="o">))%</span><span class="mi">10</span><span class="o">:-(</span><span class="n">discnted</span><span class="o">%</span><span class="mi">10</span><span class="o">))</span><span class="si">}</span><span class="s">"</span><span class="na"> type=</span><span class="s">"number"</span><span class="nt">/&gt;</span>원<span class="nt">&lt;br&gt;</span>
            <span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"product-price"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;span&gt;&lt;fmt:formatNumber </span><span class="na">value=</span><span class="s">"</span><span class="si">${</span><span class="n">vo</span><span class="o">.</span><span class="na">prod_price</span><span class="si">}</span><span class="s">"</span><span class="na"> type=</span><span class="s">"number"</span><span class="nt">/&gt;</span>원<span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/c:otherwise&gt;</span>
    <span class="nt">&lt;/c:choose&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>만약 할인하는 상품이면 십의 자리에서 반올림한 가격을 출력하도록 했다.</li>
  <li>그리고 <code class="language-plaintext highlighter-rouge">JSTL</code>의 숫자 포맷 라이브러리를 사용해서 통화에 자동으로 <code class="language-plaintext highlighter-rouge">,</code>를 찍도록 했다. 처음엔 이걸 까먹고 있어서 자바스크립트에서 정규식을 사용하는 방식으로 구현했는데… <code class="language-plaintext highlighter-rouge">JSTL</code>을 사용하는 것이 코드상으로 깔끔하고 가독성도 좋아서 통화 출력 부분은 모두 이렇게 수정했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span> <span class="na">id=</span><span class="s">"pagediv"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">value=</span><span class="s">"${pageNum }"</span> <span class="na">id=</span><span class="s">"curPage"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12 text-center"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;c:if </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">pm</span><span class="o">.</span><span class="na">prev</span> <span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"arrow_carrot-left_alt pagingBtn"</span> <span class="na">id=</span><span class="s">"prev"</span><span class="nt">&gt;&lt;/a&gt;</span> 
        <span class="nt">&lt;/c:if&gt;</span>
						
        <span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"block"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="na"> begin=</span><span class="s">"</span><span class="si">${</span><span class="n">pm</span><span class="o">.</span><span class="na">startPage</span> <span class="si">}</span><span class="s">"</span><span class="na"> end=</span><span class="s">"</span><span class="si">${</span><span class="n">pm</span><span class="o">.</span><span class="na">endPage</span> <span class="si">}</span><span class="s">"</span><span class="na"> step=</span><span class="s">"1"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;span&gt;</span>
                <span class="nt">&lt;c:choose&gt;</span>
                    <span class="nt">&lt;c:when </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">topcate_num</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
                        <span class="c">&lt;!----&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/product/product_list?cateStart=${cateStart }&amp;cateEnd=${cateEnd }&amp;topcate_num=${topcate_num }&amp;pageNum=${it.index}&amp;dcate_num=${dcate_num}"</span> 
                            <span class="na">class=</span><span class="s">"pagingBtn"</span> <span class="na">id=</span><span class="s">"page${it.index }"</span> <span class="na">style=</span><span class="s">"color: black;"</span>
                            <span class="na">onclick=</span><span class="s">"changePageNum(${it.index }, ${pm.endPage });"</span><span class="nt">&gt;</span>${it.index } <span class="c">&lt;!----&gt;</span><span class="nt">&lt;/a&gt;</span>
                    <span class="nt">&lt;/c:when&gt;</span>
                    <span class="nt">&lt;c:when </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">topcate_num</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
                        <span class="c">&lt;!----&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/product/new_list?pageNum=${it.index}"</span> 
                        <span class="na">class=</span><span class="s">"pagingBtn"</span> <span class="na">id=</span><span class="s">"page${it.index }"</span> <span class="na">style=</span><span class="s">"color: black;"</span>
                        <span class="na">onclick=</span><span class="s">"changePageNum(${it.index }, ${pm.endPage });"</span><span class="nt">&gt;</span>${it.index } <span class="c">&lt;!----&gt;</span><span class="nt">&lt;/a&gt;</span>
                    <span class="nt">&lt;/c:when&gt;</span>
                    <span class="nt">&lt;c:otherwise&gt;</span>
                        <span class="c">&lt;!----&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/product/sale_list?pageNum=${it.index}"</span> 
                                <span class="na">class=</span><span class="s">"pagingBtn"</span> <span class="na">id=</span><span class="s">"page${it.index }"</span> <span class="na">style=</span><span class="s">"color: black;"</span>
                                <span class="na">onclick=</span><span class="s">"changePageNum(${it.index }, ${pm.endPage });"</span><span class="nt">&gt;</span>${it.index } <span class="c">&lt;!----&gt;</span><span class="nt">&lt;/a&gt;</span>
                    <span class="nt">&lt;/c:otherwise&gt;</span>
                <span class="nt">&lt;/c:choose&gt;</span>
            <span class="nt">&lt;/span&gt;</span> 
        <span class="nt">&lt;/c:forEach&gt;</span>
						
        <span class="nt">&lt;c:if </span><span class="na">test=</span><span class="s">"</span><span class="si">${</span><span class="n">pm</span><span class="o">.</span><span class="na">next</span> <span class="si">}</span><span class="s">"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"arrow_carrot-right_alt pagingBtn"</span> <span class="na">id=</span><span class="s">"next"</span><span class="nt">&gt;&lt;/a&gt;</span> 
        <span class="nt">&lt;/c:if&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>하단 페이지 블럭 부분에도 각 페이지 종류에 따라 다른 주소를 매핑해주도록 제어했다.</li>
  <li>이렇게 페이지 재활용 끝!! 😄<br /><br /><br /></li>
</ul>

<h1 id="구현하며-했던-고민">구현하며 했던 고민</h1>
<ul>
  <li>위에서도 기술했다시피 신상품과 특가상품 목록 페이지에서 상품 상세페이지로 이동하는 로직은 다 같은데 굳이 페이지를 나눠야 할까? 였다. 페이지들을 따로 만들지 않고 페이지 하나를 재활용해서 구현하게 된 데에는 상품 상세페이지로 이동하는 매핑주소 작업을 새로 해주기 귀찮았던 것이 가장 컸다.</li>
  <li>역시 프로그래밍은 귀찮음이 커야 효율적으로 짤 수 있다는 말이 맞는 말이란 생각이 든다…😅 <br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-10</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.10 작성자 : 황유진]]></summary></entry><entry><title type="html">에러해결 Log) (Spring framework) Mapped Statements collection does not contain value for ~</title><link href="http://localhost:4000/errorlog/warning-log-08/" rel="alternate" type="text/html" title="에러해결 Log) (Spring framework) Mapped Statements collection does not contain value for ~" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/errorlog/warning-log-08</id><content type="html" xml:base="http://localhost:4000/errorlog/warning-log-08/"><![CDATA[<h1 id="사용환경">사용환경</h1>
<ul>
  <li>MacBook Air (M1, 2020) 16GB</li>
  <li>JDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="에러의-발생">에러의 발생</h1>

<p align="center"><img src="../../assets/images/mybatisError1.png" width="800" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code> 매퍼에서 새로운 쿼리문을 만들고 <code class="language-plaintext highlighter-rouge">DAO</code> 테스트를 진행해보려 했는데 마이바티스 쪽에서 에러가 있다고 나왔다. 그 동안 잘만 됐는데 갑자기 왜 안 됄까… 구글링을 해 보았다.<br /><br /><br /></li>
</ul>

<h1 id="문제-해결">문제 해결</h1>

<ul>
  <li>구글링 결과 매퍼에서 쓴 <code class="language-plaintext highlighter-rouge">id</code>값과 <code class="language-plaintext highlighter-rouge">DAO</code> 클래스 내의 메서드에서 부르는 <code class="language-plaintext highlighter-rouge">id</code>값이 일치하지 않았던 것이었다.</li>
</ul>

<p align="center"><img src="../../assets/images/mybatisError2.png" width="600" /></p>

<ul>
  <li>매퍼의 <code class="language-plaintext highlighter-rouge">id</code>값은 <code class="language-plaintext highlighter-rouge">getSaleProdCnt</code>인데</li>
</ul>

<p align="center"><img src="../../assets/images/mybatisError3.png" width="700" /></p>

<ul>
  <li>메서드에서 호출하는 부분에서는 중간을 빼먹고 부르고 있었다 ㅠ.ㅠ</li>
  <li>요즘 <code class="language-plaintext highlighter-rouge">tabnine</code> 자동완성 기능을 많이 쓰고 있는데 저 과정에서 오타가 난 것 같다.</li>
</ul>

<p align="center"><img src="../../assets/images/mybatisError4.png" width="700" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">id</code>를 맞춰주니까 잘 된다…<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://manli000.wordpress.com/2016/01/02/mapped-statements-collection-does-not-contain-value-for/">Mapped Statements collection does not contain value for ***</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="ErrorLog" /><category term="Error" /><category term="Solve" /><category term="Log" /><summary type="html"><![CDATA[사용환경 MacBook Air (M1, 2020) 16GB JDK 8 Spring Tool Suite 4.14.0 tomcat 8.5]]></summary></entry><entry><title type="html">에러해결 Log) The prefix “tx” for element “tx:annotation-driven” is not bound.</title><link href="http://localhost:4000/errorlog/warning-log-07/" rel="alternate" type="text/html" title="에러해결 Log) The prefix “tx” for element “tx:annotation-driven” is not bound." /><published>2022-05-08T00:00:00+09:00</published><updated>2022-05-08T00:00:00+09:00</updated><id>http://localhost:4000/errorlog/warning-log-07</id><content type="html" xml:base="http://localhost:4000/errorlog/warning-log-07/"><![CDATA[<h1 id="사용환경">사용환경</h1>
<ul>
  <li>MacBook Air (M1, 2020) 16GB</li>
  <li>JDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>tomcat 8.5<br /><br /><br /></li>
</ul>

<h1 id="에러의-발생-1">에러의 발생 1</h1>

<p align="center"><img src="../../assets/images/tranError1.png" width="700" /></p>

<ul>
  <li>DB에 데이터를 삽입하는 테스트를 진행할 때 데이터는 들어갔지만 예외가 발생해 결과적으로는 실패인 상황에도 DB에는 이미 해당 데이터가 있기 때문에 그 데이터를 삭제하든지 이클립스상에서 삽입할 데이터를 바꾸든지 해야 했다.</li>
  <li>이것은 상당히 귀찮은 작업이었기 때문에… 예외 발생시에는 롤백을 시키려고 <code class="language-plaintext highlighter-rouge">@Transactional</code>을 써 보려고 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에 위의 태그를 추가했다. 그리고 마주한 빨간줄…</li>
</ul>

<p align="center"><img src="../../assets/images/tranError2.png" width="700" /></p>

<ul>
  <li>에러 내용을 보니까 접두사 선언이 되어 있지 않은 것이 문제였다.<br /><br /><br /></li>
</ul>

<h1 id="문제-해결-1">문제 해결 1</h1>

<p align="center"><img src="../../assets/images/tranError3.png" width="600" /></p>

<ul>
  <li>그래서 스택오버플로우를 통해 접두사 선언을 해 주었다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xmlns:tx="http://www.springframework.org/schema/tx"
</code></pre></div></div>
<p><br /><br /></p>

<h1 id="에러의-발생-2">에러의 발생 2</h1>

<p align="center"><img src="../../assets/images/tranError4.png" width="700" /></p>

<ul>
  <li>하지만 여전히 에러는 사라지지 않았고 새로운 메시지가 나왔다. 여전히 관련된 선언을 찾을 수 없다는 내용…ㅠ 해당 메시지로 한 번 더 구글링했다.<br /><br /><br /></li>
</ul>

<h1 id="문제-해결-2">문제 해결 2</h1>

<p align="center"><img src="../../assets/images/tranError5.png" width="600" /></p>

<ul>
  <li>역시 스택오버플로우에서 해당 문제에 대한 해답을 찾을 수 있었다. 접두사 <code class="language-plaintext highlighter-rouge">tx</code>와 관련해 스키마 로케이션을 더 추가해 주어야 했던 것이었다…</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
</code></pre></div></div>

<p align="center"><img src="../../assets/images/tranError6.png" width="600" /></p>

<ul>
  <li>여기까지 하고 나니까 더 이상의 에러가 없는, 클린한 <code class="language-plaintext highlighter-rouge">root-context.xml</code>을 볼 수 있었다.<br /><br /><br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://stackoverflow.com/questions/10373222/spring-the-prefix-tx-for-element-txannotation-driven-is-not-bound">Spring “The prefix “tx” for element “tx:annotation-driven” is not bound.”</a></li>
  <li><a href="https://stackoverflow.com/questions/17566391/cvc-complex-type-2-4-c-the-matching-wildcard-is-strict-but-no-declaration-can">cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element ‘tx:annotation-driven’</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="ErrorLog" /><category term="Error" /><category term="Solve" /><category term="Log" /><summary type="html"><![CDATA[사용환경 MacBook Air (M1, 2020) 16GB JDK 8 Spring Tool Suite 4.14.0 tomcat 8.5]]></summary></entry><entry><title type="html">OS) Virtual Memory</title><link href="http://localhost:4000/operating%20system/OS-09-Virtual-Memory/" rel="alternate" type="text/html" title="OS) Virtual Memory" /><published>2022-05-08T00:00:00+09:00</published><updated>2022-05-08T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/OS-09-Virtual-Memory</id><content type="html" xml:base="http://localhost:4000/operating%20system/OS-09-Virtual-Memory/"><![CDATA[<h1 id="-demain-paging">👀 Demain Paging</h1>
<ul>
  <li>실제로 필요할 때 <code class="language-plaintext highlighter-rouge">page</code>를 메모리에 올리는 것</li>
  <li>왜냐면 프로그램의 대부분의 코드는 (거의 발생하지 않는 치명적인) 오류를 해결하기 위한 코드라 평소에는 쓰지지 않는 부분이 대다수다. 그래서 이걸 다 메모리에 올려 놓으면 메모리 공간만 차지하고 비효율적이다.</li>
  <li>그래서 프로세스 동작에 실제로 필요한 <code class="language-plaintext highlighter-rouge">page</code>만 메모리에 올리는 것이 효율적이다.</li>
  <li>장점
    <ul>
      <li><code class="language-plaintext highlighter-rouge">I/O</code> 양의 감소</li>
      <li>메모리 사용량 감소</li>
      <li>빠른 응답 시간</li>
      <li>더 많은 사용자 수용
<br /><br /></li>
    </ul>
  </li>
  <li>물리적 메모리에 <code class="language-plaintext highlighter-rouge">page</code>가 올려질 <code class="language-plaintext highlighter-rouge">page entry</code>에서 <code class="language-plaintext highlighter-rouge">Valid/Invalid bit</code>를 사용해 현재 메모리에 <code class="language-plaintext highlighter-rouge">page</code>가 올려져 확인한다. 만약 어떤 메모리 주소에 접근했을 때 해당 위치가 <code class="language-plaintext highlighter-rouge">Invalid bit</code>로 세팅되어 있으면 <code class="language-plaintext highlighter-rouge">page fault</code>가 일어났다고 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">page fault</code>가 일어나면 디스크에 직접 접근해서 해당 페이지를 가져와야 하는데 이는 메모리에 접근해서 가져오는 것에 비해 시간이 아주 많이 걸린다.<br /><br /></li>
</ul>

<h1 id="replacement-algorithm">Replacement Algorithm</h1>
<h2 id="page-replacement">Page replacement</h2>
<ul>
  <li>새로운 페이지를 올릴 공간이 없으면 올려져 있는 페이지 중 어떤 것을 쫓아낼 지 결정해야 한다.</li>
  <li>이를 위한 여러 알고리즘이 있는데 대체로 <code class="language-plaintext highlighter-rouge">page fault</code>를 최소화하기 위해 곧바로 사용되지 않을 페이지를 쫓아내는 형태로 구현되어 있다.</li>
</ul>

<h2 id="optimal-algorithm">Optimal Algorithm</h2>
<ul>
  <li>가장 먼 미래에 사용될(당장 사용되지 않을) 페이지를 쫓아내는 알고리즘</li>
  <li>미래에 참조될 페이지를 미리 예측할 수 있다는 가정하에 사용할 수 있는 알고리즘이다. 하지만 미래를 아는 것은 불가능하기 때문에 실제 시스템에 사용은 불가능하다.</li>
</ul>

<h2 id="fifo-first-in-first-out-algorithm">FIFO (First In First Out) Algorithm</h2>
<ul>
  <li>먼저 들어온 것을 먼저 내쫓는 알고리즘</li>
  <li>실제 시스템에 사용되는 알고리즘이다.</li>
  <li>먼저 들어온 것을 내쫓는 과정에서 페이지 프레임 크기를 늘렸는데 오히려 <code class="language-plaintext highlighter-rouge">page fault</code>가 늘어나 성능이 하락하는 경우가 생길 수 있다.</li>
</ul>

<h2 id="lru-least-recently-used-algorithm">LRU (Least Recently Used) Algorithm</h2>
<ul>
  <li>가장 오래 전에 참조된 것을 지우는 알고리즘</li>
  <li>실제 시스템에서 많이 사용된다.</li>
  <li>어떤 페이지가 참조되면 그것의 순서를 맨 앞으로 바꿔주기만 하면 되기 때문에 링크드 리스트(Linked list) 형태로 구현한다. 시간복잡도는 <code class="language-plaintext highlighter-rouge">O(1)</code></li>
</ul>

<h2 id="lfu-least-frequently-used-algorithm">LFU (Least Frequently Used) Algorithm</h2>
<ul>
  <li>참조 횟수(reference count)가 가장 적은 페이지를 지우는 알고리즘
    <ul>
      <li>최저 참조 횟수 페이지가 여러 개 있는 경우
        <ul>
          <li>내쫓을 페이지를 임의로 선정한다.</li>
          <li>성능 향상을 위해 가장 오래 전에 참조된 페이지를 지우게 구현할 수도 있다.</li>
        </ul>
      </li>
      <li>장단점
        <ul>
          <li>LRU처럼 직전 참조 시점만 보는 것이 아니라 장기적인 시간 규모를 보기 때문에 페이지의 인기도를 좀 더 정확히 반영할 수 있다.</li>
          <li>참조 시점의 최근성을 반영하지 못 한다.(만약 1초 전에 처음으로 참조 되었다면 인기도가 낮은 것으로 간주하고 내쫓게 된다)</li>
          <li>LRU보다 구현이 복잡하다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>어떤 페이지가 참조되면 이전에 참조된 페이지들의 참조 횟수와 하나씩 비교해서 순서를 정해줘야 한다. 그래서 LRU처럼 링크드 리스트 형태로 구현하면 순서를 재설정 하는 데 너무 오래 걸린다. 그래서 최소힙(Min heap) 형태로 구현한다. 참조 횟수가 가장 적은 페이지가 힙의 최상단에 있는 것이다. 시간복잡도는 <code class="language-plaintext highlighter-rouge">O(log n)</code><br /><br /></li>
</ul>

<h1 id="캐슁-기법">캐슁 기법</h1>
<ul>
  <li>한정된 빠른 공간(=캐쉬)에 요청된 데이터를 저장해 두었다가 후속 요청시 캐쉬로부터 직접 서비스하는 방식</li>
  <li><code class="language-plaintext highlighter-rouge">paging system</code> 외에도 <code class="language-plaintext highlighter-rouge">cache memory</code>, <code class="language-plaintext highlighter-rouge">buffer caching</code>, <code class="language-plaintext highlighter-rouge">Web caching</code> 등 다양한 분야에서 사용된다.</li>
  <li>그런데 <code class="language-plaintext highlighter-rouge">paging system</code>에서는 <code class="language-plaintext highlighter-rouge">page fault</code>가 생겨서 디스크에서 페이지를 가져와야 할 때에만 <code class="language-plaintext highlighter-rouge">OS</code>가 관여하고 페이지가 메모리에 있어서 디스크까지 갈 필요가 없을 때엔 <code class="language-plaintext highlighter-rouge">OS</code>가 관여하지 않는다. 그래서 <code class="language-plaintext highlighter-rouge">OS</code>는 페이지의 메모리 입장 시간 정도만 알고 있지 메모리에 올라간 이후의 참조 시간과 빈도 같은 것을 알 수 없다. 그래서 사실 위에서 설명했던 LRU와 LFU 같은 알고리즘들은 <code class="language-plaintext highlighter-rouge">OS</code>의 <code class="language-plaintext highlighter-rouge">paging system</code>에서는 사용할 수 없다.</li>
</ul>

<h2 id="clock-algorithm">Clock Algorithm</h2>
<ul>
  <li>그 대신 비슷한 효과를 낼 수 있는 <code class="language-plaintext highlighter-rouge">Clock Algorithm</code>을 사용한다.</li>
  <li>시계에서 초침이 돌아가는 것처럼 포인터가 <code class="language-plaintext highlighter-rouge">page entry</code>를 돌면서 교체할 페이지를 선정하는 것이다.</li>
  <li>한 바퀴 돌면서 <code class="language-plaintext highlighter-rouge">Reference bit</code>가 1이면 그동안 사용된 것으로 보고 0으로 바꾸고 넘어가고 0이면 그동안 사용하지 않은 것으로 간주해 쫓아낸다.<br /><br /></li>
</ul>

<h1 id="page-frame의-allocation">Page Frame의 Allocation</h1>
<ul>
  <li>메모리 참조 명령어 수행시 명령어, 데이터 등 여러 페이지를 동시에 참조해야 하는 경우가 생길 수 있다. 이때 명령어 수행을 위해 최소한 할당되어야 하는 프레임의 수가 있는데 이 동작 <code class="language-plaintext highlighter-rouge">Loop</code>를 구성하는 페이지들은 한꺼번에 <code class="language-plaintext highlighter-rouge">allocate</code>되는 것이 유리하다. 만약 하지 않으면 매 <code class="language-plaintext highlighter-rouge">Loop</code>마다 <code class="language-plaintext highlighter-rouge">page fault</code>가 생겨 매번 디스크에 페이지를 찾으러 가야 하기 때문에 비효율적이고 성능이 떨어질 것이다.</li>
</ul>

<h2 id="allocation-scheme">Allocation Scheme</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Equal allocation</code> : 모든 프로세스에 똑같은 개수 할당</li>
  <li><code class="language-plaintext highlighter-rouge">Proportional allocation</code> : 프로세스 크기에 비례하여 할당</li>
  <li><code class="language-plaintext highlighter-rouge">Priority allocation</code> : 프로세스의 우선순위에 따라 다르게 할당</li>
</ul>

<h2 id="global-replacement">Global replacement</h2>
<ul>
  <li>프레임을 얻기 위해 경쟁하는 형태라 할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">replace</code>시 다른 프로세스에 할당된 프레임을 빼앗아 올 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">FIFO</code>, <code class="language-plaintext highlighter-rouge">LRU</code>, <code class="language-plaintext highlighter-rouge">LFU</code> 등의 알고리즘을 <code class="language-plaintext highlighter-rouge">global replacement</code>로 사용시에 해당</li>
  <li><code class="language-plaintext highlighter-rouge">Working set</code>, <code class="language-plaintext highlighter-rouge">PFF</code> 알고리즘 사용</li>
</ul>

<h2 id="local-replacement">Local replacement</h2>
<ul>
  <li>미리 할당해 놓는 형태이다.</li>
  <li>자신에게 할당된 프레임 내에서만 교체</li>
  <li><code class="language-plaintext highlighter-rouge">FIFO</code>, <code class="language-plaintext highlighter-rouge">LRU</code>, <code class="language-plaintext highlighter-rouge">LFU</code> 등의 알고리즘을 프로세스별로 운영시 해당 <br /><br /></li>
</ul>

<h1 id="thrashing">Thrashing</h1>
<ul>
  <li>프로세스의 원활한 수행에 필요한 최소한의 <code class="language-plaintext highlighter-rouge">page frame</code>수를 할당 받지 못한 경우 발생</li>
  <li><code class="language-plaintext highlighter-rouge">page fault rate</code>이 매우 높아진다.</li>
  <li><code class="language-plaintext highlighter-rouge">CPU</code> 사용률이 낮아짐</li>
  <li><code class="language-plaintext highlighter-rouge">OS</code>는 <code class="language-plaintext highlighter-rouge">MPD (Multiprogramming degree)</code>를 높여야 한다고 판단</li>
  <li>또 다른 프로세스가 시스템에 추가됨(higher MPD)</li>
  <li>프로세스 당 할당된 프레임 수가 더욱 감소된다.</li>
  <li>프로세스는 페이지의 <code class="language-plaintext highlighter-rouge">swap in / swap out</code>으로 바쁘다. 그래서 멈춰 있는 것처럼 보인다. (정상적인 동작 불가)</li>
  <li>그래서 대부분의 시간에 <code class="language-plaintext highlighter-rouge">CPU</code>는 한가하다.(log throughput)</li>
  <li>동시에 메모리에 올라가 있는 프로그램의 수 조절이 필요하다. 이를 위해 사용되는 것이 <code class="language-plaintext highlighter-rouge">Working-set model</code>이다.</li>
</ul>

<h2 id="working-set-model">Working-Set Model</h2>
<ul>
  <li>프로세스는 특정 시간 동안 일정 장소만을 집중적으로 참조한다.</li>
  <li>집중적으로 참조되는 해당 페이지들의 집합을 <code class="language-plaintext highlighter-rouge">localityy set</code>이라 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">locality</code>에 기반하여 프로세스가 일정 시간 동안 원활하게 수행되기 위해 한꺼번에 메모리에 올라와 있어야 하는 페이지들의 집합을 <code class="language-plaintext highlighter-rouge">Working Set</code>이라 정의한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Working Set</code> 모델에서는 프로세스의 <code class="language-plaintext highlighter-rouge">Working Set</code> 전체가 메모리에 올라와 있어야 수행되고 그렇지 않고 부분적으로 있으면 가지고 있던 프레임도 모두 반납 후 <code class="language-plaintext highlighter-rouge">swap out(suspend)</code>된다. 이를 통해 <code class="language-plaintext highlighter-rouge">thrashing</code>을 어느 정도 방지할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">Working Set</code>을 제대로 탐지하기 위해서는 <code class="language-plaintext highlighter-rouge">window size</code>를 잘 결정해야 한다. 너무 작으면 <code class="language-plaintext highlighter-rouge">localiry set</code>을 모두 수용하지 못할 수 있고, 너무 크면 여러 규모의 <code class="language-plaintext highlighter-rouge">locality set</code>을 수용하게 될 것이다.</li>
</ul>

<h2 id="pff-page-fault-frequency-scheme">PFF (Page-Fault Frequency) Scheme</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">page fault rate</code>의 상한값과 하한값을 둔다.</li>
  <li><code class="language-plaintext highlighter-rouge">page fault</code>가 많을수록 많은 페이지 프레임을 할당하고 그렇지 않으면 할당된 프레임 수를 줄인다.</li>
  <li>빈 프레임이 없으면 일부 프로세스를 <code class="language-plaintext highlighter-rouge">swap out</code> 시킨다.<br /><br /></li>
</ul>

<h1 id="page-size의-결정">Page Size의 결정</h1>
<ul>
  <li>페이지의 크기가 너무 작으면 페이지 수가 증가하게 되어 페이지 테이블의 크기가 증가할 것이다.</li>
  <li>작게 쪼개진만큼 너무 필요한 정보만 메모리에 올라와 있게 되어 <code class="language-plaintext highlighter-rouge">page fault</code>의 빈도수가 늘어나 디스크에 접근해야 하는 시간이 늘어날 것이다. 이런 측면에서 볼 때 메모리 이용은 효율적이지만 <code class="language-plaintext highlighter-rouge">locality</code> 활용 측면에서는 좋지 않다.<br /><br /><br /></li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">운영체제 - 이화여자대학교 KOCW 공개강의</a></li>
  <li><a href="https://straw961030.tistory.com/155">스레싱(thrashing)이란 무엇인가</a></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Operating System" /><category term="CS" /><category term="OS" /><category term="VirtualMemory" /><summary type="html"><![CDATA[👀 Demain Paging 실제로 필요할 때 page를 메모리에 올리는 것 왜냐면 프로그램의 대부분의 코드는 (거의 발생하지 않는 치명적인) 오류를 해결하기 위한 코드라 평소에는 쓰지지 않는 부분이 대다수다. 그래서 이걸 다 메모리에 올려 놓으면 메모리 공간만 차지하고 비효율적이다. 그래서 프로세스 동작에 실제로 필요한 page만 메모리에 올리는 것이 효율적이다. 장점 I/O 양의 감소 메모리 사용량 감소 빠른 응답 시간 더 많은 사용자 수용]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 13 - 대분류별 상품목록페이지에서 소분류별 상품 출력하는 기능 구현</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-13/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 13 - 대분류별 상품목록페이지에서 소분류별 상품 출력하는 기능 구현" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-13</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-13/"><![CDATA[<ul>
  <li>작성일 : 2022.05.05</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>

<p align="center"><img src="../../assets/images/unomas_dcate1.png" width="900" /></p>

<ul>
  <li>상품목록페이지에서 소분류를 클릭하면 선택한 소분류별로 모아볼 수 있는 기능을 구현했다.</li>
</ul>

<h2 id="prodpagingjava">ProdPaging.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdPaging</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">prod_category</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>상품목록페이지에서 상품을 출력할 때 DB에서 한 페이지에 보여줄 만큼만 가져와서 출력할 것인데 그럴려면 DB에서 조회시 지정해줘야 할 파라미터값이 많다. <code class="language-plaintext highlighter-rouge">SqlSession</code>의 <code class="language-plaintext highlighter-rouge">selectList()</code>와 같은 메서드를 사용할 때 전달 인자값은 하나만 지정할 수 있기 때문에 둘 이상을 보내려면 <code class="language-plaintext highlighter-rouge">Map</code>을 사용하거나 <code class="language-plaintext highlighter-rouge">VO</code> 객체를 만들어 전달해야 하는데 페이징 처리용 정보는 여러 메서드에서 사용되기 때문에 <code class="language-plaintext highlighter-rouge">VO</code> 객체를 만들었다.</li>
</ul>

<h2 id="productmapperxml">productMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 소분류별로 상품 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getDcateProducts"</span> <span class="na">resultType=</span><span class="s">"ProductVO"</span><span class="nt">&gt;</span>
        SELECT * 
        FROM products 
        WHERE prod_category = #{prod_category}
        LIMIT #{startRow}, #{pageSize}
    <span class="nt">&lt;/select&gt;</span>
    
    <span class="c">&lt;!-- 소분류별 상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getDcateCnt"</span> <span class="na">resultType=</span><span class="s">"Integer"</span><span class="nt">&gt;</span>
        SELECT count(*) 
        FROM products 
        WHERE prod_category = #{prod_category}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>소분류는 소분류를 저장한 테이블에서 <code class="language-plaintext highlighter-rouge">1 - 고구마, 감자, 당근 / 2 - 양파, 대파, 마늘, 배추</code>와 같은 형태로 인덱스 번호를 가지고 저장되어 있다. 그리고 모든 상품은 자기가 속한 소분류의 인덱스 번호를 외래키로 가지고 있다. 그래서 사용자가 화면에 보여지는 소분류에 인덱스 번호를 매핑해 놓고 클릭하면 해당 번호로 상품들을 가져오도록 한다.</li>
  <li>이때 <code class="language-plaintext highlighter-rouge">LIMIT</code> 범위 안의 상품들만 가져오도록 한다.(상품의 개수가 몇 백개, 몇 만개 이상으로 많아졌는데 한 페이지에 그걸 다 출력하기 위해 가져온다면… 페이지는 응답이 없을 것이다…)</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>
	
	<span class="c1">// 소분류별로 분류해서 가져오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 소분류별 상품 개수</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getDcateProducts"</span><span class="o">,</span> <span class="n">pp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getDcateCnt"</span><span class="o">,</span> <span class="n">prod_category</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DAO</code>를 통해 DB에서 상품 정보를 불러온다.</li>
</ul>

<h2 id="productdaotestjava">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">소분류별상품출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ProdPaging</span> <span class="n">pp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPaging</span><span class="o">();</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setStartRow</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setPageSize</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>
		<span class="n">pp</span><span class="o">.</span><span class="na">setProd_category</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="mi">2</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 코드에 넣기 전 테스트를 진행했다. 결과가 잘 나왔기 때문에 다음 단계로 넘어간다.</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
	
	<span class="c1">// 소분류별로 분류해서 가져오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 소분류별 상품 개수</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getDcateList</span><span class="o">(</span><span class="nc">ProdPaging</span> <span class="n">pp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getDcateCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">prod_category</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="n">prod_category</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스도 연결해 준다. 서비스 레이어에서는 DB단과 컨트롤러단을 연결해 주는 역할을 하기 때문에 DB단 테스트가 잘 되었으면 여기서도 별 문제가 없어야 한다. 그런데 DB단에서는 잘 되는데 서비스단에 자꾸 테스트에 실패하는 것이었다. 같은 쿼리문 그대로 쓰는 건데 무슨 일…?</li>
  <li>일단 STS를 껐다 켜 봤는데 갑자기 잘 되었다. 그냥 이클립스 버그였나보다…</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> 
			<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> 
			<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"dcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">dcate_num</span><span class="o">,</span> 
			<span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 페이징 처리에 필요한 정보를 담은 객체 </span>
        <span class="nc">ProdPaging</span> <span class="n">pp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProdPaging</span><span class="o">();</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setCateStart</span><span class="o">(</span><span class="n">cateStart</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setCateEnd</span><span class="o">(</span><span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="c1">// 페이징 처리 작업</span>
        <span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
		
        <span class="kt">int</span> <span class="n">curPage</span> <span class="o">=</span> <span class="n">pageNum</span><span class="o">;</span>
		
        <span class="c1">// 현재 페이지정보를 이용해서 시작 행 정보 계산</span>
        <span class="kt">int</span> <span class="n">startRow</span> <span class="o">=</span> <span class="o">(</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageSize</span><span class="o">;</span>
		
        <span class="c1">// 하단 페이징 처리 //////</span>
        <span class="c1">// 현재 분류별 전체 상품 개수 얻기</span>
        <span class="c1">// dcate_num(소분류) 번호가 0이라면 전체를 불러오는 것이고</span>
        <span class="c1">// 1이상이라면 각각의 소분류만 불러오는 것이다.</span>
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dcate_num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateCnt</span><span class="o">(</span><span class="n">dcate_num</span><span class="o">);</span>
        <span class="o">}</span>
		
        <span class="c1">// 페이지 전체 블록 개수 계산</span>
        <span class="kt">int</span> <span class="n">pageCnt</span> <span class="o">=</span> <span class="n">postCnt</span> <span class="o">/</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="o">((</span><span class="n">postCnt</span> <span class="o">%</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
		
        <span class="c1">// 한 번에 보여줄 페이지 블록 개수</span>
        <span class="kt">int</span> <span class="n">pageBlockCnt</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
		
        <span class="c1">// 시작 페이지 번호 구하기</span>
        <span class="kt">int</span> <span class="n">startBlock</span> <span class="o">=</span> <span class="o">((</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">pageBlockCnt</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageBlockCnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 끝 페이지 블록 번호 구하기</span>
        <span class="kt">int</span> <span class="n">endBlock</span> <span class="o">=</span> <span class="n">startBlock</span> <span class="o">+</span> <span class="n">pageBlockCnt</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">endBlock</span> <span class="o">&gt;</span> <span class="n">pageCnt</span><span class="o">)</span>
            <span class="n">endBlock</span> <span class="o">=</span> <span class="n">pageCnt</span><span class="o">;</span>
		
        <span class="n">pp</span><span class="o">.</span><span class="na">setStartRow</span><span class="o">(</span><span class="n">startRow</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setPageSize</span><span class="o">(</span><span class="n">pageSize</span><span class="o">);</span>
        <span class="n">pp</span><span class="o">.</span><span class="na">setProd_category</span><span class="o">(</span><span class="n">dcate_num</span><span class="o">);</span>
		
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
		
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="n">productList</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="c1">// 소분류 번호가 0이면 전체 목록을 가져오고 아니라면 해당 소분류에 맞는 상품들을 가져온다.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dcate_num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">productList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductPage</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">productList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateList</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="o">}</span>
		
        <span class="c1">// 글 목록 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">productList</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcate_num"</span><span class="o">,</span> <span class="n">dcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
		
        <span class="c1">// 페이지 처리 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageCnt"</span><span class="o">,</span> <span class="n">pageCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageBlockCnt"</span><span class="o">,</span> <span class="n">pageBlockCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startBlock"</span><span class="o">,</span> <span class="n">startBlock</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"endBlock"</span><span class="o">,</span> <span class="n">endBlock</span><span class="o">);</span>
		
        <span class="n">model</span><span class="o">.</span><span class="na">addAllAttributes</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 컨트롤러로 와서 아까 작업했던 것들을 연결시켜 준다.</li>
  <li>파라미터로 받은 페이지 정보를 이용해서 현재 페이지에 표시되어야 할 상품 목록을 구해 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한다.</li>
  <li>대분류와 소분류별로 출력할 때 필요한 파라미터값들도 함께 저장해 뷰 페이지에서 다음 목록을 보여주어야 할 때 사용할 수 있도록 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">/product/product_list?cateStart=4&amp;cateEnd=6&amp;topcate_num=2&amp;pageNum=1&amp;dcate_num=0</code></li>
  <li>상품목록페이지에서 대소분류별 출력과 페이징 처리에 필요한 정보들을 <code class="language-plaintext highlighter-rouge">GET</code> 방식으로 파라미터를 넘겨주도록 했다. 그래서 새로운 페이지 호출이 있으면 이 파라미터들을 가지고 컨트롤러로 이동해 DB에서 목록을 불러온 다음 뷰 페이지로 이동하는 것이다.<br /><br /><br /></li>
</ul>

<h1 id="구현하며-했던-고민">구현하며 했던 고민</h1>
<ul>
  <li>이 부분을 구현하면서 상품목록페이지 내에서 소분류를 클릭하면 비동기 방식으로 목록을 가져와서 보여줄 것인지 지금 구현한 방식처럼 동기식으로 목록을 가져올 것인지 좀 고민을 하며 마켓컬리, 쿠팡과 같은 사이트들을 참고했다.</li>
  <li>마켓컬리는 비동기 방식, 쿠팡은 동기 방식이었는데 처음엔 마켓컬리처럼 비동기 방식으로 소분류를 보여주고 싶었지만 그러려면 지금 내가 알고 있는 기술 중에서는 <code class="language-plaintext highlighter-rouge">ajax</code>를 써야 했다.</li>
</ul>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"vo"</span><span class="na"> items=</span><span class="s">"</span><span class="si">${</span><span class="n">productList</span> <span class="si">}</span><span class="s">"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-4 col-sm-6"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"product-item"</span> <span class="na">id=</span><span class="s">"productItem"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pi-pic"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"product_detail"</span><span class="nt">&gt;</span> 
                    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"${path}/resources/img/product-single/product_vegi01.jpeg"</span> <span class="na">alt=</span><span class="s">""</span><span class="nt">&gt;</span>
                <span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;ul&gt;</span>
                    <span class="c">&lt;!-- 카트담기 버튼 --&gt;</span>
                    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"w-icon active"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"icon_bag_alt"</span><span class="nt">&gt;&lt;/i&gt;&lt;/a&gt;</span>
                    <span class="nt">&lt;/li&gt;</span>
                <span class="nt">&lt;/ul&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pi-text"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;h5&gt;</span>${vo.prod_name }<span class="nt">&lt;/h5&gt;</span>
                <span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"product-price"</span> <span class="na">id=</span><span class="s">"prod${it.index }"</span><span class="nt">&gt;</span>
                    ${vo.prod_price }원
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/c:forEach&gt;</span>
</code></pre></div></div>

<ul>
  <li>하지만 <code class="language-plaintext highlighter-rouge">ajax</code>로 가져오게 되면 상품 목록을 자바스크립트로 화면에 뿌려줘야 했는데 기존에 상품목록 출력 부분을 구현한 방식은 위와 같이 컨트롤러에서 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한 정보들을 <code class="language-plaintext highlighter-rouge">JSTL</code>로 읽어와 출력하는 방식이었다. 그래서 <code class="language-plaintext highlighter-rouge">ajax</code>로 하려면 상품목록 출력 방식을 다 새로 작성해야 했다. 이렇게 할 시간은 없기 때문에 비동기 방식은 포기하고 쿠팡을 참고해 동기 방식으로 소분류별로 모아서 보여주는 방식을 택했다.</li>
  <li>이번 프로젝트 설계 시에는 상품 목록 페이지에서 카테고리별로 어떻게 보여줄 것이고, 또 정렬 기준별로는 파라미터를 어떻게 받아와서 어떤 통신 방식으로 보여줄 지 상세한 설계를 하지 않고 시작했기 때문에 나중에는 기존에 짜여진 틀 내에서만 구현이 가능한, 한마디로 구현 가능한 선택지가 줄어들게 되는 부분들이 있었다. 설계를 열심히 하고 시작했다고 생각했는데 아직 배울 것이 많이 남았다는 생각이 든다. 다음엔 더 철저하게 설계하고 시작하자!<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-15</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.05 작성자 : 황유진]]></summary></entry><entry><title type="html">Python) BOJ 14502. 연구소</title><link href="http://localhost:4000/boj/boj14502-py/" rel="alternate" type="text/html" title="Python) BOJ 14502. 연구소" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj14502-py</id><content type="html" xml:base="http://localhost:4000/boj/boj14502-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/14502">https://www.acmicpc.net/problem/14502</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 512 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.</p>
  </li>
  <li>
    <p>연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다.</p>
  </li>
  <li>
    <p>일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.</p>
  </li>
  <li>
    <p>벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.</p>
  </li>
  <li>
    <p>연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.<br /><br /></p>
  </li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>
    <p>첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)</p>
  </li>
  <li>
    <p>둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.</p>
  </li>
  <li>
    <p>빈 칸의 개수는 3개 이상이다.<br /><br /></p>
  </li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>‘이것이 취업을 위한 코딩테스트다 with 파이썬’을 참고해서 <code class="language-plaintext highlighter-rouge">DFS</code>로 임의의 위치에 벽을 3개 세웠을 때 안전영역 넓이의 최대값을 구하는 방식으로 풀었다.</li>
  <li>이 문제를 풀기 위한 키포인트는 벽을 3개 세웠을 때의 경우의 수를 모두 탐색하는 것이다. 벽의 위치에 따라 안전영역의 넓이가 달라질텐데, 그 때마다 안전영역의 넓이를 계산해 최대값을 찾아야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">DFS</code>로 완전탐색을 실시한다.<br /><br /></li>
</ul>

<h1 id="전체-코드">전체 코드</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">tmp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">virus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">virus</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">getScore</span><span class="p">():</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">score</span>

<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">result</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="c1"># 울타리가 3개 설치된 경우 임시배열에 복사
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

        <span class="c1"># 각 바이러스 위치에서 바이러스 전파
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                    <span class="n">virus</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="n">result</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">getScore</span><span class="p">())</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">cnt</span> <span class="o">-=</span> <span class="mi">1</span>

<span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="코드-분석">코드 분석</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># tmp: 벽 설치 후 바이러스가 퍼진 것을 시뮬레이션 할 배열 
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="c1"># 상하좌우 방향 
</span><span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="c1"># 결과값 
</span><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<ul>
  <li>문제 풀이에 필요한 입력을 받는 부분이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">virus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">virus</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DFS</code>로 바이러스를 퍼뜨리는 메서드이다.</li>
  <li>상하좌우 주변에 바이러스를 퍼뜨릴 수 있으면 퍼뜨린 후 자기자신을 재귀호출한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getScore</span><span class="p">():</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">score</span>
</code></pre></div></div>

<ul>
  <li>안전영역의 넓이를 구하는 메서드이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">result</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="c1"># 울타리가 3개 설치된 경우 임시배열에 복사
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

        <span class="c1"># 각 바이러스 위치에서 바이러스 전파
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                    <span class="n">virus</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="c1"># 안전영역의 최대값 구하기 
</span>        <span class="n">result</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">getScore</span><span class="p">())</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># 울타리가 설치 가능하면 설치한 후 재귀호출한다.
</span>                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="c1"># 울타리를 3개 모두 설치한 경우의 안전영역을 계산하고 나왔으면
</span>                <span class="c1"># 다음 탐색을 위해 현재위치의 울타리를 없앤다.
</span>                <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">cnt</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div></div>

<ul>
  <li>울타리를 3개 설치해 보고 각 경우마다 바이러스를 퍼뜨려본다. 그 다음 안전영역의 넓이를 구해서 최대값으로 갱신한다.</li>
  <li>재귀함수이기 때문에 무한루프에 빠지지 않도록 조건을 걸어주어야 한다. 벽(cnt)의 개수가 3개가 되면 문제의 조건대로 벽을 모두 세운 것이기 때문에 이 상태에서 바이러스를 퍼뜨려 본 다음에 안전영역의 넓이를 구한다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 3584 ms</li>
  <li>메모리 : 142352 KB<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No14502" /><category term="DFS" /><category term="Graph" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/14502 제한 시간 제한 : 2 초 메모리 제한 : 512 MB]]></summary></entry><entry><title type="html">Python) BOJ 18352. 특정 거리의 도시 찾기</title><link href="http://localhost:4000/boj/boj18352-py/" rel="alternate" type="text/html" title="Python) BOJ 18352. 특정 거리의 도시 찾기" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/boj/boj18352-py</id><content type="html" xml:base="http://localhost:4000/boj/boj18352-py/"><![CDATA[<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/18352">https://www.acmicpc.net/problem/18352</a><br /><br /></li>
</ul>

<h1 id="제한">제한</h1>
<hr />

<ul>
  <li>시간 제한 : 2 초</li>
  <li>메모리 제한 : 256 MB<br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>
    <p>어떤 나라에는 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재한다. 모든 도로의 거리는 1이다.</p>
  </li>
  <li>
    <p>이 때 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 K인 모든 도시들의 번호를 출력하는 프로그램을 작성하시오. 또한 출발 도시 X에서 출발 도시 X로 가는 최단 거리는 항상 0이라고 가정한다.</p>
  </li>
  <li>
    <p>예를 들어 N=4, K=2, X=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.</p>
  </li>
</ul>

<p align="center"><img src="https://upload.acmicpc.net/a5e311d7-7ce4-4638-88a5-3665fb4459e5/-/preview/" width="400" /></p>

<ul>
  <li>이 때 1번 도시에서 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 2인 도시는 4번 도시 뿐이다.  2번과 3번 도시의 경우, 최단 거리가 1이기 때문에 출력하지 않는다.<br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>첫째 줄에 도시의 개수 N, 도로의 개수 M, 거리 정보 K, 출발 도시의 번호 X가 주어진다. (2 ≤ N ≤ 300,000, 1 ≤ M ≤ 1,000,000, 1 ≤ K ≤ 300,000, 1 ≤ X ≤ N) 둘째 줄부터 M개의 줄에 걸쳐서 두 개의 자연수 A, B가 공백을 기준으로 구분되어 주어진다. 이는 A번 도시에서 B번 도시로 이동하는 단방향 도로가 존재한다는 의미다. (1 ≤ A, B ≤ N) 단, A와 B는 서로 다른 자연수이다.<br /><br /></li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>
    <p>X로부터 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 K인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.</p>
  </li>
  <li>
    <p>이 때 도달할 수 있는 도시 중에서, 최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력한다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>다익스트라 알고리즘을 이용해 출발점에서 각 도시까지의 최단거리를 구한 뒤 최단거리가 k와 같은 도시를 차례대로 출력했다.<br /><br /></li>
</ul>

<h1 id="전체-코드">전체 코드</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">heapq</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>
<span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

<span class="c1"># 최단거리를 저장할 테이블
# 처음에는 모든 도시의 거리를 무한대로 초기화한다.
</span><span class="n">distance</span> <span class="o">=</span> <span class="p">[</span><span class="n">INF</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">))</span>
    <span class="n">distance</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">dist</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">now</span><span class="p">]:</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>

<span class="n">dijkstra</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
        <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">ans</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="코드-분석">코드 분석</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">heapq</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">))</span> <span class="c1"># (거리, 정점)
</span>    <span class="n">distance</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<ul>
  <li>우선순위 큐를 사용해 현위치에서 최단거리가 가장 짧은 노드를 찾을 것이라서 <code class="language-plaintext highlighter-rouge">heapq</code>를 임포트한다.</li>
  <li>우선순위 큐에는 거리를 기준으로 오름차순 정렬을 할 수 있게 거리가 맨 앞으로 오는 튜플을 만들어 저장한다.</li>
  <li>시작점과의 거리는 0으로 저장한 후 최단거리를 기록하는 테이블의 시작점 인덱스에도 0을 기록해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">dist</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>

        <span class="c1"># 이미 처리된 정점이면 pass
</span>        <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="c1"># 현재 정점과 연결된 정점들을 탐색한다.
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">now</span><span class="p">]:</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>큐의 원소를 하나씩 꺼내서 최단거리를 계산하는 작업을 시작한다.</li>
  <li>만약 최단거리 테이블에 저장된 현재 노드까지의 거리가 방금 큐에서 꺼낸 거리보다 짧으면 이미 최단거리를 찾은 것이니까 더 확인해 볼 필요가 없다.</li>
  <li>그렇지 않고 최단거리를 갱신해주어야 할 필요가 있는 정점이라면 현재 정점과 연결된 정점까지의 거리를 탐색한다.</li>
  <li>이 문제에서 모든 정점간의 거리는 1이니까 현재 정점에서 다음 정점까지의 거리를 구하려면 시작점에서 현재 정점까지의 거리 <code class="language-plaintext highlighter-rouge">dist</code>에 1을 더해주면 된다.</li>
  <li>만약 새로 구한 거리가 최단거리 테이블에 있는 값보다 적으면 갱신한 후 우선순위 큐에 삽입한다.</li>
  <li>이 과정을 큐가 빌 때까지 반복한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dijkstra</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
        <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>다익스트라 메서드를 호출해서 <code class="language-plaintext highlighter-rouge">x</code>에서부터 모든 도시까지의 최단거리를 구한다.</li>
  <li>우선순위 큐 <code class="language-plaintext highlighter-rouge">ans</code>를 만들어 최단거리가 <code class="language-plaintext highlighter-rouge">k</code>와 같은 정점 목록을 저장한다.</li>
  <li>문제에서 도시 번호가 작은 순서대로 출력하라고 했기 때문에 최소힙으로 만들었다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="ow">not</span> <span class="n">ans</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>만약 <code class="language-plaintext highlighter-rouge">ans</code>가 비어 있으면 최단거리가 <code class="language-plaintext highlighter-rouge">k</code>인 도시가 존재하지 않는 것이니까 <code class="language-plaintext highlighter-rouge">-1</code>을 리턴한다.</li>
  <li>그렇지 않으면 <code class="language-plaintext highlighter-rouge">ans</code>를 순회하면서 한 줄에 하나씩 출력하면 된다.<br /><br /></li>
</ul>

<h1 id="결과">결과</h1>
<hr />

<ul>
  <li>시간 : 2784 ms</li>
  <li>메모리 : 107284 KB<br /><br /></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><category term="No18352" /><category term="Dijkstra" /><category term="Graph" /><category term="Python" /><summary type="html"><![CDATA[문제 링크 https://www.acmicpc.net/problem/18352 제한 시간 제한 : 2 초 메모리 제한 : 256 MB]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 9 - 카테고리별로 해당되는 상품 목록 출력하기" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-09</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-09/"><![CDATA[<ul>
  <li>작성일 : 2022.05.03</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>상품 목록페이지를 카테고리별로 상품을 분류해 보여줄 수 있도록 만들었다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 상품 상위 카테고리 이름 가져오기</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>먼저 <code class="language-plaintext highlighter-rouge">DAO</code> 객체를 만드는데 결합도를 낮추기 위해 인터페이스를 만든 다음에 이를 구현하는 클래스를 만들었다.</li>
</ul>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.persistence</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getTopCateName"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 만든 인터페이스를 구현하는 클래스에서 세부 동작을 구현한다.</li>
  <li><code class="language-plaintext highlighter-rouge">SqlSession</code> 생성 테스트는 저번 포스트에서 진행한 결과 성공적이었기 때문에 이를 이용해 DB에 접근하는 동작을 구현한다.</li>
  <li>먼저 상품 목록 페이지의 상단에 출력할 대분류 이름을 테이블에서 가져온다.</li>
</ul>

<h2 id="productmapperxml">ProductMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 상품 상위 카테고리 이름 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getTopCateName"</span> <span class="na">resultType=</span><span class="s">"String"</span><span class="nt">&gt;</span>
        SELECT topcate_name 
        FROM top_category  
        WHERE topcate_num = #{topcate_num}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>매퍼로 이동해서 <code class="language-plaintext highlighter-rouge">SQL</code> 쿼리문을 작성한다.</li>
</ul>

<h2 id="productdaotestjava---실제-구현-전에-dao가-제대로-동작하는-지-테스트">ProductDAOTest.java - 실제 구현 전에 DAO가 제대로 동작하는 지 테스트!</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DAO생성테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"dao : "</span> <span class="o">+</span> <span class="n">dao</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상위카테고리출력테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트 클래스를 생성해서 아까 만든 <code class="language-plaintext highlighter-rouge">DAO</code>의 동작여부를 테스트한다.</li>
  <li>결과는 성공적!</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="c1">// 상위 카테고리 이름 가져오는 메서드</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>컨트롤러와 DBMS의 결합도를 낮춰줄 서비스 계층을 만든다. 이것 또한 인터페이스를 만든 다음 구현하는 클래스를 만든다.</li>
</ul>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.domain.ProductVO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.april.unomas.persistence.ProductDAO</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTopCateName</span><span class="o">(</span><span class="kt">int</span> <span class="n">topcate_num</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>아까 <code class="language-plaintext highlighter-rouge">DAO</code>에서 만들었던 메서드를 호출해 결과값을 리턴한다.</li>
</ul>

<h2 id="productservicetestjava">ProductServiceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductServiceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">상품상위카테고리이름</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스 또한 테스트를 진행했다. 동작 잘 됨!</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<ul>
  <li>DB에 접근하는 동작의 테스트가 끝났으니까 이제 컨트롤러에서 뷰 페이지로 연결시켜 준다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.april.unomas.service.ProductService</span><span class="o">;</span>


<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 해당 카테고리의 상품 전체 목록 </span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductList</span><span class="o">());</span>
        
        <span class="c1">// 대분류 이름</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        
        <span class="c1">// 소분류 이름 리스트</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>DB에서 가져온 정보를 뷰 페이지에 출력하기 위해 컨트롤러에서 이동 전에 <code class="language-plaintext highlighter-rouge">Model</code> 객체에 저장한다.</li>
  <li>해당 카테고리의 전체 상품을 가져오는 메서드와 소분류 이름 리스트를 가져오는 메서드도 만들었는데 위에서 작성한 것과 같은 과정을 거쳐 만들었기 때문에 생략했다. (글이 너무 길어져서…)</li>
  <li><code class="language-plaintext highlighter-rouge">topcate_num</code> 파라미터값으로 대분류를 불러온 다음 그에 해당하는 소분류와 상품들을 출력할 것이다.</li>
</ul>

<h2 id="productlistjsp">ProductList.jsp</h2>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"categoryBox"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>${topcate }<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"categoryList"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category0"</span> 
            <span class="na">onclick=</span><span class="s">"changeSort(0, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> 전체보기<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;c:forEach </span><span class="na">var=</span><span class="s">"cate"</span><span class="na"> items=</span><span class="s">"</span><span class="si">${</span><span class="n">dcateList</span> <span class="si">}</span><span class="s">"</span><span class="na"> varStatus=</span><span class="s">"it"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"category"</span> <span class="na">id=</span><span class="s">"category${it.index + 1 }"</span>
                <span class="na">onclick=</span><span class="s">"changeSort(${it.index + 1 }, ${fn:length(dcateList) });"</span><span class="nt">&gt;</span> ${cate }<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        <span class="nt">&lt;/c:forEach&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>뷰 페이지에서는 <code class="language-plaintext highlighter-rouge">EL</code> 표현식을 사용해 출력한다.</li>
</ul>

<p align="center"><img src="../../assets/images/unomas_prodListAddDb.png" /></p>

<ul>
  <li>그러면 이제 손으로 일일이 타이핑하지 않아도 DB 정보에 맞춰 출력된다! 뿌-듯 😄</li>
  <li>이제 다음에 해야할 것은 헤더에 있는 메뉴에서 상품 목록 페이지를 호출했을 때 각 대분류별로 보여지게 하는 것과 상품 하나를 클릭하면 상세 페이지로 연결되는 것을 구현하는 것이다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-17</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.03 작성자 : 황유진]]></summary></entry><entry><title type="html">JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 10 - 상품목록 페이징 처리</title><link href="http://localhost:4000/uno%20mas/uno-mas-dev-log-10/" rel="alternate" type="text/html" title="JAVA Spring) 1인가구를 위한 쇼핑몰 Uno más 개발일지 10 - 상품목록 페이징 처리" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/uno%20mas/uno-mas-dev-log-10</id><content type="html" xml:base="http://localhost:4000/uno%20mas/uno-mas-dev-log-10/"><![CDATA[<ul>
  <li>작성일 : 2022.05.03</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>

<p align="center"><img src="../../assets/images/unomas_prodListPaging1.png" width="900" /></p>

<ul>
  <li>상품목록페이지에서 한 페이지에 일정 개수의 상품들을 보여주고, 더 많은 상품은 다음 페이지에서 보여줄 수 있게 하는 페이징처리를 구현했다.</li>
</ul>

<h2 id="productmapperxml">productMapper.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 대분류별 상품 개수 가져오기 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getProdCnt"</span> <span class="na">resultType=</span><span class="s">"Integer"</span><span class="nt">&gt;</span>
        SELECT count(*) 
        FROM products AS p 
        JOIN detail_category AS d ON p.prod_category = d.dcate_num 
        JOIN top_category AS t ON d.dcate_num = t.topcate_num 
        WHERE p.prod_category BETWEEN #{cateStart} AND #{cateEnd}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>대분류별 상품 개수를 가져오는 쿼리문이다.</li>
  <li>하나의 대분류에는 여러 개의 소분류가 있고 이들은 각자의 테이블에서 관리된다. 소분류는 대분류의 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호를 참조한다. 그리고 각 상품은 소분류 테이블의 <code class="language-plaintext highlighter-rouge">PK</code>인 인덱스 번호를 참조한다. 그래서 각 대분류별로 소분류의 인덱스 범위를 지정해 준 다음에 그걸 기준으로 상품 테이블에서 해당 상품들을 찾아오도록 했다.</li>
</ul>

<h2 id="productdaojava">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 대분류별 상품 개수 가져오기</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;();</span>
		
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getProdCnt"</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>먼저 대분류별 전체 상품의 개수를 구해온다.</li>
</ul>

<h2 id="productdaotestjava">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">대분류별상품개수가져오기</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 코드에 넣기 전 테스트를 진행했다. 결과가 잘 나왔기 때문에 다음 단계로 넘어간다.</li>
</ul>

<h2 id="productmapperxml-1">productMapper.xml</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">mapper</span> <span class="n">namespace</span><span class="o">=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">&gt;</span>
    <span class="o">&lt;!--</span> <span class="n">상위</span> <span class="n">카테고리별</span> <span class="n">한</span> <span class="n">페이지에</span> <span class="n">표시할</span> <span class="n">만큼만</span> <span class="n">가져오기</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="n">select</span> <span class="n">id</span><span class="o">=</span><span class="s">"getListOnPage"</span> <span class="n">resultType</span><span class="o">=</span><span class="s">"ProductVO"</span><span class="o">&gt;</span>
        <span class="no">SELECT</span> <span class="o">*</span> 
        <span class="no">FROM</span> <span class="n">products</span> <span class="no">AS</span> <span class="n">p</span> 
        <span class="no">JOIN</span> <span class="n">detail_category</span> <span class="no">AS</span> <span class="n">d</span> <span class="no">ON</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_category</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="na">dcate_num</span> 
        <span class="no">JOIN</span> <span class="n">top_category</span> <span class="no">AS</span> <span class="n">t</span> <span class="no">ON</span> <span class="n">d</span><span class="o">.</span><span class="na">dcate_num</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">topcate_num</span> 
        <span class="no">WHERE</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_category</span> <span class="no">BETWEEN</span> <span class="err">#</span><span class="o">{</span><span class="n">cateStart</span><span class="o">}</span> <span class="no">AND</span> <span class="err">#</span><span class="o">{</span><span class="n">cateEnd</span><span class="o">}</span> 
        <span class="no">ORDER</span> <span class="no">BY</span> <span class="n">p</span><span class="o">.</span><span class="na">prod_regdate</span> <span class="n">desc</span> <span class="no">LIMIT</span> <span class="err">#</span><span class="o">{</span><span class="n">startRow</span><span class="o">},</span> <span class="err">#</span><span class="o">{</span><span class="n">pageSize</span><span class="o">}</span>
    <span class="o">&lt;/</span><span class="n">select</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">mapper</span><span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>다음으로는 한 페이지에 표시할 만큼만 상품 목록을 가져온다.</li>
  <li>지정된 소분류 인덱스 범위 내에서 페이지 하나에 표시할 개수만큼만 가져오는 쿼리문을 작성했다.</li>
</ul>

<h2 id="productdaojava-1">ProductDAO.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="c1">// 상위 카테고리별 한 페이지에 표시할 만큼만 상품 목록 불러오기</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productdaoimpljava-1">ProductDAOImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOImpl</span> <span class="kd">implements</span> <span class="nc">ProductDAO</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAMESPACE</span> <span class="o">=</span> <span class="s">"com.unomas.mapper.ProductMapper"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;();</span>
		
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startRow"</span><span class="o">,</span> <span class="n">startRow</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageSize"</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="no">NAMESPACE</span> <span class="o">+</span> <span class="s">".getListOnPage"</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>쿼리문이 다소 복잡했으므로 이것 또한 잘 되는지 테스트를 진행했다.</li>
</ul>

<h2 id="productdaotestjava-1">ProductDAOTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDAOTest</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductDAO</span> <span class="n">dao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductDAOTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">페이지개수만큼가져오기테스트</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">dao</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span> <span class="o">+</span> <span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p align="center"><img src="../../assets/images/unomas_prodListPaging2.png" width="800" /></p>

<ul>
  <li>의도 했던대로 잘 가져오니까 다음 단계로 진행한다.</li>
</ul>

<h2 id="productservicejava">ProductService.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="c1">// 상위 카테고리별 한 페이지에 표시할 만큼만 상품 목록 불러오기</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
	
	<span class="c1">// 대분류별 상품 개수 가져오기</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="productserviceimpljava">ProductServiceImpl.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="nc">ProductService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductVO</span><span class="o">&gt;</span> <span class="nf">getProductList</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="n">startRow</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getProductCnt</span><span class="o">(</span><span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>서비스 클래스도 연결해 준다. 혹시나 해서 이 부분도 테스트를 진행해 봤는데 잘 된다.</li>
</ul>

<h2 id="productcontrollerjava">ProductController.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">ProductService</span> <span class="n">service</span><span class="o">;</span>
	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">ProductController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"product/product_list"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">// /shop -&gt; /product_list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">shopGET</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">topcate_num</span><span class="o">,</span> 
            <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateStart</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">cateEnd</span><span class="o">,</span> 
            <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageNum</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 페이징 처리 작업</span>
        <span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
		
        <span class="kt">int</span> <span class="n">curPage</span> <span class="o">=</span> <span class="n">pageNum</span><span class="o">;</span>
		
        <span class="c1">// 현재 페이지정보를 이용해서 시작 행 정보 계산</span>
        <span class="kt">int</span> <span class="n">startRow</span> <span class="o">=</span> <span class="o">(</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 하단 페이징 처리 //////</span>
        <span class="c1">// 현재 대분류의 전체 상품 개수 얻기</span>
        <span class="kt">int</span> <span class="n">postCnt</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductCnt</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
		
        <span class="c1">// 페이지 전체 블록 개수 계산</span>
        <span class="kt">int</span> <span class="n">pageCnt</span> <span class="o">=</span> <span class="n">postCnt</span> <span class="o">/</span> <span class="n">pageSize</span> <span class="o">+</span> <span class="o">((</span><span class="n">postCnt</span> <span class="o">%</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
		
        <span class="c1">// 한 번에 보여줄 페이지 블록 개수</span>
        <span class="kt">int</span> <span class="n">pageBlockCnt</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
		
        <span class="c1">// 시작 페이지 번호 구하기</span>
        <span class="kt">int</span> <span class="n">startBlock</span> <span class="o">=</span> <span class="o">((</span><span class="n">curPage</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">pageBlockCnt</span><span class="o">)</span> <span class="o">*</span> <span class="n">pageBlockCnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
        <span class="c1">// 끝 페이지 블록 번호 구하기</span>
        <span class="kt">int</span> <span class="n">endBlock</span> <span class="o">=</span> <span class="n">startBlock</span> <span class="o">+</span> <span class="n">pageBlockCnt</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">endBlock</span> <span class="o">&gt;</span> <span class="n">pageCnt</span><span class="o">)</span>
            <span class="n">endBlock</span> <span class="o">=</span> <span class="n">pageCnt</span><span class="o">;</span>
		
		
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
		
        <span class="c1">// 글 목록 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"productList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getProductList</span><span class="o">(</span><span class="n">cateStart</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">,</span> <span class="n">startRow</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateStart"</span><span class="o">,</span> <span class="n">cateStart</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"cateEnd"</span><span class="o">,</span> <span class="n">cateEnd</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate_num"</span><span class="o">,</span> <span class="n">topcate_num</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topcate"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getTopCateName</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dcateList"</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">getDcateNames</span><span class="o">(</span><span class="n">topcate_num</span><span class="o">));</span>
    
        <span class="c1">// 페이징 처리 정보 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"postCnt"</span><span class="o">,</span> <span class="n">postCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageNum"</span><span class="o">,</span> <span class="n">pageNum</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageCnt"</span><span class="o">,</span> <span class="n">pageCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"pageBlockCnt"</span><span class="o">,</span> <span class="n">pageBlockCnt</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"startBlock"</span><span class="o">,</span> <span class="n">startBlock</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"endBlock"</span><span class="o">,</span> <span class="n">endBlock</span><span class="o">);</span>
		
        <span class="n">model</span><span class="o">.</span><span class="na">addAllAttributes</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
		
        <span class="k">return</span> <span class="s">"product/productList"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 컨트롤러로 와서 아까 작업했던 것들을 연결시켜 준다.</li>
  <li>파라미터로 받은 페이지 정보를 이용해서 현재 페이지에 표시되어야 할 상품 목록을 구해 <code class="language-plaintext highlighter-rouge">Model</code>에 저장한다.</li>
  <li>
    <p>뷰 페이지에서 페이지 번호를 눌렀을 때 이동해서 새로운 상품 목록을 보여줄 수 있도록 페이징 처리 정보도 저장해서 넘겨준다.</p>
  </li>
  <li>뷰 페이지를 실행해서 동작시켜보면 한 페이지당 9개씩 보여주고 9개가 넘어가면 새로운 페이지를 생성한다. 다음 페이지로 넘어가면 앞 페이지에서 출력했던 상품들을 제외한 나머지를 출력한다.<br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-17</code></li>
</ul>]]></content><author><name>Yujin Hwang</name><email>miro7923@gmail.com</email></author><category term="Uno mas" /><category term="Project" /><category term="UnoMas" /><category term="Log" /><summary type="html"><![CDATA[작성일 : 2022.05.03 작성자 : 황유진]]></summary></entry></feed>