I"(<h1 id="문제-링크">문제 링크</h1>
<hr />

<ul>
  <li><a href="https://www.acmicpc.net/problem/5430">https://www.acmicpc.net/problem/5430</a><br /><br /></li>
</ul>

<h1 id="문제">문제</h1>
<hr />

<ul>
  <li>선영이는 주말에 할 일이 없어서 새로운 언어 AC를 만들었다. AC는 정수 배열에 연산을 하기 위해 만든 언어이다.</li>
  <li>
    <p>이 언어에는 두 가지 함수 R(뒤집기)과 D(버리기)가 있다.<br /><br /></p>
  </li>
  <li>
    <p>함수 R은 배열에 있는 수의 순서를 뒤집는 함수이고, D는 첫 번째 수를 버리는 함수이다. 배열이 비어있는데 D를 사용한 경우에는 에러가 발생한다.<br /><br /></p>
  </li>
  <li>함수는 조합해서 한 번에 사용할 수 있다. 예를 들어, “AB”는 A를 수행한 다음에 바로 이어서 B를 수행하는 함수이다.</li>
  <li>
    <p>예를 들어, “RDD”는 배열을 뒤집은 다음 처음 두 수를 버리는 함수이다.<br /><br /></p>
  </li>
  <li>배열의 초기값과 수행할 함수가 주어졌을 때, 최종 결과를 구하는 프로그램을 작성하시오. <br /><br /></li>
</ul>

<h1 id="입력">입력</h1>
<hr />

<ul>
  <li>
    <p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. T는 최대 100이다.<br /><br /></p>
  </li>
  <li>
    <p>각 테스트 케이스의 첫째 줄에는 수행할 함수 p가 주어진다. p의 길이는 1보다 크거나 같고, 100,000보다 작거나 같다.<br /><br /></p>
  </li>
  <li>
    <p>다음 줄에는 배열에 들어있는 수의 개수 n이 주어진다. (0 ≤ n ≤ 100,000)<br /><br /></p>
  </li>
  <li>
    <p>다음 줄에는 [x1,…,xn]과 같은 형태로 배열에 들어있는 정수가 주어진다. (1 ≤ xi ≤ 100)<br /><br /></p>
  </li>
  <li>
    <p>전체 테스트 케이스에 주어지는 p의 길이의 합과 n의 합은 70만을 넘지 않는다.<br /><br /></p>
  </li>
</ul>

<h1 id="출력">출력</h1>
<hr />

<ul>
  <li>각 테스트 케이스에 대해서, 입력으로 주어진 정수 배열에 함수를 수행한 결과를 출력한다. 만약, 에러가 발생한 경우에는 error를 출력한다. <br /><br /><br /></li>
</ul>

<h1 id="-풀이">👀 풀이</h1>
<hr />

<ul>
  <li>처음엔 스택과 큐를 이용해서</li>
  <li>
    <p>큐에 원래 순서대로 숫자를 집어넣고 뒤집어야 하면 스택에 push했다가 다시 큐로 pop 하는 방식을 썼는데 수의 최대 개수가 10만개라 예상대로 시간초과가 발생했다.<br /><br /></p>
  </li>
  <li>
    <p>그래서 질문게시판을 찾아보다 덱을 사용하는 것을 보고 컨테이너를 덱으로 바꿨다.<br /><br /></p>
  </li>
  <li>그리고 R 연산이 짝수번이면 뒤집었다 다시 뒤집는 것이기 때문에 결국 뒤집지 않은 것이랑 같다.</li>
  <li>그래서 연속된 R의 개수를 세어서 홀수번이면 덱의 맨 뒤에서 D 연산을 수행하고</li>
  <li>
    <p>연속된 R이 짝수번이면 맨 앞에서 D 연산을 수행하도록 하였다.<br /><br /></p>
  </li>
  <li>
    <p>그 후 뒤집힌 상태라면 덱의 맨 뒤에서부터 pop연산을 수행하고 뒤집히지 않았다면 덱의 맨 앞에서부터 pop연산을 수행했다.<br /><br /></p>
  </li>
  <li>
    <p>하지만 덱에 들어있는 숫자들을 정답 형태로 만들 때 단순 string에 더하는 형태로 만들었더니 가비지 컬렉션이 많이 발생해서… 거기서 최적화가 되지 않아서 또 시간초과를 받았다.<br /><br /></p>
  </li>
  <li>그래서 StringBuilder로 바꾼 뒤 정답 형태의 문자열로 만드는 부분을 좀 더 최적화 해 주었더니 932ms에 통과할 수 있었다…<br /><br /></li>
</ul>

<script src="https://gist.github.com/miro7923/16948d6ee681d1724d75832447627534.js"></script>

:ET