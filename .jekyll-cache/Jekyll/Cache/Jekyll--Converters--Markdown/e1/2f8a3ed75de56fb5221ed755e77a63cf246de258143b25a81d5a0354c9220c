I"+$<h1 id="-데이터베이스-시스템dbs--database-system이란">👀 데이터베이스 시스템(DBS : Database System)이란?</h1>
<ul>
  <li>데이터베이스에 데이터를 저장하고 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템</li>
  <li>즉 데이터베이스 관리 시스템 전체를 아우르는 용어이다.<br /><br /><br /></li>
</ul>

<h1 id="데이터베이스의-구조">데이터베이스의 구조</h1>
<h2 id="스키마schema">스키마(schema)</h2>
<ul>
  <li>데이터베이스에 저장되는 데이터 구조와 제약조건, 데이터 타입 등을 정의한 것</li>
  <li>전체적인 뼈대라 할 수 있다.</li>
</ul>

<h2 id="인스턴스instance">인스턴스(instance)</h2>
<ul>
  <li>스키마에 따라 데이터베이스에 실제로 저장된 값</li>
  <li>그래서 스키마는 변하지 않지만 인스턴스는 시간이 흐름에 따라 바뀔 수 있다.</li>
</ul>

<h2 id="3단계-데이터베이스-구조">3단계 데이터베이스 구조</h2>
<ul>
  <li>미국 표준화 기관인 ANSI/SPARC에서 제안</li>
  <li>데이터베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터베이스를 관점에 따라 세 단계로 나눈 것</li>
  <li>각 단계별로 다른 추상화(abstraction)를 제공한다.
    <ul>
      <li>내부 단계에서 외부 단계로 갈수록 추상화 레벨이 높아진다.</li>
    </ul>
  </li>
</ul>

<h3 id="3단계-데이터베이스-구조--외부-단계">3단계 데이터베이스 구조 : 외부 단계</h3>
<ul>
  <li>데이터베이스를 개별 사용자 관점에서 이해하고 표현하는 단계</li>
  <li>데이터베이스 하나에 외부 스키마가 여러 개 존재할 수 있다.</li>
  <li>아파트로 치자면 201호에 사는 사람처럼 각 세대에 사는 사람이라 할 수 있다. 아파트의 개별 세대원들은 본인이 사는 호수에만 관심이 있을 것이다.</li>
</ul>

<h4 id="-외부-스키마external-schema">🔸 외부 스키마(external schema)</h4>
<ul>
  <li>외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것</li>
  <li>각 사용자가 생각하는 데이터베이스의 모습. 즉 논리적 구조로 사용자마다 다름</li>
  <li>서브 스키마(sub schema)라고도 한다.</li>
</ul>

<h3 id="3단계-데이터베이스-구조--개념-단계">3단계 데이터베이스 구조 : 개념 단계</h3>
<ul>
  <li>데이터베이스를 조직 전체의 관점에서 이해하고 표현하는 단계</li>
  <li>데이터데이스 하나에 개념 스키마가 하나만 존재함</li>
  <li>아파트의 관리자라고 할 수 있다. 여러 세대가 사는 아파트에서 관리하는 사무소는 하나이고 관리 사무소는 아파트라는 조직 전체를 관리한다.</li>
</ul>

<h4 id="-개념-스키마conceptual-schema">🔸 개념 스키마(conceptual schema)</h4>
<ul>
  <li>개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것</li>
  <li>조직 전체의 관점에서 생각하는 데이터베이스의 모습</li>
  <li>전체 데이터베이스에 어떤 데이터가 저장되는지, 데이터들 간에는 어떤 관계가 존재하고 어떤 제약조건이 존재하는지에 대한 정의뿐만 아니라, 데이터에 대한 보안 정책이나 접근 권한에 대한 정의도 포함</li>
</ul>

<h3 id="3단계-데이터베이스-구조--내부-단계">3단계 데이터베이스 구조 : 내부 단계</h3>
<ul>
  <li>데이터베이스를 저장 장치의 관점에서 이해하고 표현하는 단계</li>
  <li>데이터베이스 하나에 내부 스키마가 하나만 존재함</li>
  <li>아파트의 건설사 관점이라고 할 수 있다. 아파트의 구조를 설계하고 그에 맞춰 짓는 동안 하나의 건설사에서 관리한다.</li>
</ul>

<h4 id="-내부-스키마internal-schema">🔸 내부 스키마(internal schema)</h4>
<ul>
  <li>전체 데이터베이스가 저장 장치에 실제로 저장되는 방법을 정의한 것</li>
  <li>레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적 저장 구조를 정의</li>
</ul>

<h2 id="3단계-데이터베이스-구조의-사상-또는-매핑">3단계 데이터베이스 구조의 사상 또는 매핑</h2>
<h3 id="스키마-사이의-대응-관계">스키마 사이의 대응 관계</h3>
<ul>
  <li>외부/개념 사상 : 외부 스키마와 개념 스키마의 대응 관계
    <ul>
      <li>응용 인터페이스(application interface)라고도 함</li>
    </ul>
  </li>
  <li>개념/내부 사상 : 개념 스키마와 내부 스키마의 대응 관계
    <ul>
      <li>저장 인터페이스(storage interface)라고도 함</li>
    </ul>
  </li>
  <li>미리 정의된 사상 정보를 이용하여 사용자가 원하는 데이터에 접근한다.</li>
  <li>데이터베이스를 3단계 구조로 나누고 단계별로 스키마를 유지하며 스키마 사이의 대응 관계를 정의하는 궁극적인 목적은 <code class="language-plaintext highlighter-rouge">데이터 독립성의 실현</code>이다.</li>
</ul>

<h2 id="데이터-독립성data-independency">데이터 독립성(data independency)</h2>
<ul>
  <li>하위 스키마를 변경하더라도 상위 스키마가 영향을 받지 않는 특성</li>
</ul>

<h3 id="-논리적-데이터-독립성">🔸 논리적 데이터 독립성</h3>
<ul>
  <li>개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않음</li>
  <li>개념 스키마가 변경되면 관련된 외부/개념 사상만 정확하게 수정해주면 됨</li>
</ul>

<h3 id="-물리적-데이터-독립성">🔸 물리적 데이터 독립성</h3>
<ul>
  <li>내부 스키마가 변경되어도 개념 스키마는 영향을 받지 않음</li>
  <li>내부 스키마가 변경되면 관련된 개념/내부 사상만 정확하게 수정해주면 됨</li>
</ul>

<h2 id="데이터-사전data-dictionary">데이터 사전(data dictionary)</h2>
<ul>
  <li>시스템 카탈로그(system catalog)라고도 한다.</li>
  <li>데이터베이스에 저장되는 데이터에 관한 정보, 즉 메타 데이터를 유지하는 시스템 데이터베이스
    <ul>
      <li>메타 데이터(meta data) : 데이터에 대한 데이터</li>
    </ul>
  </li>
  <li>스키마, 사상 정보, 다양한 제약조건 등을 저장</li>
  <li>데이터베이스 관리 시스템이 스스로 생성하고 유지함</li>
  <li>일반 사용자도 접근이 가능하지만 저장된 내용을 검색만 할 수 있음</li>
</ul>

<h2 id="데이터-디렉토리data-directory">데이터 디렉토리(data directory)</h2>
<ul>
  <li>데이터 사전에 있는 데이터에 실제로 접근하는 데 필요한 위치 정보를 저장하는 시스템 데이터베이스</li>
  <li>일반 사용자의 접근은 허용되지 않음</li>
</ul>

<h2 id="사용자-데이터베이스user-database">사용자 데이터베이스(user database)</h2>
<ul>
  <li>사용자가 실제로 이용하는 데이터가 저장되어 있는 일반 데이터베이스<br /><br /><br /></li>
</ul>

<h1 id="데이터베이스-사용자">데이터베이스 사용자</h1>
<ul>
  <li>데이터를 이용하기 위해 접근하는 모든 사람</li>
  <li>이용 목적에 따라 데이터베이스 관리자, 최종 사용자, 응용 프로그래머로 나눌 수 있다.</li>
</ul>

<h2 id="데이터베이스-관리자dba--database-administrator">데이터베이스 관리자(DBA : Database Administrator)</h2>
<ul>
  <li>데이터베이스 시스템을 운영, 관리하는 사람</li>
  <li>주로 데이터 정의어와 데이터 제어어를 사용</li>
  <li>주요 업무
    <ul>
      <li>데이터베이스 구성 요소 선정</li>
      <li>데이터베이스 스키마 정의</li>
      <li>물리적 저장 구조와 접근 방법 결정</li>
      <li>무결성 유지를 위한 제약조건 정의</li>
      <li>보안 및 접근 권한 정책 결정</li>
      <li>백업 및 회복 기법 정의</li>
      <li>시스템 데이터베이스 관리</li>
      <li>시스템 성능 감시 및 성능 분석</li>
      <li>데이터베이스 재구성</li>
    </ul>
  </li>
</ul>

<h2 id="최종-사용자end-user">최종 사용자(end user)</h2>
<ul>
  <li>데이터베이스에 접근하여 데이터를 조작(삽입, 삭제, 수정, 검색)하는 사람</li>
  <li>주로 데이터 조작어 사용</li>
  <li>캐주얼 사용자와 초보 사용자로 구분</li>
</ul>

<h2 id="응용-프로그래머application-programmer">응용 프로그래머(application programmer)</h2>
<ul>
  <li>데이터 언어를 삽입하여 응용 프로그램을 작성하는 사람</li>
  <li>주로 데이터 조작어 사용<br /><br /><br /></li>
</ul>

<h1 id="데이터-언어">데이터 언어</h1>
<ul>
  <li>사용자와 데이터베이스 관리 시스템 간의 통신 수단</li>
  <li>사용 목적에 따라 데이터 정의어(DDL), 데이터 조작어(DML), 데이터 제어어(DCL)로 구분</li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1163794">데이터베이스의 원리와 응용 - 한양대학교 KOCW 공개 강의</a></li>
</ul>
:ET