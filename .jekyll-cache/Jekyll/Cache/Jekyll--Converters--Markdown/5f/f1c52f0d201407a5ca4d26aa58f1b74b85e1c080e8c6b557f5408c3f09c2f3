I"'<h1 id="-프로세스-생성-process-creation">👀 프로세스 생성 (Process Creation)</h1>
<ul>
  <li>부모 프로세스(Parent process)가 자식 프로세스(Child process) 생성. 복제 생성 하는 것으로 부모 프로세스의 문맥(코드, 데이터, 스택 등)을 모두 복사한다.</li>
  <li>복제된 자식 프로세스가 부모 프로세스의 하위 노드로 위치하고 그 자식이 또 자식을 복제하면 또 하위 노드로 위치하고… 를 반복하면서 프로세스의 트리(계층 구조)를 형성한다.</li>
  <li>프로세스 혼자서 자식을 생성할 수는 없고 시스템 콜을 통해 운영체제의 서비스를 받아야만 자식 생성이 가능하다.</li>
  <li>프로세스는 자원을 필요로 하기 때문에 운영체제로부터 받거나 부모와 공유한다. 기본적으로는 자식이 복제되는 순간 별도의 프로세스가 되기 때문에 그 순간부터 부모와 자원을 얻기 위해 경쟁하는 관계가 된다.</li>
</ul>

<h2 id="자원의-공유">자원의 공유</h2>
<ul>
  <li>부모와 자식이 모든 자원을 공유하는 모델</li>
  <li>일부를 공유하는 모델</li>
  <li>전혀 공유하지 않는 모델 (일반적)</li>
</ul>

<h2 id="수행-execution">수행 (Execution)</h2>
<ul>
  <li>부모와 자식은 공존하며 수행되는 모델</li>
  <li>자식이 종료(terminate)될 때까지 부모가 기다리는(wait) 모델</li>
</ul>

<h2 id="주소-공간-address-space">주소 공간 (Address space)</h2>
<ul>
  <li>자식은 부모의 공간을 복사함 (binary and OS data)</li>
  <li>자식은 그 공간에 새로운 프로그램을 올린다.(덮어씌움)</li>
</ul>

<h3 id="유닉스의-예">유닉스의 예</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">fork()</code> 시스템 콜이 새로운 프로세스를 생성
    <ul>
      <li>부모를 그대로 복사 후 주소 공간 할당</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">fork</code> 다음에 이어지는 <code class="language-plaintext highlighter-rouge">exec()</code> 시스템 콜을 통해 새로운 프로그램을 메모리에 올림 (덮어씌우는 단계)</li>
  <li><code class="language-plaintext highlighter-rouge">fork</code>와 <code class="language-plaintext highlighter-rouge">exec</code>은 독립적으로 이루어지기 때문에 둘 중 하나만 실행될 수 있다.<br /><br /><br /></li>
</ul>

<h1 id="프로세스-종료-process-termination">프로세스 종료 (Process Termination)</h1>
<ul>
  <li>모든 프로세스는 자식이 먼저 종료된 후 부모가 종료되어야 한다.</li>
  <li>프로세스가 마지막 명령을 수행한 후 이를 운영체제에게 알려준다.(<code class="language-plaintext highlighter-rouge">exit</code>)</li>
</ul>

:ET