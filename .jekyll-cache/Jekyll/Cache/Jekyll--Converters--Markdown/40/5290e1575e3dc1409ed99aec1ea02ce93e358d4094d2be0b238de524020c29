I"K<h1 id="데이터의-표현과-연산">데이터의 표현과 연산<br /></h1>

<h2 id="1-컴퓨터의-수-체계">1. 컴퓨터의 수 체계<br /></h2>
<ul>
  <li>우리는 10진수를 사용하지만 컴퓨터는 0과 1로 모든 것을 판단하기 때문에 2진수를 사용한다.<br /></li>
  <li>컴퓨터의 연산과 제어의 기본은 부울대수이며, 컴퓨터가 다루는 데이터를 2진 숫자(Binary digIT)라고 하며 약자로 비트(BIT)라고 한다.<br /></li>
  <li>8개의 비트를 한 단위로 하여 1바이트(byte)로 사용한다.<br /></li>
  <li>2진수의 최상위 비트를 MSB(most significant bit)라 하고 최하위 비트를 LSB(least significant bit)라 한다.<br /><br /></li>
</ul>

<h2 id="2-데이터의-표현">2. 데이터의 표현<br /></h2>
<p>1) BCD 코드<br /></p>
<ul>
  <li>Binary Coded Decimal의 약자로 8421 코드라고도 한다.<br /></li>
  <li>BCD 코드는 각 비트 자리가 자리값을 갖는데 1010이라는 4자리 비트가 있다고 했을 때 왼쪽(10진수로 생각할 때 1000의 자리)부터 <br /></li>
  <li>2^3 = 8<br /></li>
  <li>2^2 = 4<br /></li>
  <li>2^1 = 2<br /></li>
  <li>2^0 = 1<br /></li>
  <li>의 값을 가지므로 8421코드라 부른다. <br /></li>
  <li>일반적으로 10진수를 2진수로 표현하는 것과 비슷하지만 10이 넘어가면 2진수는 1010이라고 표현하지만 BCD 코드는 0001 0000, 11은 0001 0001 … 와 같은 방식으로 표현한다.<br /><br /></li>
</ul>

<p>2) 문자 데이터<br /></p>
<ul>
  <li>문자 데이터는 1바이트의 데이터이다. 아스키코드의 문자 ABC를 2진법과 16진법으로 나타낸다면 다음과 같이 된다.<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>문자</th>
      <th>2진법</th>
      <th>16진법</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>0100 0001</td>
      <td>41H</td>
      <td> </td>
    </tr>
    <tr>
      <td>B</td>
      <td>0100 0010</td>
      <td>42H</td>
      <td> </td>
    </tr>
    <tr>
      <td>C</td>
      <td>0100 0011</td>
      <td>43H</td>
      <td><br /><br /></td>
    </tr>
  </tbody>
</table>

<p>3) 존(Zone) 형식<br /></p>
<ul>
  <li>언팩(unpack) 형식이라고도 하며, 1바이트에 한 개의 10진수가 저장된다. 1바이트의 왼쪽 4비트를 존(zone) 비트라고 하며 항상 F(16진수)가 들어 있다.<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>2진수</th>
      <th>1111</th>
      <th>0111</th>
      <th>1111</th>
      <th>0001</th>
      <th>1100</th>
      <th>0010</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>16진수</td>
      <td>F</td>
      <td>7</td>
      <td>F</td>
      <td>1</td>
      <td>C(양수)</td>
      <td>2</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>10진수를 712로 표현한다면 위와 같이 표현되는데 마지막 바이트의 왼쪽 4비트를 이용해서 부호를 나타낸다. 위와 같은 경우처럼 마지막 바이트의 왼쪽 4비트가 C라면 양수고<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>2진수</th>
      <th>1111</th>
      <th>0111</th>
      <th>1111</th>
      <th>0001</th>
      <th>1101</th>
      <th>0010</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>16진수</td>
      <td>F</td>
      <td>7</td>
      <td>F</td>
      <td>1</td>
      <td>D(음수)</td>
      <td>2</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>위처럼 D라면 음수로 -712가 된다.<br /><br /></li>
</ul>

<p>4) 팩(Pack) 형식<br /></p>
<ul>
  <li>수치를 표현하는 4비트의 BCD를 1바이트에 2개를 나타내며 10진수 숫자 2개를 표시한다. 존 형식이 절반으로 줄어든 형태라고 보면 된다.<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>2진수</th>
      <th>0111</th>
      <th>0001</th>
      <th>0010</th>
      <th>1100</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>16진수</td>
      <td>7</td>
      <td>1</td>
      <td>2</td>
      <td>C(양수)</td>
      <td><br /></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>2진수</th>
      <th>0111</th>
      <th>0001</th>
      <th>0010</th>
      <th>1101</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>16진수</td>
      <td>7</td>
      <td>1</td>
      <td>2</td>
      <td>D(음수)</td>
      <td><br /><br /></td>
    </tr>
  </tbody>
</table>

<p>5) 고정 소수점 형식<br /></p>
<ul>
  <li>고정 소수점 형식은 소수점 위치가 가장 오른쪽 끝에 고정되어 있다고 가정하는 것으로 전체의 수를 정수로 표현한다. 가장 왼쪽의 비트는 부호를 표시하며 0이면 +양수, 1이면 -음수를 나타낸다. 데이터 길이를 n이라고 했을 때 -(2^n-1 - 1) ~ (2^n-1 - 1)의 범위를 나타낼 수 있다.<br /></li>
  <li>고정 소수점은 BCD 코드에 비해서 명령 속도가 빠르다.<br /><br /></li>
</ul>

<p>6) 부동 소수점 표현<br /></p>
<ul>
  <li>아주 큰 수나 아주 작은 수를 표현한다든지 아니면 높은 정도(precision)로 취급할 때 많이 쓰인다. 유효숫자만을 나타내는 소수부(fraction part)와 소수점의 위치를 나타내는 지수부(exponent part)로 구분한다. 10^-78 ~ 10^74의 범위까지를 나타낼 수 있다.<br /><br /><br /></li>
</ul>

<h2 id="3-보수-연산">3. 보수 연산<br /></h2>
<ul>
  <li>보수(complement)란 어떤 기준이 되는 수를 설정했을 때 그 수에 모자라는 수를 말한다. x에 대한 9의 보수는 9로부터 x를 뺀 것인데, 6에 대한 9의 보수는 3이고 2에 대한 10의 보수는 8이다.<br /></li>
  <li>보수 연산은 뺄셈을 할 때 9의 보수를 사용하는 방법과 1의 보수와 2의 보수를 사용하는 방법 등이 있다.<br /><br /><br /></li>
</ul>
:ET