I"0<h1 id="-데이터베이스-설계">👀 데이터베이스 설계</h1>
<ul>
  <li>사용자의 다양한 요구 사항을 고려하여 데이터베이스를 생성하는 과정</li>
  <li>E-R 모델과 릴레이션 변환 규칙을 이용한 설계 과정은 5단계로 이루어져 있다.</li>
</ul>

<h2 id="1단계--요구-사항-분석">1단계 : 요구 사항 분석</h2>
<ul>
  <li>데이터베이스의 용도 파악</li>
  <li>관련된 현실 세계가 어떻게 구성되어 있는지 파악한다.</li>
  <li>결과물 : 요구 사항 명세서</li>
</ul>

<h2 id="2단계--개념적-설계">2단계 : 개념적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>에 독립적인 개념적 구조 설계</li>
  <li>현실세계에 있는 정보를 알아보기 쉽게 표시한다.</li>
  <li>결과물 : 개념적 스키마(E-R 다이어그램)</li>
</ul>

<h2 id="3단계--논리적-설계">3단계 : 논리적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>에 적합한 논리적 구조 설계</li>
  <li>결과물 : 논리적 스키마(릴레이션 스키마)</li>
</ul>

<h2 id="4단계--물리적-설계">4단계 : 물리적 설계</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DBMS</code>로 구현 가능한 물리적 구조 설계</li>
  <li>결과물 : 물리적 스키마</li>
</ul>

<h2 id="5단계--구현">5단계 : 구현</h2>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQL</code> 문을 작성한 후 이를 <code class="language-plaintext highlighter-rouge">DBMS</code>에서 실행하여 데이터베이스 생성<br /><br /></p>
  </li>
  <li>
    <p>1 ~ 3단계가 가장 핵심이 되는 단계들이며 각 단계의 설계 과정 중에 오류가 발견되어 변경이 필요하면 이전 단계로 되돌아가 설계 내용을 변경할 수 있다.<br /><br /><br /></p>
  </li>
</ul>

<h1 id="데이터-모델링data-modeling">데이터 모델링(data modeling)</h1>
<ul>
  <li>현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환 과정</li>
  <li>데이터베이스 설계의 핵심 과정</li>
  <li>모든 데이터는 특징을 추출하는 <code class="language-plaintext highlighter-rouge">추상화(abstraction)</code> 과정을 거쳐서 데이터베이스로 옮겨진다.</li>
</ul>

<h2 id="개념적-데이터-모델링conceptual-modeling">개념적 데이터 모델링(conceptual modeling)</h2>
<ul>
  <li>현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업</li>
</ul>

<h2 id="논리적-데이터-모델링logical-modeling">논리적 데이터 모델링(logical modeling)</h2>
<ul>
  <li>개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업</li>
</ul>

<h2 id="데이터-모델data-model">데이터 모델(data model)</h2>
<ul>
  <li>데이터 모델링의 결과물을 표현하는 도구</li>
</ul>

<h3 id="개념적-데이터-모델">개념적 데이터 모델</h3>
<ul>
  <li>사람의 머리로 이해할 수 있도록 현실 세계를 개념적 모델링하여 데이터베이스의 개념적 구조로 표현하는 도구</li>
  <li>예) 개체-관계 모델</li>
</ul>

<h3 id="논리적-데이터-모델">논리적 데이터 모델</h3>
<ul>
  <li>개념적 구조를 논리적 모델링하여 데이터베이스의 논리적 구조로 표현하는 도구</li>
  <li>예) 관계 데이터 모델<br /><br /><br /></li>
</ul>

<h1 id="개체-관계-모델e-r-model-entity-relationship-model">개체-관계 모델(E-R model: Entity-Relationship model)</h1>
<ul>
  <li>피터 첸(Peter Chen)이 제안한 개념적 데이터 모델</li>
  <li>개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현</li>
  <li>핵심 요소 : 개체, 속성, 관계</li>
</ul>

<h2 id="개체-관계-다이어그램e-r-diagram">개체-관계 다이어그램(E-R diagram)</h2>
<ul>
  <li>E-R 다이어그램이라고도 하며 개체 - 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것</li>
</ul>

<h2 id="개체entity">개체(entity)</h2>
<ul>
  <li>현실 세계에서 조직을 운영하는 데 꼭 필요한 사람이나 사물과 같이 구별되는 모든 것</li>
  <li>저장할 가치가 있는 중요 데이터를 가지고 있는 사람이나 사물, 개념, 사건 등</li>
  <li>다른 개체와 구별되는 이름을 가지고 있고, 각 개체만의 고유한 특성이나 상태, 즉 속성을 하나 이상 가지고 있음</li>
  <li>예) 서점에 필요한 개체 : 고객, 책</li>
  <li>예) 학교에 필요한 개체 : 학과, 과목</li>
  <li>파일 구조의 레코드(record)와 대응됨</li>
  <li>E-R 다이어그램에서 <code class="language-plaintext highlighter-rouge">사각형</code>으로 표현하고 사각형 안에 이름을 표기한다.</li>
</ul>

<h2 id="속성attribute">속성(attribute)</h2>
<ul>
  <li>개체나 관계가 가지고 있는 고유의 특성</li>
  <li>의미 있는 데이터의 가장 작은 논리적 단위</li>
  <li>파일 구조의 필드(field)와 대응됨</li>
  <li>E-R 다이어그램에서 타원으로 표현하고 타원 안에 이름을 표기</li>
</ul>

<h2 id="개체-타입entity-type">개체 타입(entity type)</h2>
<ul>
  <li>개체를 고유의 이름과 속성들로 정의한 것</li>
  <li>파일 구조의 레코드 타입(record type)에 대응됨</li>
</ul>

<h2 id="개체-인스턴스entity-instance">개체 인스턴스(entity instance)</h2>
<ul>
  <li>개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체</li>
  <li>개체 어커런스(entity occurrence)라고도 함</li>
  <li>파일 구조의 레코드 인스턴스(record instance)에 대응됨</li>
</ul>

<h2 id="개체-집합entity-set">개체 집합(entity set)</h2>
<ul>
  <li>특정 개체 타입에 대한 기체 인스턴스들을 모아놓은 것</li>
</ul>

<h2 id="속성의-분류">속성의 분류</h2>
<h3 id="속성-값의-개수에-따른-분류">속성 값의 개수에 따른 분류</h3>
<h4 id="-단일-값-속성single-valued-attribute">🔸 단일 값 속성(single-valued attribute)</h4>
<ul>
  <li>값을 하나만 가질 수 있는 속성</li>
  <li>예) 고객 개체의 이름, 적립금 속성</li>
</ul>

<h4 id="-다중-값-속성multi-valued-attribute">🔸 다중 값 속성(multi-valued attribute)</h4>
<ul>
  <li>값을 여러 개 가질 수 있는 속성</li>
  <li>예) 고객 개체의 연락처 속성</li>
  <li>예) 책 개체의 저자 속성</li>
  <li>E-R 다이어그램에서 이중 타원으로 표현</li>
</ul>

<h3 id="의미의-분해-가능성에-따른-분류">의미의 분해 가능성에 따른 분류</h3>
<h4 id="-단순-속성simple-attribute">🔸 단순 속성(simple attribute)</h4>
<ul>
  <li>의미를 더는 분해할 수 없는 속성</li>
  <li>예) 고객 개체의 적립금 속성</li>
  <li>예) 책 개체의 이름, ISBN, 가격 속성</li>
</ul>

<h4 id="-복합-속성composite-attribute">🔸 복합 속성(composite attribute)</h4>
<ul>
  <li>의미를 분해할 수 있는 속성</li>
  <li>예) 고객 개체의 주소 속성
    <ul>
      <li>시, 도, 구, 동, 우편번호 등으로 의미를 세분화해서 쪼갤 수 있다.</li>
    </ul>
  </li>
  <li>예) 고객 개체의 생년월일 속성
    <ul>
      <li>연, 월, 일로 의미를 세분화할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="유도-속성derived-attribute">유도 속성(derived attribute)</h3>
<ul>
  <li>기존의 다른 속성의 값에서 유도되어 결정되는 속성</li>
  <li>값이 별도로 저장되지 않음</li>
  <li>예) 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">가격 - 할인율 = 책 가격</code>이 되기 때문에 책 개체의 가격은 유도 속성이라 할 수 있다.</li>
    </ul>
  </li>
  <li>예) 고객 개체의 출생연도 속성으로 계산되는 나이 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">출생연도를 이용해서 고객의 나이를 계산</code>할 수 있기 때문에 고객 개체의 나이 속성은 유도 속성이라 할 수 있다.</li>
    </ul>
  </li>
  <li>E-R 다이어그램에서 점선 타원으로 표현된다.</li>
</ul>

<h3 id="널-속성null-attribute">널 속성(null attribute)</h3>
<ul>
  <li>널 값이 허용되는 속성</li>
</ul>

<h3 id="널null-값">널(null) 값</h3>
<ul>
  <li>아직 결정되지 않았거나 모르는 값 또는 존재하지 않는 값</li>
  <li>공백이나 0과는 의미가 다른데, 공백이나 0도 공백과 0이라는 값이 있는 것이다. 그래서 <code class="language-plaintext highlighter-rouge">공백, 0 != null</code></li>
  <li>예) 등급 속성이 널 값이라는 의미는 등급이 아직 결정되지 않았음을 의미</li>
</ul>

<h3 id="키-속성key-attribute">키 속성(key attribute)</h3>
<ul>
  <li>각 개체 인스턴스를 식별하는 데 사용되는 속성</li>
  <li>모든 개체 인스턴스의 키 속성 값이 다름</li>
  <li>둘 이상의 속성들로 구성되기도 함</li>
  <li>예) 고객 개체의 고객아이디 속성</li>
  <li>E-R 다이어그램에서 밑줄로 표현한다.</li>
</ul>

<h2 id="관계relationship">관계(relationship)</h2>
<ul>
  <li>개체와 개체가 맺고 있는 의미 있는 연관성</li>
  <li>개체 집합들 사이의 대응 관계, 즉 매핑(mapping)을 의미</li>
  <li>예) 고객 개체와 책 개체 간의 구매 관계 (“고객은 책을 구매한다”)</li>
  <li>E-R 다이어그램에서 마름모로 표현한다.</li>
</ul>

<h3 id="관계의-유형--관계에-참여하는-개체-타입의-수에-따라">관계의 유형 : 관계에 참여하는 개체 타입의 수에 따라</h3>
<ul>
  <li>이항 관계 : 개체 타입 두 개가 맺는 관계</li>
  <li>삼항 관계 : 개체 타입 세 개가 맺는 관계</li>
  <li>순환 관계 : 개체 타입 하나가 자기 자신과 맺는 관계</li>
</ul>

<h3 id="관계의-유형--매핑-카디널리티-기준">관계의 유형 : 매핑 카디널리티 기준</h3>
<h4 id="일대일1--1-관계">일대일(1 : 1) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있음</li>
  <li>예) 일처일부제에서의 혼인관계</li>
</ul>

<h4 id="일대다1--n-관계">일대다(1 : n) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있지만, 개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">하나</code>와 관계를 맺을 수 있음</li>
  <li>예) 하나의 부서에 여러 사원이 소속되어 있는 관계</li>
</ul>

<h4 id="다대다n--m-관계">다대다(n : m) 관계</h4>
<ul>
  <li>개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 <code class="language-plaintext highlighter-rouge">여러 개</code>와 관계를 맺을 수 있음</li>
  <li>고객은 책을 여러 권 살 수 있고 책 또한 여러 고객들에 의해서 구매될 수 있는 관계</li>
</ul>

<h4 id="매핑-카디널리티mapping-cardinality">매핑 카디널리티(mapping cardinality)</h4>
<ul>
  <li>관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수</li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1163794">데이터베이스의 원리와 응용 - 한양대학교 KOCW 공개 강의</a></li>
</ul>
:ET