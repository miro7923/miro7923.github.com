I"2<h1 id="-deadlock교착상태란">👀 Deadlock(교착상태)란?</h1>
<ul>
  <li>일련의 프로세스들이 서로가 가진 자원을 기다리며 <code class="language-plaintext highlighter-rouge">block</code>된 상태</li>
</ul>

<h2 id="resource자원">Resource(자원)</h2>
<ul>
  <li>하드웨어, 소프트웨어 등을 포함하는 개념</li>
  <li>예) <code class="language-plaintext highlighter-rouge">I/O device</code>, <code class="language-plaintext highlighter-rouge">CPU cycle</code>, <code class="language-plaintext highlighter-rouge">memory space</code>, <code class="language-plaintext highlighter-rouge">semaphore</code> 등</li>
  <li>프로세스가 자원을 사용하는 절차
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Request</code> -&gt; <code class="language-plaintext highlighter-rouge">Allocate</code> -&gt; <code class="language-plaintext highlighter-rouge">Use</code> -&gt; <code class="language-plaintext highlighter-rouge">Release</code></li>
    </ul>
  </li>
</ul>

<h2 id="데드락이-발생하는-예">데드락이 발생하는 예</h2>
<ul>
  <li>시스템에 2개의 <code class="language-plaintext highlighter-rouge">tape drive</code>가 있고 프로세스 <code class="language-plaintext highlighter-rouge">P1</code>, <code class="language-plaintext highlighter-rouge">P2</code> 각각이 하나의 <code class="language-plaintext highlighter-rouge">tape drive</code>를 보유한 채 다른 하나를 기다리고 있는 경우<br /><br /></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P0</span>          <span class="n">P1</span>
<span class="nf">P</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>       <span class="n">P</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>
<span class="n">P</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>       <span class="n">P</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>두 세마포어가 필요한 자원을 서로 자원을 하나씩 가진 상태에서 상대가 내놓기를 기다리는 경우</li>
</ul>

<h2 id="데드락-발생의-4가지-조건">데드락 발생의 4가지 조건</h2>
<h3 id="mutual-exclusion-상호-배제">Mutual exclusion (상호 배제)</h3>
<ul>
  <li>매 순간 하나의 프로세스만이 자원을 사용할 수 있음</li>
</ul>

<h3 id="no-preemption-비선점">No preemption (비선점)</h3>
<ul>
  <li>프로세스는 자원을 스스로 내어놓을 뿐 강제로 빼앗기지 않음</li>
</ul>

<h3 id="hold-and-wait-보유-대기">Hold and wait (보유 대기)</h3>
<ul>
  <li>자원을 가진 프로세스가 다른 자원을 기다릴 때 보유 자원을 놓지 않고 계속 가지고 있음</li>
</ul>

<h3 id="circular-wait-순환-대기">Circular wait (순환 대기)</h3>
<ul>
  <li>자원을 기다리는 프로세스간에 사이클이 형성되어야 함</li>
  <li>프로세스 <code class="language-plaintext highlighter-rouge">1, 2, 3, 4</code>가 있을 때
    <ul>
      <li><code class="language-plaintext highlighter-rouge">1</code>은 <code class="language-plaintext highlighter-rouge">2</code>가 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">2</code>는 <code class="language-plaintext highlighter-rouge">3</code>이 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">3</code>은 <code class="language-plaintext highlighter-rouge">4</code>가 가진 자원을 기다림</li>
      <li><code class="language-plaintext highlighter-rouge">4</code>는 <code class="language-plaintext highlighter-rouge">1</code>이 가진 자원을 기다림<br /><br /></li>
    </ul>
  </li>
</ul>

<h2 id="데드락-처리-방법">데드락 처리 방법</h2>
<h3 id="deadlock-prevention">Deadlock Prevention</h3>
<ul>
  <li>자원 할당 시 <code class="language-plaintext highlighter-rouge">데드락</code>의 4가지 필요 조건 중 어느 하나가 만족되지 않도록 하는 것</li>
</ul>

<h3 id="deadlock-avoidance">Deadlock Avoidance</h3>
<ul>
  <li>자원 요청에 대한 부가적인 정보를 이용해서 <code class="language-plaintext highlighter-rouge">데드락</code>의 가능성이 없는 경우에만 자원 할당</li>
  <li>시스템 <code class="language-plaintext highlighter-rouge">state</code>가 원래 <code class="language-plaintext highlighter-rouge">state</code>로 돌아올 수 있는 경우에만 자원 할당</li>
</ul>

<h3 id="deadlock-detection-and-recovery">Deadlock Detection and recovery</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">데드락</code> 발생은 허용하되 그에 대한 <code class="language-plaintext highlighter-rouge">detection</code> 루틴을 두어 <code class="language-plaintext highlighter-rouge">데드락</code> 발견시 <code class="language-plaintext highlighter-rouge">recover</code></li>
</ul>

<h3 id="deadlock-ingorance">Deadlock Ingorance</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">데드락</code>을 시스템이 책임지지 않음</li>
  <li><code class="language-plaintext highlighter-rouge">UNIX</code>를 포함한 대부분의 <code class="language-plaintext highlighter-rouge">OS</code>가 채택</li>
  <li><code class="language-plaintext highlighter-rouge">데드락</code> 자체가 자주 발생하는 일이 아니기 때문에 <code class="language-plaintext highlighter-rouge">데드락</code>에 대비한다고 시스템의 자원 분배를 조절하는 것은 비효율적이기 때문에 사용자가 알아서 처리하도록 한다.<br /><br /></li>
</ul>

<h2 id="데드락-방지">데드락 방지</h2>
<h3 id="mutual-exclusion">Mutual exclusion</h3>
<ul>
  <li>공유해서는 안 되는 자원의 경우 반드시 성립해야 함</li>
  <li>즉 이 조건이 반드시 성립한다면 데드락이 발생할 수 없다.</li>
</ul>

<h3 id="hold-and-wait">Hold and Wait</h3>
<ul>
  <li>프로세스가 자원을 요청할 때 다른 어떤 자원도 가지고 있지 않아야 한다.</li>
  <li>방법 1 : 프로세스 시작 시 모든 필요한 자원을 할당받게 하는 방법</li>
  <li>방법 2 : 자원이 필요할 경우 보유 자원을 모두 놓고 다시 요청</li>
</ul>

<h3 id="no-preemption">No Preemption</h3>
<ul>
  <li>프로세스가 자원을 기다려야 하는 경우 이미 보유한 자원이 선점됨</li>
  <li>모든 필요한 자원을 얻을 수 있을 때 그 프로세스는 다시 시작됨</li>
  <li><code class="language-plaintext highlighter-rouge">state</code>를 쉽게 <code class="language-plaintext highlighter-rouge">save</code>하고 <code class="language-plaintext highlighter-rouge">restore</code>할 수 있는 자원에서 주로 사용 (예: <code class="language-plaintext highlighter-rouge">CPU</code>, <code class="language-plaintext highlighter-rouge">memory</code>)</li>
</ul>

<h3 id="circular-wait">Circular Wait</h3>
<ul>
  <li>모든 자원 유형에 할당 순서를 정하여 정해진 순서대로만 자원 할당</li>
  <li>예를 들어 순서가 3인 자원 R</li>
</ul>

<h1 id="출처">출처</h1>
<ul>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">운영체제 - 이화여자대학교 KOCW 공개강의</a></li>
</ul>
:ET