I"LO<ul>
  <li>작성일 : 2022.05.02</li>
  <li>
    <p>작성자 : 황유진</p>
  </li>
  <li>팀원 : 김진영, 박승지, 반현빈, 오성은, 오은현, 윤정환, 황유진</li>
  <li>팀장 : 황유진</li>
  <li>부팀장 : 오성은</li>
  <li>GitHub Repository : <a href="https://github.com/miro7923/Uno-Mas">https://github.com/miro7923/Uno-Mas</a><br /><br /><br /></li>
</ul>

<h1 id="개발환경">개발환경</h1>
<ul>
  <li>MacBook Air (M1, 2020)</li>
  <li>OpenJDK 8</li>
  <li>Spring Tool Suite 4.14.0</li>
  <li>Spring framework 4.3.1.RELEASE</li>
  <li>Tomcat 8.5</li>
  <li>MySQL Workbench 8.0.19<br /><br /><br /></li>
</ul>

<h1 id="기간">기간</h1>
<ul>
  <li>2022.4.13 ~ 2022.5.20<br /><br /><br /></li>
</ul>

<h1 id="주제">주제</h1>
<ul>
  <li>웹 백엔드 수업 중 마지막 과제로 팀 프로젝트를 진행하게 되었다.</li>
  <li>조건은 <code class="language-plaintext highlighter-rouge">Spring</code> 기반으로 웹 사이트를 제작하는 것이다.</li>
  <li>총 팀원은 7명이며, 우리 팀은 <code class="language-plaintext highlighter-rouge">1인 가구를 위한 쇼핑몰</code>을 주제로 정했다.</li>
  <li>팀 이름으로 정해진 <code class="language-plaintext highlighter-rouge">Uno más</code>는 스페인어로 <code class="language-plaintext highlighter-rouge">하나 더</code>라는 뜻이다. <br /><br /><br /></li>
</ul>

<h1 id="진행상황">진행상황</h1>
<ul>
  <li>본격적으로 백엔드 작업에 들어가기 앞서 도메인을 생성하고 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 만들어 DB와 연결이 잘 되는지 테스트를 진행했다.</li>
</ul>

<h2 id="pomxml">pom.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.bgee.log4jdbc-log4j2<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.16<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li>요즘 말 많은 <code class="language-plaintext highlighter-rouge">log4j</code>이지만 수업시간에 로그 출력용으로 사용을 해서 우리도 사용할 예정이다. 의존성을 추가해 준다.</li>
</ul>

<h2 id="root-contextxml">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"driverClassName"</span> <span class="na">value=</span><span class="s">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"url"</span> <span class="na">value=</span><span class="s">"jdbc:log4jdbc:mysql://localhost:3306/unomasdb"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"MySQL계정아이디"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"비밀번호"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>
<ul>
  <li>DB 연결시 사용할 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성할 빈을 만든다.</li>
</ul>

<h2 id="datasourcetestjava">DataSourceTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataSourceTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">DataSourceTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">ds</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DataSource객체확인테스트</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DataSource 객체: "</span> <span class="o">+</span> <span class="n">ds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">src/java/test</code> 경로에 프로젝트를 생성시 기본으로 생성된 패키지와 같은 이름으로 패키지를 만든 뒤 테스트를 진행할 클래스를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">Junit4</code>로 테스트를 진행할 것이라서 <code class="language-plaintext highlighter-rouge">@RunWith(SpringJUnit4ClassRunner.class)</code> 어노테이션을 꼭 달아준다. (안 달면 테스트코드 열심히 작성해도 도로묵~!) 그리고 <code class="language-plaintext highlighter-rouge">@ContextConfiguration</code>로 의존 정보를 읽어올 경로도 지정해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 빈을 만들었으니까 거기로 지정해주면 된다.(손으로 타이핑 할 필요 없이 <code class="language-plaintext highlighter-rouge">file:</code> 까지만 입력하고 컨트롤 엔터 누르면 자동완성된다.)</li>
  <li>
    <p>테스트 진행을 위한 세팅을 마쳤으면 클래스 내부에 <code class="language-plaintext highlighter-rouge">Datasource</code> 객체를 생성하고 의존성을 주입해 준다. 아까 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에서 객체를 미리 생성해 놨으니까 여기에서는 그걸 가져다 쓰기만 하라는 뜻으로 <code class="language-plaintext highlighter-rouge">@Inject</code> 어노테이션을 붙인다. 만약 <code class="language-plaintext highlighter-rouge">root-context.xml</code>에 해당하는 객체 정보가 없다면 <code class="language-plaintext highlighter-rouge">@Inject</code>를 붙여도 작동하지 않는다.</p>
  </li>
  <li>
    <p>이제 DB 작업을 위한 객체를 생성할 때 스프링 없이 훨씬 레거시 형태로 작업하던 때에 비하면 일일이 <code class="language-plaintext highlighter-rouge">new</code>를 할 필요가 없는 것이 가장 편리한 점이 아닐까! 코드가 훨씬 간결해졌다.</p>
  </li>
  <li>다음으로 테스트를 진행할 메서드를 만든다. 테스트용 메서드 이름은 밖에 보여질 것이 아니라서 보통 알아보기 쉽게 한글로 작성한다고 한다. 메서드 상단에 <code class="language-plaintext highlighter-rouge">@Test</code> 어노테이션을 꼭 붙여주어야 <code class="language-plaintext highlighter-rouge">Junit</code>으로 테스트 진행시 해당 메서드를 호출한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest1.png" width="500" /></p>
<ul>
  <li>여기까지 작성했다면 저장한 뒤 실행하는데 이때 <code class="language-plaintext highlighter-rouge">Junit Test</code> 옵션으로 실행해야 한다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest2.png" width="500" /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체에 의존 주입이 잘 되었다면 테스트가 성공했다는 메시지를 볼 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest3.png" width="500" /></p>
<ul>
  <li>만약 실패 메시지가 뜬다면 로그를 잘 읽어보고 원일을 찾아 해결하면 된다.(온통 영어라 좀 긴장되긴 하지만 Caused by~로 시작하는 구문을 읽어보고 본인이 썼던 코드의 흐름을 생각해보면 찾을 수 있다)</li>
</ul>

<h2 id="다시-pomxml">다시 pom.xml</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Datasource</code> 객체가 잘 생성되는 것을 확인했으니까 이제 얘를 사용해서 DB와도 잘 연결되는지 확인해 볼 것이다.</li>
  <li>그 전에 <code class="language-plaintext highlighter-rouge">MyBatis</code>를 사용할 것이라서 <code class="language-plaintext highlighter-rouge">maven</code> 추가를 해 준다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
		
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h2 id="mybatis-configxml">mybatis-config.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>
  
<span class="nt">&lt;configuration&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>의 환경설정 파일도 추가한다.</li>
  <li>DB 매핑 과정에서 축약어로 등록하고 싶은게 있으면 여기서 등록하면 된다.</li>
</ul>

<h2 id="mapper">mapper</h2>

<p align="center"><img src="../../assets/images/junitTest4.png" width="200" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MyBatis</code>가 DB와 연결할 때 사용할 쿼리문을 연결시켜줄 파일이 필요하다.</li>
  <li>위의 형태로 폴더와 <code class="language-plaintext highlighter-rouge">xml</code> 파일을 생성한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.unomas.mapper.ProductMapper"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<ul>
  <li>일단 파일의 틀만 만들어 놓는다.</li>
</ul>

<h2 id="root-contextxml-1">root-context.xml</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSessionFactory"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"configLocation"</span> <span class="na">value=</span><span class="s">"classpath:/mybatis-config.xml"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"mapperLocations"</span> <span class="na">value=</span><span class="s">"classpath:mappers/**/*Mapper.xml"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionFactory 객체 생성 (mybatis 사용) --&gt;</span>
	
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlSession"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="na">destroy-method=</span><span class="s">"clearCache"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">"sqlSessionFactory"</span> <span class="na">ref=</span><span class="s">"sqlSessionFactory"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!-- SqlSessionTemplate 객체 생성(디비연결~자원해제) --&gt;</span>
</code></pre></div></div>

<ul>
  <li>빈 생성</li>
  <li>아까 만들었던 <code class="language-plaintext highlighter-rouge">Datasource</code>를 참고해서 생성하도록 한다.</li>
</ul>

<h2 id="mybatistestjava">MyBatisTest.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.april.unomas</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@ContextConfiguration</span><span class="o">(</span>
        <span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">"file:src/main/webapp/WEB-INF/spring/root-context.xml"</span><span class="o">}</span>
        <span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">MyBatisTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">SqlSessionFactory</span> <span class="n">sqlFactory</span><span class="o">;</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">객체확인</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ sqlSessionFactory: "</span> <span class="o">+</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
	
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nc">DB연결</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sqlFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"@@@@@@@@ session: "</span> <span class="o">+</span> <span class="n">session</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>테스트를 진행할 클래스를 만들어 테스트 코드 작성 후 실행하면 내가 코드를 잘 썼는지 아닌지 알 수 있다.</li>
</ul>

<p align="center"><img src="../../assets/images/junitTest5.png" width="500" /></p>
<p><br /><br /><br /></p>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://litiblue.com/post/mysql-workbench-db/">MySQL Workbench 로 DB 설계하기</a></li>
  <li><a href="https://velog.io/@ash3767/DB-ERD-%EB%AA%A8%EB%8D%B8%EB%A7%81">DB ERD 모델링</a><br /><br /><br /></li>
</ul>

<h1 id="마감까지">마감까지</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">D-19</code></li>
</ul>
:ET