I"n<h1 id="instruction-set">Instruction Set</h1>
<ul>
  <li>프로세서에서 지원하는 명령어들의 집합</li>
  <li>다른 컴퓨터는 다른 명령어셋을 가지고 있지만 기본적으로는 비슷하다.</li>
  <li>현대 컴퓨터는 대부분 간단한 명령어셋(<code class="language-plaintext highlighter-rouge">MIPS</code> - <code class="language-plaintext highlighter-rouge">RISK</code> 방식)을 가지고 있다.</li>
</ul>

<h2 id="instruction-set-architecture-isa">Instruction Set Architecture (ISA)</h2>
<ul>
  <li>하드웨어와 낮은 레벨의 소프트웨어를 연결하는 인터페이스로 시스템 소프트웨어(운영체제)라 할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">ISA</code>가 같으면 같은 소프트웨어를 여러 개의 <code class="language-plaintext highlighter-rouge">CPU</code>에서 실행할 수 있다.</li>
</ul>

<h2 id="abi">ABI</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ISA</code>와 운영체제 인터페이스를 합친 것</li>
  <li><code class="language-plaintext highlighter-rouge">ABI</code>만 같으면 같은 프로그램이 어디에서든 실행될 수 있다.</li>
  <li>윈도우 운영체제를 쓰는 컴퓨터들은 어떤 컴퓨터를 쓰든 같은 프로그램을 실행할 수 있는 것<br /><br /><br /></li>
</ul>

<h1 id="design-principle">Design Principle</h1>
<h2 id="1-정규화규칙화해서-간단하게-만들기">1. 정규화(규칙화)해서 간단하게 만들기</h2>
<ul>
  <li>간단할수록 저비용으로 고성능을 만들기가 쉽다.</li>
</ul>

<h2 id="2-메모리-용량이-작은-것이-빠르다">2. 메모리 용량이 작은 것이 빠르다</h2>
<ul>
  <li>메모리 용량을 작은 레지스터를 최대한 활용하는 것이 성능 향상에 도움이 된다.</li>
</ul>

<h1 id="operations-of-the-computer-hardware">Operations of the Computer Hardware</h1>
<h2 id="arithmetic-operations-산술연산">Arithmetic Operations (산술연산)</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">register</code> 간 연산으로 <code class="language-plaintext highlighter-rouge">RISK</code> 프로세서 방식</li>
  <li><code class="language-plaintext highlighter-rouge">add</code>와 <code class="language-plaintext highlighter-rouge">subtract</code>, 더하기와 빼기로 이루어져 있으며 피연산자 3개가 필요하다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>add a, b, c
</code></pre></div></div>
<p><br /></p>
<ul>
  <li>위와 같이 쓰면 <code class="language-plaintext highlighter-rouge">b</code>와 <code class="language-plaintext highlighter-rouge">c</code>를 더한 값을 <code class="language-plaintext highlighter-rouge">a</code>에 저장해라는 의미<br /><br /><br /></li>
</ul>

<h1 id="operands-of-the-computer-hardware">Operands of the Computer Hardware</h1>
<h2 id="register-operands">Register Operands</h2>
<ul>
  <li>자주 사용하는 데이터에 빠르게 접근하기 위해서 레지스터를 사용한다.</li>
  <li>32개의 <code class="language-plaintext highlighter-rouge">bit</code>로 이루어져 있으며 <code class="language-plaintext highlighter-rouge">word</code>라 부른다.</li>
  <li><code class="language-plaintext highlighter-rouge">MIPS</code>는 32개의 <code class="language-plaintext highlighter-rouge">32bit</code> 레지스터 파일을 가지고 있다.</li>
</ul>

<h2 id="byte-addresses">Byte Addresses</h2>
<ul>
  <li>대부분의 아키텍처는 <code class="language-plaintext highlighter-rouge">byte</code> 단위로 메모리를 관리한다.</li>
  <li><code class="language-plaintext highlighter-rouge">word</code>는 <code class="language-plaintext highlighter-rouge">4bytes</code>로 이루어져 있으며 이것은 하나의 명령어 단위가 된다.</li>
  <li>레지스터에 있는 데이터를 메모리에 저장할 때 자리수가 큰 게 최하위 비트(LSB)에 오면 <code class="language-plaintext highlighter-rouge">Big Endian</code>, 자리수가 제일 작은 것이 최하위 비트에 오면 <code class="language-plaintext highlighter-rouge">Little Endian</code>이라 한다.</li>
</ul>

<h2 id="memory-operands">Memory Operands</h2>
<ul>
  <li>메인 메모리는 자료의 집합을 이용한다.</li>
  <li>산술 연산을 하기 위해서 메모리에 접근할 수 있는 명령어가 지정되어 있다.(<code class="language-plaintext highlighter-rouge">Load/Store</code>)</li>
  <li>메모리는 <code class="language-plaintext highlighter-rouge">8bit</code> 크기의 주소로 이루어져 있다.</li>
  <li>모든 명령어의 크기는 <code class="language-plaintext highlighter-rouge">4bytes</code>이기 때문에 메모리 주소 또한 <code class="language-plaintext highlighter-rouge">4bytes</code> 간격으로 나열되어 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">MIPS</code>는 빅 엔디안 방식을 사용한다.</li>
</ul>

<h2 id="registers-vs-memory">Registers vs. Memory</h2>
<ul>
  <li>레지스터가 메모리에 접근하는 것 보다 훨씬 빠르다.</li>
  <li>그래서 메모리 접근을 최대한 줄이고 레지스터에서 연산하는 것이 성능 향상에 좋은데 그렇다고 너무 레지스터만 써도 성능이 떨어지니까 자주 쓰지 않는 데이터는 메모리로 내려주는 것이 좋다.</li>
</ul>
:ET